
i2cAS56000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003738  08003738  00004738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e4  080037e4  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e4  080037e4  000047e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080037ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  08003854  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003854  0000522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a474  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee4  00000000  00000000  0000f50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  000113f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007e7  00000000  00000000  00011e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dee2  00000000  00000000  00012657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc4f  00000000  00000000  00030539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5518  00000000  00000000  0003d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f26a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  000f26e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f57b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003720 	.word	0x08003720

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08003720 	.word	0x08003720

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <AS5600_ReadRegister>:
#include "AS5600.h"
#include <stdio.h>

// Private helper
static uint8_t AS5600_ReadRegister(uint8_t reg)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b088      	sub	sp, #32
 80002c4:	af04      	add	r7, sp, #16
 80002c6:	4603      	mov	r3, r0
 80002c8:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint8_t value = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	73bb      	strb	r3, [r7, #14]

    status = HAL_I2C_Mem_Read(&hi2c1, AS5600_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 100);
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	2364      	movs	r3, #100	@ 0x64
 80002d4:	9302      	str	r3, [sp, #8]
 80002d6:	2301      	movs	r3, #1
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	f107 030e 	add.w	r3, r7, #14
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2301      	movs	r3, #1
 80002e2:	216c      	movs	r1, #108	@ 0x6c
 80002e4:	480a      	ldr	r0, [pc, #40]	@ (8000310 <AS5600_ReadRegister+0x50>)
 80002e6:	f000 ff33 	bl	8001150 <HAL_I2C_Mem_Read>
 80002ea:	4603      	mov	r3, r0
 80002ec:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(10);
 80002ee:	200a      	movs	r0, #10
 80002f0:	f000 fbf2 	bl	8000ad8 <HAL_Delay>

    if (status != HAL_OK)
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d005      	beq.n	8000306 <AS5600_ReadRegister+0x46>
    {
        printf("I2C read error at reg 0x%02X: %#x\r\n", reg, status);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	7bfa      	ldrb	r2, [r7, #15]
 80002fe:	4619      	mov	r1, r3
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <AS5600_ReadRegister+0x54>)
 8000302:	f002 fba1 	bl	8002a48 <iprintf>
    }

    return value;
 8000306:	7bbb      	ldrb	r3, [r7, #14]
}
 8000308:	4618      	mov	r0, r3
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000084 	.word	0x20000084
 8000314:	08003738 	.word	0x08003738

08000318 <AS5600_ReadTwoRegisters>:

// Private helper
static uint16_t AS5600_ReadTwoRegisters(uint8_t reg)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    uint8_t high = AS5600_ReadRegister(reg);
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ffcb 	bl	80002c0 <AS5600_ReadRegister>
 800032a:	4603      	mov	r3, r0
 800032c:	73fb      	strb	r3, [r7, #15]
    uint8_t low  = AS5600_ReadRegister(reg + 1);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	3301      	adds	r3, #1
 8000332:	b2db      	uxtb	r3, r3
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffc3 	bl	80002c0 <AS5600_ReadRegister>
 800033a:	4603      	mov	r3, r0
 800033c:	73bb      	strb	r3, [r7, #14]
    return ((uint16_t)high << 8) | low;
 800033e:	7bfb      	ldrb	r3, [r7, #15]
 8000340:	b21b      	sxth	r3, r3
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	b21a      	sxth	r2, r3
 8000346:	7bbb      	ldrb	r3, [r7, #14]
 8000348:	b21b      	sxth	r3, r3
 800034a:	4313      	orrs	r3, r2
 800034c:	b21b      	sxth	r3, r3
 800034e:	b29b      	uxth	r3, r3
}
 8000350:	4618      	mov	r0, r3
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <AS5600_ReadStatus>:

// Public API
uint8_t AS5600_ReadStatus(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    return AS5600_ReadRegister(AS5600_REG_STATUS);
 800035c:	200b      	movs	r0, #11
 800035e:	f7ff ffaf 	bl	80002c0 <AS5600_ReadRegister>
 8000362:	4603      	mov	r3, r0
}
 8000364:	4618      	mov	r0, r3
 8000366:	bd80      	pop	{r7, pc}

08000368 <AS5600_ReadAngle>:
{
    return AS5600_ReadTwoRegisters(AS5600_REG_RAW_ANGLE_H);
}

uint16_t AS5600_ReadAngle(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    return AS5600_ReadTwoRegisters(AS5600_REG_ANGLE_H);
 800036c:	200e      	movs	r0, #14
 800036e:	f7ff ffd3 	bl	8000318 <AS5600_ReadTwoRegisters>
 8000372:	4603      	mov	r3, r0
}
 8000374:	4618      	mov	r0, r3
 8000376:	bd80      	pop	{r7, pc}

08000378 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000380:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000384:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000388:	f003 0301 	and.w	r3, r3, #1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d013      	beq.n	80003b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000390:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000394:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000398:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800039c:	2b00      	cmp	r3, #0
 800039e:	d00b      	beq.n	80003b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80003a0:	e000      	b.n	80003a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80003a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80003a4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f9      	beq.n	80003a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80003ae:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80003b8:	687b      	ldr	r3, [r7, #4]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b086      	sub	sp, #24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	e009      	b.n	80003ec <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	60ba      	str	r2, [r7, #8]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ffc9 	bl	8000378 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	3301      	adds	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	dbf1      	blt.n	80003d8 <_write+0x12>
  }
  return len;
 80003f4:	687b      	ldr	r3, [r7, #4]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
	...

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b088      	sub	sp, #32
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f000 faf6 	bl	80009f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f85f 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 f8e9 	bl	80005e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000412:	f000 f8a7 	bl	8000564 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //DEBUG_ScanI2CBus();
  /* USER CODE END 2 */

int angle = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	60fb      	str	r3, [r7, #12]
int32_t multi_turn_angle = 0;    // final multi-turn angle in "steps"
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
int16_t previous_angle = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	837b      	strh	r3, [r7, #26]
int32_t turns = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
int32_t totalAngle = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
	//printf("STATUS   = 0x%04X\r\n", read_register(AS5600_REG_STATUS));
	//HAL_Delay(100);

	//printf("RAW ANGLE   = 0x%04X\r\n", readTwo_register(AS5600_REG_RAW_ANGLE_H));
	//HAL_Delay(100);
	int status = AS5600_ReadStatus();
 800042a:	f7ff ff95 	bl	8000358 <AS5600_ReadStatus>
 800042e:	4603      	mov	r3, r0
 8000430:	607b      	str	r3, [r7, #4]
	printf("status: %d\r\n", status);
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	4823      	ldr	r0, [pc, #140]	@ (80004c4 <main+0xc4>)
 8000436:	f002 fb07 	bl	8002a48 <iprintf>
	angle = AS5600_ReadAngle();
 800043a:	f7ff ff95 	bl	8000368 <AS5600_ReadAngle>
 800043e:	4603      	mov	r3, r0
 8000440:	60fb      	str	r3, [r7, #12]
    int16_t delta = angle - previous_angle;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	b29a      	uxth	r2, r3
 8000446:	8b7b      	ldrh	r3, [r7, #26]
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	b29b      	uxth	r3, r3
 800044c:	827b      	strh	r3, [r7, #18]

    // Handle wrap-around (crossing 0 or 4095)
    if (delta > (AS5600_RESOLUTION / 2)) {
 800044e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000452:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000456:	dd08      	ble.n	800046a <main+0x6a>
        turns--; // rotated backwards over zero
 8000458:	697b      	ldr	r3, [r7, #20]
 800045a:	3b01      	subs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
        delta -= AS5600_RESOLUTION;
 800045e:	8a7b      	ldrh	r3, [r7, #18]
 8000460:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8000464:	b29b      	uxth	r3, r3
 8000466:	827b      	strh	r3, [r7, #18]
 8000468:	e00c      	b.n	8000484 <main+0x84>
    } else if (delta < -(AS5600_RESOLUTION / 2)) {
 800046a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800046e:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8000472:	da07      	bge.n	8000484 <main+0x84>
        turns++; // rotated forward over zero
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	3301      	adds	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
        delta += AS5600_RESOLUTION;
 800047a:	8a7b      	ldrh	r3, [r7, #18]
 800047c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000480:	b29b      	uxth	r3, r3
 8000482:	827b      	strh	r3, [r7, #18]
    }

    multi_turn_angle += delta;
 8000484:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000488:	69fa      	ldr	r2, [r7, #28]
 800048a:	4413      	add	r3, r2
 800048c:	61fb      	str	r3, [r7, #28]
    previous_angle = angle;
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	837b      	strh	r3, [r7, #26]

    totalAngle = 360 * turns + ((360 * angle) / AS5600_RESOLUTION);
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8000498:	fb03 f202 	mul.w	r2, r3, r2
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80004a2:	fb01 f303 	mul.w	r3, r1, r3
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	da01      	bge.n	80004ae <main+0xae>
 80004aa:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80004ae:	131b      	asrs	r3, r3, #12
 80004b0:	4413      	add	r3, r2
 80004b2:	60bb      	str	r3, [r7, #8]
    printf("angle: %d\r\n", totalAngle);
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	4804      	ldr	r0, [pc, #16]	@ (80004c8 <main+0xc8>)
 80004b8:	f002 fac6 	bl	8002a48 <iprintf>
	HAL_Delay(20);
 80004bc:	2014      	movs	r0, #20
 80004be:	f000 fb0b 	bl	8000ad8 <HAL_Delay>
  {
 80004c2:	e7b2      	b.n	800042a <main+0x2a>
 80004c4:	0800377c 	.word	0x0800377c
 80004c8:	0800378c 	.word	0x0800378c

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b094      	sub	sp, #80	@ 0x50
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2238      	movs	r2, #56	@ 0x38
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fb9e 	bl	8002c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80004ee:	2000      	movs	r0, #0
 80004f0:	f001 fa4e 	bl	8001990 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fe:	2340      	movs	r3, #64	@ 0x40
 8000500:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000502:	2302      	movs	r3, #2
 8000504:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000506:	2302      	movs	r3, #2
 8000508:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800050a:	2304      	movs	r3, #4
 800050c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800050e:	2355      	movs	r3, #85	@ 0x55
 8000510:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000512:	2302      	movs	r3, #2
 8000514:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000516:	2302      	movs	r3, #2
 8000518:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800051a:	2302      	movs	r3, #2
 800051c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800051e:	f107 0318 	add.w	r3, r7, #24
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fae8 	bl	8001af8 <HAL_RCC_OscConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800052e:	f000 f8d1 	bl	80006d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000532:	230f      	movs	r3, #15
 8000534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000536:	2303      	movs	r3, #3
 8000538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2104      	movs	r1, #4
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fde6 	bl	800211c <HAL_RCC_ClockConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000556:	f000 f8bd 	bl	80006d4 <Error_Handler>
  }
}
 800055a:	bf00      	nop
 800055c:	3750      	adds	r7, #80	@ 0x50
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	@ (80005dc <MX_I2C1_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000570:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <MX_I2C1_Init+0x7c>)
 8000572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800059e:	480e      	ldr	r0, [pc, #56]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005a0:	f000 fd3a 	bl	8001018 <HAL_I2C_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005aa:	f000 f893 	bl	80006d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005b2:	f001 f955 	bl	8001860 <HAL_I2CEx_ConfigAnalogFilter>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 f88a 	bl	80006d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_I2C1_Init+0x74>)
 80005c4:	f001 f997 	bl	80018f6 <HAL_I2CEx_ConfigDigitalFilter>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f881 	bl	80006d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000084 	.word	0x20000084
 80005dc:	40005400 	.word	0x40005400
 80005e0:	40b285c2 	.word	0x40b285c2

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	@ 0x28
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b34      	ldr	r3, [pc, #208]	@ (80006cc <MX_GPIO_Init+0xe8>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	4a33      	ldr	r2, [pc, #204]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000606:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000612:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	4a2d      	ldr	r2, [pc, #180]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000618:	f043 0320 	orr.w	r3, r3, #32
 800061c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800061e:	4b2b      	ldr	r3, [pc, #172]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	f003 0320 	and.w	r3, r3, #32
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <MX_GPIO_Init+0xe8>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000636:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b22      	ldr	r3, [pc, #136]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064e:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <MX_GPIO_Init+0xe8>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2120      	movs	r1, #32
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f000 fcc1 	bl	8000fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800066c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	4814      	ldr	r0, [pc, #80]	@ (80006d0 <MX_GPIO_Init+0xec>)
 800067e:	f000 fb31 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000682:	230c      	movs	r3, #12
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000692:	230c      	movs	r3, #12
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a0:	f000 fb20 	bl	8000ce4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a4:	2320      	movs	r3, #32
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	4619      	mov	r1, r3
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f000 fb11 	bl	8000ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006c2:	bf00      	nop
 80006c4:	3728      	adds	r7, #40	@ 0x28
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d8:	b672      	cpsid	i
}
 80006da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <Error_Handler+0x8>

080006e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000724 <HAL_MspInit+0x44>)
 80006ec:	f043 0301 	orr.w	r3, r3, #1
 80006f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000702:	4a08      	ldr	r2, [pc, #32]	@ (8000724 <HAL_MspInit+0x44>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000708:	6593      	str	r3, [r2, #88]	@ 0x58
 800070a:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000716:	f001 f9df 	bl	8001ad8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000

08000728 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09c      	sub	sp, #112	@ 0x70
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	2244      	movs	r2, #68	@ 0x44
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fa67 	bl	8002c1c <memset>
  if(hi2c->Instance==I2C1)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a2d      	ldr	r2, [pc, #180]	@ (8000808 <HAL_I2C_MspInit+0xe0>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d153      	bne.n	8000800 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000758:	2340      	movs	r3, #64	@ 0x40
 800075a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800075c:	2300      	movs	r3, #0
 800075e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	4618      	mov	r0, r3
 8000766:	f001 febd 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000770:	f7ff ffb0 	bl	80006d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b25      	ldr	r3, [pc, #148]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	4a24      	ldr	r2, [pc, #144]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000780:	4b22      	ldr	r3, [pc, #136]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 8000782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 800078e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000790:	4a1e      	ldr	r2, [pc, #120]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 8000792:	f043 0302 	orr.w	r3, r3, #2
 8000796:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 800079a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007aa:	2312      	movs	r3, #18
 80007ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b6:	2304      	movs	r3, #4
 80007b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 fa8e 	bl	8000ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007c8:	2380      	movs	r3, #128	@ 0x80
 80007ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007cc:	2312      	movs	r3, #18
 80007ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007d8:	2304      	movs	r3, #4
 80007da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80007e0:	4619      	mov	r1, r3
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <HAL_I2C_MspInit+0xe8>)
 80007e4:	f000 fa7e 	bl	8000ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 80007ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ec:	4a07      	ldr	r2, [pc, #28]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 80007ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80007f4:	4b05      	ldr	r3, [pc, #20]	@ (800080c <HAL_I2C_MspInit+0xe4>)
 80007f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	@ 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40005400 	.word	0x40005400
 800080c:	40021000 	.word	0x40021000
 8000810:	48000400 	.word	0x48000400

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <NMI_Handler+0x4>

0800081c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <MemManage_Handler+0x4>

0800082c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <UsageFault_Handler+0x4>

0800083c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 f917 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b086      	sub	sp, #24
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	e00a      	b.n	800089a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000884:	f3af 8000 	nop.w
 8000888:	4601      	mov	r1, r0
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	60ba      	str	r2, [r7, #8]
 8000890:	b2ca      	uxtb	r2, r1
 8000892:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	429a      	cmp	r2, r3
 80008a0:	dbf0      	blt.n	8000884 <_read+0x12>
  }

  return len;
 80008a2:	687b      	ldr	r3, [r7, #4]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3718      	adds	r7, #24
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008d4:	605a      	str	r2, [r3, #4]
  return 0;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <_isatty>:

int _isatty(int file)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ec:	2301      	movs	r3, #1
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	@ (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f002 f9b8 	bl	8002cb8 <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	@ (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	@ (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20008000 	.word	0x20008000
 8000974:	00000400 	.word	0x00000400
 8000978:	200000d8 	.word	0x200000d8
 800097c:	20000230 	.word	0x20000230

08000980 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	@ (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	@ (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a8:	f7ff ffea 	bl	8000980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	@ (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f002 f977 	bl	8002cc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d6:	f7ff fd13 	bl	8000400 <main>

080009da <LoopForever>:

LoopForever:
    b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009e8:	080037ec 	.word	0x080037ec
  ldr r2, =_sbss
 80009ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009f0:	2000022c 	.word	0x2000022c

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>

080009f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009fc:	2300      	movs	r3, #0
 80009fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f93d 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f80e 	bl	8000a28 <HAL_InitTick>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	e001      	b.n	8000a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a18:	f7ff fe62 	bl	80006e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a30:	2300      	movs	r3, #0
 8000a32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_InitTick+0x68>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d022      	beq.n	8000a82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <HAL_InitTick+0x6c>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_InitTick+0x68>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f93a 	bl	8000cca <HAL_SYSTICK_Config>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10f      	bne.n	8000a7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d809      	bhi.n	8000a76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a62:	2200      	movs	r2, #0
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6a:	f000 f914 	bl	8000c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_InitTick+0x70>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e007      	b.n	8000a86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e004      	b.n	8000a86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	e001      	b.n	8000a86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x1c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_IncTick+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a03      	ldr	r2, [pc, #12]	@ (8000ab8 <HAL_IncTick+0x1c>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	200000dc 	.word	0x200000dc
 8000abc:	20000008 	.word	0x20000008

08000ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <HAL_GetTick+0x14>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	200000dc 	.word	0x200000dc

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff ffee 	bl	8000ac0 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d004      	beq.n	8000afc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_Delay+0x40>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4413      	add	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afc:	bf00      	nop
 8000afe:	f7ff ffdf 	bl	8000ac0 <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d8f7      	bhi.n	8000afe <HAL_Delay+0x26>
  {
  }
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000008 	.word	0x20000008

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	@ (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	@ (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	@ 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	@ 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff47 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca4:	f7ff ff5e 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000caa:	687a      	ldr	r2, [r7, #4]
 8000cac:	68b9      	ldr	r1, [r7, #8]
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff ff90 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cba:	4611      	mov	r1, r2
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5f 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffb2 	bl	8000c3c <SysTick_Config>
 8000cd8:	4603      	mov	r3, r0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cf2:	e15a      	b.n	8000faa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000d00:	4013      	ands	r3, r2
 8000d02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 814c 	beq.w	8000fa4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d005      	beq.n	8000d24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d130      	bne.n	8000d86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	091b      	lsrs	r3, r3, #4
 8000d70:	f003 0201 	and.w	r2, r3, #1
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f003 0303 	and.w	r3, r3, #3
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d017      	beq.n	8000dc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d123      	bne.n	8000e16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3208      	adds	r2, #8
 8000e10:	6939      	ldr	r1, [r7, #16]
 8000e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0203 	and.w	r2, r3, #3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80a6 	beq.w	8000fa4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e58:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e64:	4b58      	ldr	r3, [pc, #352]	@ (8000fc8 <HAL_GPIO_Init+0x2e4>)
 8000e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e70:	4a56      	ldr	r2, [pc, #344]	@ (8000fcc <HAL_GPIO_Init+0x2e8>)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e9a:	d01f      	beq.n	8000edc <HAL_GPIO_Init+0x1f8>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <HAL_GPIO_Init+0x2ec>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d019      	beq.n	8000ed8 <HAL_GPIO_Init+0x1f4>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd4 <HAL_GPIO_Init+0x2f0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d013      	beq.n	8000ed4 <HAL_GPIO_Init+0x1f0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd8 <HAL_GPIO_Init+0x2f4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a49      	ldr	r2, [pc, #292]	@ (8000fdc <HAL_GPIO_Init+0x2f8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d007      	beq.n	8000ecc <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <HAL_GPIO_Init+0x2fc>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_GPIO_Init+0x1e4>
 8000ec4:	2305      	movs	r3, #5
 8000ec6:	e00a      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ec8:	2306      	movs	r3, #6
 8000eca:	e008      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ecc:	2304      	movs	r3, #4
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1fa>
 8000edc:	2300      	movs	r3, #0
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eee:	4937      	ldr	r1, [pc, #220]	@ (8000fcc <HAL_GPIO_Init+0x2e8>)
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000efc:	4b39      	ldr	r3, [pc, #228]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f20:	4a30      	ldr	r2, [pc, #192]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f4a:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f74:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <HAL_GPIO_Init+0x300>)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f47f ae9d 	bne.w	8000cf4 <HAL_GPIO_Init+0x10>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	48000800 	.word	0x48000800
 8000fd8:	48000c00 	.word	0x48000c00
 8000fdc:	48001000 	.word	0x48001000
 8000fe0:	48001400 	.word	0x48001400
 8000fe4:	40010400 	.word	0x40010400

08000fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001004:	e002      	b.n	800100c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001006:	887a      	ldrh	r2, [r7, #2]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d101      	bne.n	800102a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e08d      	b.n	8001146 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d106      	bne.n	8001044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fb72 	bl	8000728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2224      	movs	r2, #36	@ 0x24
 8001048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0201 	bic.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001068:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001078:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d107      	bne.n	8001092 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e006      	b.n	80010a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800109e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d108      	bne.n	80010ba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	e007      	b.n	80010ca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6812      	ldr	r2, [r2, #0]
 80010d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80010dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69d9      	ldr	r1, [r3, #28]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0201 	orr.w	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af02      	add	r7, sp, #8
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	4603      	mov	r3, r0
 8001160:	817b      	strh	r3, [r7, #10]
 8001162:	460b      	mov	r3, r1
 8001164:	813b      	strh	r3, [r7, #8]
 8001166:	4613      	mov	r3, r2
 8001168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b20      	cmp	r3, #32
 8001174:	f040 80fd 	bne.w	8001372 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d002      	beq.n	8001184 <HAL_I2C_Mem_Read+0x34>
 800117e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800118a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0f1      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001196:	2b01      	cmp	r3, #1
 8001198:	d101      	bne.n	800119e <HAL_I2C_Mem_Read+0x4e>
 800119a:	2302      	movs	r3, #2
 800119c:	e0ea      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2201      	movs	r2, #1
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80011a6:	f7ff fc8b 	bl	8000ac0 <HAL_GetTick>
 80011aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2319      	movs	r3, #25
 80011b2:	2201      	movs	r2, #1
 80011b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f000 f95b 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0d5      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2222      	movs	r2, #34	@ 0x22
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2240      	movs	r2, #64	@ 0x40
 80011d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6a3a      	ldr	r2, [r7, #32]
 80011e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80011e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011f0:	88f8      	ldrh	r0, [r7, #6]
 80011f2:	893a      	ldrh	r2, [r7, #8]
 80011f4:	8979      	ldrh	r1, [r7, #10]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	4603      	mov	r3, r0
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 f8bf 	bl	8001384 <I2C_RequestMemoryRead>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0ad      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800121c:	b29b      	uxth	r3, r3
 800121e:	2bff      	cmp	r3, #255	@ 0xff
 8001220:	d90e      	bls.n	8001240 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	22ff      	movs	r2, #255	@ 0xff
 8001226:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800122c:	b2da      	uxtb	r2, r3
 800122e:	8979      	ldrh	r1, [r7, #10]
 8001230:	4b52      	ldr	r3, [pc, #328]	@ (800137c <HAL_I2C_Mem_Read+0x22c>)
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 fadf 	bl	80017fc <I2C_TransferConfig>
 800123e:	e00f      	b.n	8001260 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001244:	b29a      	uxth	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800124e:	b2da      	uxtb	r2, r3
 8001250:	8979      	ldrh	r1, [r7, #10]
 8001252:	4b4a      	ldr	r3, [pc, #296]	@ (800137c <HAL_I2C_Mem_Read+0x22c>)
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 face 	bl	80017fc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f000 f902 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e07c      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d034      	beq.n	8001320 <HAL_I2C_Mem_Read+0x1d0>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d130      	bne.n	8001320 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c4:	2200      	movs	r2, #0
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f000 f8d3 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e04d      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2bff      	cmp	r3, #255	@ 0xff
 80012e0:	d90e      	bls.n	8001300 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	22ff      	movs	r2, #255	@ 0xff
 80012e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	8979      	ldrh	r1, [r7, #10]
 80012f0:	2300      	movs	r3, #0
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 fa7f 	bl	80017fc <I2C_TransferConfig>
 80012fe:	e00f      	b.n	8001320 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001304:	b29a      	uxth	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800130e:	b2da      	uxtb	r2, r3
 8001310:	8979      	ldrh	r1, [r7, #10]
 8001312:	2300      	movs	r3, #0
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 fa6e 	bl	80017fc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d19a      	bne.n	8001260 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 f940 	bl	80015b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e01a      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2220      	movs	r2, #32
 8001344:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_I2C_Mem_Read+0x230>)
 8001352:	400b      	ands	r3, r1
 8001354:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e000      	b.n	8001374 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001372:	2302      	movs	r3, #2
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	80002400 	.word	0x80002400
 8001380:	fe00e800 	.word	0xfe00e800

08001384 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af02      	add	r7, sp, #8
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	4608      	mov	r0, r1
 800138e:	4611      	mov	r1, r2
 8001390:	461a      	mov	r2, r3
 8001392:	4603      	mov	r3, r0
 8001394:	817b      	strh	r3, [r7, #10]
 8001396:	460b      	mov	r3, r1
 8001398:	813b      	strh	r3, [r7, #8]
 800139a:	4613      	mov	r3, r2
 800139c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	8979      	ldrh	r1, [r7, #10]
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <I2C_RequestMemoryRead+0xa4>)
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa26 	bl	80017fc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	69b9      	ldr	r1, [r7, #24]
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f000 f8b6 	bl	8001526 <I2C_WaitOnTXISFlagUntilTimeout>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e02c      	b.n	800141e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d105      	bne.n	80013d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013ca:	893b      	ldrh	r3, [r7, #8]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80013d4:	e015      	b.n	8001402 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013d6:	893b      	ldrh	r3, [r7, #8]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	69b9      	ldr	r1, [r7, #24]
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f000 f89c 	bl	8001526 <I2C_WaitOnTXISFlagUntilTimeout>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e012      	b.n	800141e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013f8:	893b      	ldrh	r3, [r7, #8]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2200      	movs	r2, #0
 800140a:	2140      	movs	r1, #64	@ 0x40
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f831 	bl	8001474 <I2C_WaitOnFlagUntilTimeout>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	80002000 	.word	0x80002000

0800142c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b02      	cmp	r3, #2
 8001440:	d103      	bne.n	800144a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b01      	cmp	r3, #1
 8001456:	d007      	beq.n	8001468 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	619a      	str	r2, [r3, #24]
  }
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001484:	e03b      	b.n	80014fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	6839      	ldr	r1, [r7, #0]
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f000 f8d6 	bl	800163c <I2C_IsErrorOccurred>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e041      	b.n	800151e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d02d      	beq.n	80014fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014a2:	f7ff fb0d 	bl	8000ac0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d302      	bcc.n	80014b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d122      	bne.n	80014fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	4013      	ands	r3, r2
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	461a      	mov	r2, r3
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d113      	bne.n	80014fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f043 0220 	orr.w	r2, r3, #32
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2220      	movs	r2, #32
 80014e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	699a      	ldr	r2, [r3, #24]
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4013      	ands	r3, r2
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	bf0c      	ite	eq
 800150e:	2301      	moveq	r3, #1
 8001510:	2300      	movne	r3, #0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	461a      	mov	r2, r3
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	429a      	cmp	r2, r3
 800151a:	d0b4      	beq.n	8001486 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001532:	e033      	b.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f87f 	bl	800163c <I2C_IsErrorOccurred>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e031      	b.n	80015ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154e:	d025      	beq.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001550:	f7ff fab6 	bl	8000ac0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	429a      	cmp	r2, r3
 800155e:	d302      	bcc.n	8001566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d11a      	bne.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b02      	cmp	r3, #2
 8001572:	d013      	beq.n	800159c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e007      	b.n	80015ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d1c4      	bne.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015c0:	e02f      	b.n	8001622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f838 	bl	800163c <I2C_IsErrorOccurred>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e02d      	b.n	8001632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d6:	f7ff fa73 	bl	8000ac0 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	68ba      	ldr	r2, [r7, #8]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d302      	bcc.n	80015ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d11a      	bne.n	8001622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d013      	beq.n	8001622 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f043 0220 	orr.w	r2, r3, #32
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2220      	movs	r2, #32
 800160a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e007      	b.n	8001632 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b20      	cmp	r3, #32
 800162e:	d1c8      	bne.n	80015c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b00      	cmp	r3, #0
 8001666:	d068      	beq.n	800173a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2210      	movs	r2, #16
 800166e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001670:	e049      	b.n	8001706 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d045      	beq.n	8001706 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800167a:	f7ff fa21 	bl	8000ac0 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	429a      	cmp	r2, r3
 8001688:	d302      	bcc.n	8001690 <I2C_IsErrorOccurred+0x54>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d13a      	bne.n	8001706 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800169a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016b2:	d121      	bne.n	80016f8 <I2C_IsErrorOccurred+0xbc>
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016ba:	d01d      	beq.n	80016f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80016bc:	7cfb      	ldrb	r3, [r7, #19]
 80016be:	2b20      	cmp	r3, #32
 80016c0:	d01a      	beq.n	80016f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016d2:	f7ff f9f5 	bl	8000ac0 <HAL_GetTick>
 80016d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d8:	e00e      	b.n	80016f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016da:	f7ff f9f1 	bl	8000ac0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b19      	cmp	r3, #25
 80016e6:	d907      	bls.n	80016f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	f043 0320 	orr.w	r3, r3, #32
 80016ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80016f6:	e006      	b.n	8001706 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	2b20      	cmp	r3, #32
 8001704:	d1e9      	bne.n	80016da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b20      	cmp	r3, #32
 8001712:	d003      	beq.n	800171c <I2C_IsErrorOccurred+0xe0>
 8001714:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0aa      	beq.n	8001672 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800171c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001720:	2b00      	cmp	r3, #0
 8001722:	d103      	bne.n	800172c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2220      	movs	r2, #32
 800172a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d00b      	beq.n	8001764 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800175c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800177e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00b      	beq.n	80017a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	f043 0302 	orr.w	r3, r3, #2
 8001796:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7ff fe3b 	bl	800142c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6859      	ldr	r1, [r3, #4]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <I2C_IsErrorOccurred+0x1bc>)
 80017c2:	400b      	ands	r3, r1
 80017c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80017ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3728      	adds	r7, #40	@ 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	fe00e800 	.word	0xfe00e800

080017fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	460b      	mov	r3, r1
 8001808:	817b      	strh	r3, [r7, #10]
 800180a:	4613      	mov	r3, r2
 800180c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800180e:	897b      	ldrh	r3, [r7, #10]
 8001810:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001814:	7a7b      	ldrb	r3, [r7, #9]
 8001816:	041b      	lsls	r3, r3, #16
 8001818:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800181c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	4313      	orrs	r3, r2
 8001826:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800182a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	0d5b      	lsrs	r3, r3, #21
 8001836:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <I2C_TransferConfig+0x60>)
 800183c:	430b      	orrs	r3, r1
 800183e:	43db      	mvns	r3, r3
 8001840:	ea02 0103 	and.w	r1, r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	430a      	orrs	r2, r1
 800184c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	03ff63ff 	.word	0x03ff63ff

08001860 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	d138      	bne.n	80018e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001880:	2302      	movs	r3, #2
 8001882:	e032      	b.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2224      	movs	r2, #36	@ 0x24
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018e8:	2302      	movs	r3, #2
  }
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b085      	sub	sp, #20
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b20      	cmp	r3, #32
 800190a:	d139      	bne.n	8001980 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001912:	2b01      	cmp	r3, #1
 8001914:	d101      	bne.n	800191a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001916:	2302      	movs	r3, #2
 8001918:	e033      	b.n	8001982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2224      	movs	r2, #36	@ 0x24
 8001926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0201 	bic.w	r2, r2, #1
 8001938:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001948:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4313      	orrs	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001980:	2302      	movs	r3, #2
  }
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d141      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800199e:	4b4b      	ldr	r3, [pc, #300]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d131      	bne.n	8001a10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019ac:	4b47      	ldr	r3, [pc, #284]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019b2:	4a46      	ldr	r2, [pc, #280]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019bc:	4b43      	ldr	r3, [pc, #268]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019c4:	4a41      	ldr	r2, [pc, #260]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019cc:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2232      	movs	r2, #50	@ 0x32
 80019d2:	fb02 f303 	mul.w	r3, r2, r3
 80019d6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	0c9b      	lsrs	r3, r3, #18
 80019de:	3301      	adds	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e2:	e002      	b.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ea:	4b38      	ldr	r3, [pc, #224]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019f6:	d102      	bne.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f2      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019fe:	4b33      	ldr	r3, [pc, #204]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a0a:	d158      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e057      	b.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a10:	4b2e      	ldr	r3, [pc, #184]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a16:	4a2d      	ldr	r2, [pc, #180]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a20:	e04d      	b.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a28:	d141      	bne.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a2a:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a36:	d131      	bne.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a38:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a3e:	4a23      	ldr	r2, [pc, #140]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a48:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a50:	4a1e      	ldr	r2, [pc, #120]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2232      	movs	r2, #50	@ 0x32
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	0c9b      	lsrs	r3, r3, #18
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6e:	e002      	b.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a82:	d102      	bne.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f2      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a96:	d112      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e011      	b.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001aac:	e007      	b.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ab6:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001abc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	431bde83 	.word	0x431bde83

08001ad8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ae6:	6093      	str	r3, [r2, #8]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e2fe      	b.n	8002108 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d075      	beq.n	8001c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b16:	4b97      	ldr	r3, [pc, #604]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b20:	4b94      	ldr	r3, [pc, #592]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b0c      	cmp	r3, #12
 8001b2e:	d102      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3e>
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d002      	beq.n	8001b3c <HAL_RCC_OscConfig+0x44>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d10b      	bne.n	8001b54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d05b      	beq.n	8001c00 <HAL_RCC_OscConfig+0x108>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d157      	bne.n	8001c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e2d9      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d106      	bne.n	8001b6c <HAL_RCC_OscConfig+0x74>
 8001b5e:	4b85      	ldr	r3, [pc, #532]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a84      	ldr	r2, [pc, #528]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	e01d      	b.n	8001ba8 <HAL_RCC_OscConfig+0xb0>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x98>
 8001b76:	4b7f      	ldr	r3, [pc, #508]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7b      	ldr	r2, [pc, #492]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0xb0>
 8001b90:	4b78      	ldr	r3, [pc, #480]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a77      	ldr	r2, [pc, #476]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	4b75      	ldr	r3, [pc, #468]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a74      	ldr	r2, [pc, #464]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7fe ff86 	bl	8000ac0 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7fe ff82 	bl	8000ac0 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	@ 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e29e      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bca:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xc0>
 8001bd6:	e014      	b.n	8001c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ff72 	bl	8000ac0 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7fe ff6e 	bl	8000ac0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e28a      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf2:	4b60      	ldr	r3, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0xe8>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b59      	ldr	r3, [pc, #356]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b56      	ldr	r3, [pc, #344]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b0c      	cmp	r3, #12
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x136>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_OscConfig+0x13c>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d11f      	bne.n	8001c74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c34:	4b4f      	ldr	r3, [pc, #316]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_OscConfig+0x154>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e25d      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b49      	ldr	r3, [pc, #292]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	4946      	ldr	r1, [pc, #280]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c60:	4b45      	ldr	r3, [pc, #276]	@ (8001d78 <HAL_RCC_OscConfig+0x280>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fedf 	bl	8000a28 <HAL_InitTick>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d043      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e249      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d023      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a3c      	ldr	r2, [pc, #240]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe ff1a 	bl	8000ac0 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7fe ff16 	bl	8000ac0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e232      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ca2:	4b34      	ldr	r3, [pc, #208]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f0      	beq.n	8001c90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b31      	ldr	r3, [pc, #196]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	061b      	lsls	r3, r3, #24
 8001cbc:	492d      	ldr	r1, [pc, #180]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	604b      	str	r3, [r1, #4]
 8001cc2:	e01a      	b.n	8001cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7fe fef6 	bl	8000ac0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7fe fef2 	bl	8000ac0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e20e      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cea:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x1e0>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d041      	beq.n	8001d8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01c      	beq.n	8001d48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d14:	4a17      	ldr	r2, [pc, #92]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7fe fecf 	bl	8000ac0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d26:	f7fe fecb 	bl	8000ac0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e1e7      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d38:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0ef      	beq.n	8001d26 <HAL_RCC_OscConfig+0x22e>
 8001d46:	e020      	b.n	8001d8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d48:	4b0a      	ldr	r3, [pc, #40]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4e:	4a09      	ldr	r2, [pc, #36]	@ (8001d74 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7fe feb2 	bl	8000ac0 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5e:	e00d      	b.n	8001d7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7fe feae 	bl	8000ac0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d906      	bls.n	8001d7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e1ca      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ea      	bne.n	8001d60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 80a6 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d9c:	4b84      	ldr	r3, [pc, #528]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_OscConfig+0x2b4>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x2b6>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00d      	beq.n	8001dce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dbe:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dce:	4b79      	ldr	r3, [pc, #484]	@ (8001fb4 <HAL_RCC_OscConfig+0x4bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d118      	bne.n	8001e0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dda:	4b76      	ldr	r3, [pc, #472]	@ (8001fb4 <HAL_RCC_OscConfig+0x4bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a75      	ldr	r2, [pc, #468]	@ (8001fb4 <HAL_RCC_OscConfig+0x4bc>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7fe fe6b 	bl	8000ac0 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dee:	f7fe fe67 	bl	8000ac0 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e183      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e00:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb4 <HAL_RCC_OscConfig+0x4bc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0f0      	beq.n	8001dee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d108      	bne.n	8001e26 <HAL_RCC_OscConfig+0x32e>
 8001e14:	4b66      	ldr	r3, [pc, #408]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e1a:	4a65      	ldr	r2, [pc, #404]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e24:	e024      	b.n	8001e70 <HAL_RCC_OscConfig+0x378>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d110      	bne.n	8001e50 <HAL_RCC_OscConfig+0x358>
 8001e2e:	4b60      	ldr	r3, [pc, #384]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e34:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e44:	4a5a      	ldr	r2, [pc, #360]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e4e:	e00f      	b.n	8001e70 <HAL_RCC_OscConfig+0x378>
 8001e50:	4b57      	ldr	r3, [pc, #348]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e56:	4a56      	ldr	r2, [pc, #344]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e60:	4b53      	ldr	r3, [pc, #332]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e66:	4a52      	ldr	r2, [pc, #328]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d016      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e78:	f7fe fe22 	bl	8000ac0 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e80:	f7fe fe1e 	bl	8000ac0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e138      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e96:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ed      	beq.n	8001e80 <HAL_RCC_OscConfig+0x388>
 8001ea4:	e015      	b.n	8001ed2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea6:	f7fe fe0b 	bl	8000ac0 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7fe fe07 	bl	8000ac0 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e121      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1ed      	bne.n	8001eae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d03c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001efe:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7fe fdda 	bl	8000ac0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f10:	f7fe fdd6 	bl	8000ac0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0f2      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ef      	beq.n	8001f10 <HAL_RCC_OscConfig+0x418>
 8001f30:	e01b      	b.n	8001f6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f32:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f38:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f42:	f7fe fdbd 	bl	8000ac0 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4a:	f7fe fdb9 	bl	8000ac0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0d5      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1ef      	bne.n	8001f4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80c9 	beq.w	8002106 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f74:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b0c      	cmp	r3, #12
 8001f7e:	f000 8083 	beq.w	8002088 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d15e      	bne.n	8002048 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	@ (8001fb0 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7fe fd93 	bl	8000ac0 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f9c:	e00c      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7fe fd8f 	bl	8000ac0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d905      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e0ab      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb8:	4b55      	ldr	r3, [pc, #340]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ec      	bne.n	8001f9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc4:	4b52      	ldr	r3, [pc, #328]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	4b52      	ldr	r3, [pc, #328]	@ (8002114 <HAL_RCC_OscConfig+0x61c>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6a11      	ldr	r1, [r2, #32]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fde:	0212      	lsls	r2, r2, #8
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001fe6:	0852      	lsrs	r2, r2, #1
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	0552      	lsls	r2, r2, #21
 8001fec:	4311      	orrs	r1, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ff2:	0852      	lsrs	r2, r2, #1
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	0652      	lsls	r2, r2, #25
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ffe:	06d2      	lsls	r2, r2, #27
 8002000:	430a      	orrs	r2, r1
 8002002:	4943      	ldr	r1, [pc, #268]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8002004:	4313      	orrs	r3, r2
 8002006:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a40      	ldr	r2, [pc, #256]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002012:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002014:	4b3e      	ldr	r3, [pc, #248]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a3d      	ldr	r2, [pc, #244]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe fd4e 	bl	8000ac0 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe fd4a 	bl	8000ac0 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e066      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	4b35      	ldr	r3, [pc, #212]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x530>
 8002046:	e05e      	b.n	8002106 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002048:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a30      	ldr	r2, [pc, #192]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800204e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fd34 	bl	8000ac0 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7fe fd30 	bl	8000ac0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04c      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206e:	4b28      	ldr	r3, [pc, #160]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800207a:	4b25      	ldr	r3, [pc, #148]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	4924      	ldr	r1, [pc, #144]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8002080:	4b25      	ldr	r3, [pc, #148]	@ (8002118 <HAL_RCC_OscConfig+0x620>)
 8002082:	4013      	ands	r3, r2
 8002084:	60cb      	str	r3, [r1, #12]
 8002086:	e03e      	b.n	8002106 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e039      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002094:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <HAL_RCC_OscConfig+0x618>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d12c      	bne.n	8002102 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	3b01      	subs	r3, #1
 80020b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d123      	bne.n	8002102 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d11b      	bne.n	8002102 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d113      	bne.n	8002102 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f8:	085b      	lsrs	r3, r3, #1
 80020fa:	3b01      	subs	r3, #1
 80020fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fe:	429a      	cmp	r2, r3
 8002100:	d001      	beq.n	8002106 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	019f800c 	.word	0x019f800c
 8002118:	feeefffc 	.word	0xfeeefffc

0800211c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e11e      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b91      	ldr	r3, [pc, #580]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b8e      	ldr	r3, [pc, #568]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 020f 	bic.w	r2, r3, #15
 800214a:	498c      	ldr	r1, [pc, #560]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b8a      	ldr	r3, [pc, #552]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e106      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	d073      	beq.n	8002258 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d129      	bne.n	80021cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002178:	4b81      	ldr	r3, [pc, #516]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0f4      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002188:	f000 f966 	bl	8002458 <RCC_GetSysClockFreqFromPLLSource>
 800218c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4a7c      	ldr	r2, [pc, #496]	@ (8002384 <HAL_RCC_ClockConfig+0x268>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d93f      	bls.n	8002216 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002196:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d033      	beq.n	8002216 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d12f      	bne.n	8002216 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021b6:	4b72      	ldr	r3, [pc, #456]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021be:	4a70      	ldr	r2, [pc, #448]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80021c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e024      	b.n	8002216 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0c6      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e4:	4b66      	ldr	r3, [pc, #408]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0be      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021f4:	f000 f8ce 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4a61      	ldr	r2, [pc, #388]	@ (8002384 <HAL_RCC_ClockConfig+0x268>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d909      	bls.n	8002216 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002202:	4b5f      	ldr	r3, [pc, #380]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800220a:	4a5d      	ldr	r2, [pc, #372]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 800220c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002210:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002216:	4b5a      	ldr	r3, [pc, #360]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	4957      	ldr	r1, [pc, #348]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002224:	4313      	orrs	r3, r2
 8002226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002228:	f7fe fc4a 	bl	8000ac0 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	e00a      	b.n	8002246 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002230:	f7fe fc46 	bl	8000ac0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e095      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002246:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 020c 	and.w	r2, r3, #12
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	429a      	cmp	r2, r3
 8002256:	d1eb      	bne.n	8002230 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d023      	beq.n	80022ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	4a42      	ldr	r2, [pc, #264]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002276:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800227a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d007      	beq.n	8002298 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002288:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002290:	4a3b      	ldr	r2, [pc, #236]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002292:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002296:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4936      	ldr	r1, [pc, #216]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
 80022aa:	e008      	b.n	80022be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b80      	cmp	r3, #128	@ 0x80
 80022b0:	d105      	bne.n	80022be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022b2:	4b33      	ldr	r3, [pc, #204]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	4a32      	ldr	r2, [pc, #200]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022be:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d21d      	bcs.n	8002308 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022cc:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f023 020f 	bic.w	r2, r3, #15
 80022d4:	4929      	ldr	r1, [pc, #164]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022dc:	f7fe fbf0 	bl	8000ac0 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7fe fbec 	bl	8000ac0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e03b      	b.n	8002372 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_RCC_ClockConfig+0x260>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d1ed      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002314:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4917      	ldr	r1, [pc, #92]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002322:	4313      	orrs	r3, r2
 8002324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002332:	4b13      	ldr	r3, [pc, #76]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	490f      	ldr	r1, [pc, #60]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 8002342:	4313      	orrs	r3, r2
 8002344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002346:	f000 f825 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 800234a:	4602      	mov	r2, r0
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <HAL_RCC_ClockConfig+0x264>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	091b      	lsrs	r3, r3, #4
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	490c      	ldr	r1, [pc, #48]	@ (8002388 <HAL_RCC_ClockConfig+0x26c>)
 8002358:	5ccb      	ldrb	r3, [r1, r3]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_RCC_ClockConfig+0x270>)
 8002364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_RCC_ClockConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe fb5c 	bl	8000a28 <HAL_InitTick>
 8002370:	4603      	mov	r3, r0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
 8002384:	04c4b400 	.word	0x04c4b400
 8002388:	08003798 	.word	0x08003798
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b087      	sub	sp, #28
 8002398:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800239a:	4b2c      	ldr	r3, [pc, #176]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d102      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e047      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d102      	bne.n	80023be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b8:	4b26      	ldr	r3, [pc, #152]	@ (8002454 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	e03e      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023be:	4b23      	ldr	r3, [pc, #140]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d136      	bne.n	8002438 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ca:	4b20      	ldr	r3, [pc, #128]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	3301      	adds	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d10c      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002454 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f0:	4a16      	ldr	r2, [pc, #88]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f2:	68d2      	ldr	r2, [r2, #12]
 80023f4:	0a12      	lsrs	r2, r2, #8
 80023f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	617b      	str	r3, [r7, #20]
      break;
 8002400:	e00c      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002402:	4a13      	ldr	r2, [pc, #76]	@ (8002450 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 800240c:	68d2      	ldr	r2, [r2, #12]
 800240e:	0a12      	lsrs	r2, r2, #8
 8002410:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002414:	fb02 f303 	mul.w	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
      break;
 800241a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCC_GetSysClockFreq+0xb8>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	0e5b      	lsrs	r3, r3, #25
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	e001      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800243c:	693b      	ldr	r3, [r7, #16]
}
 800243e:	4618      	mov	r0, r3
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	00f42400 	.word	0x00f42400
 8002454:	016e3600 	.word	0x016e3600

08002458 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002458:	b480      	push	{r7}
 800245a:	b087      	sub	sp, #28
 800245c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800245e:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002468:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3301      	adds	r3, #1
 8002474:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d10c      	bne.n	8002496 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800247c:	4a17      	ldr	r2, [pc, #92]	@ (80024dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002486:	68d2      	ldr	r2, [r2, #12]
 8002488:	0a12      	lsrs	r2, r2, #8
 800248a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800248e:	fb02 f303 	mul.w	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
    break;
 8002494:	e00c      	b.n	80024b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4a0e      	ldr	r2, [pc, #56]	@ (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	0a12      	lsrs	r2, r2, #8
 80024a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024a8:	fb02 f303 	mul.w	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
    break;
 80024ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	0e5b      	lsrs	r3, r3, #25
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	3301      	adds	r3, #1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ca:	687b      	ldr	r3, [r7, #4]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	016e3600 	.word	0x016e3600
 80024e0:	00f42400 	.word	0x00f42400

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8098 	beq.w	8002632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b43      	ldr	r3, [pc, #268]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10d      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b40      	ldr	r3, [pc, #256]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a3f      	ldr	r2, [pc, #252]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
 800251e:	4b3d      	ldr	r3, [pc, #244]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800252e:	4b3a      	ldr	r3, [pc, #232]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a39      	ldr	r2, [pc, #228]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800253a:	f7fe fac1 	bl	8000ac0 <HAL_GetTick>
 800253e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002540:	e009      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002542:	f7fe fabd 	bl	8000ac0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d902      	bls.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	74fb      	strb	r3, [r7, #19]
        break;
 8002554:	e005      	b.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002556:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ef      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d159      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002568:	4b2a      	ldr	r3, [pc, #168]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002572:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01e      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	429a      	cmp	r2, r3
 8002582:	d019      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002584:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800258e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b20      	ldr	r3, [pc, #128]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002596:	4a1f      	ldr	r2, [pc, #124]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b0:	4a18      	ldr	r2, [pc, #96]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fa7d 	bl	8000ac0 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c8:	e00b      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ca:	f7fe fa79 	bl	8000ac0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d8:	4293      	cmp	r3, r2
 80025da:	d902      	bls.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	74fb      	strb	r3, [r7, #19]
            break;
 80025e0:	e006      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ec      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10b      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	4903      	ldr	r1, [pc, #12]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800260c:	e008      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	74bb      	strb	r3, [r7, #18]
 8002612:	e005      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	7c7b      	ldrb	r3, [r7, #17]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4ba6      	ldr	r3, [pc, #664]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262a:	4aa5      	ldr	r2, [pc, #660]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002630:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800263e:	4ba0      	ldr	r3, [pc, #640]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002644:	f023 0203 	bic.w	r2, r3, #3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	499c      	ldr	r1, [pc, #624]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002660:	4b97      	ldr	r3, [pc, #604]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002666:	f023 020c 	bic.w	r2, r3, #12
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4994      	ldr	r1, [pc, #592]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002682:	4b8f      	ldr	r3, [pc, #572]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002688:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	498b      	ldr	r1, [pc, #556]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a4:	4b86      	ldr	r3, [pc, #536]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4983      	ldr	r1, [pc, #524]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026c6:	4b7e      	ldr	r3, [pc, #504]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	497a      	ldr	r1, [pc, #488]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026e8:	4b75      	ldr	r3, [pc, #468]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4972      	ldr	r1, [pc, #456]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270a:	4b6d      	ldr	r3, [pc, #436]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002710:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4969      	ldr	r1, [pc, #420]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800272c:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002732:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4961      	ldr	r1, [pc, #388]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002754:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	4958      	ldr	r1, [pc, #352]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276c:	2b00      	cmp	r3, #0
 800276e:	d015      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002776:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	4950      	ldr	r1, [pc, #320]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800278e:	d105      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002790:	4b4b      	ldr	r3, [pc, #300]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a4a      	ldr	r2, [pc, #296]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800279a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d015      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a8:	4b45      	ldr	r3, [pc, #276]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	4942      	ldr	r1, [pc, #264]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027c6:	d105      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c8:	4b3d      	ldr	r3, [pc, #244]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a3c      	ldr	r2, [pc, #240]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027d2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d015      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027e0:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4934      	ldr	r1, [pc, #208]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027fe:	d105      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002800:	4b2f      	ldr	r3, [pc, #188]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a2e      	ldr	r2, [pc, #184]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800280a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d015      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002818:	4b29      	ldr	r3, [pc, #164]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002826:	4926      	ldr	r1, [pc, #152]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002832:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002836:	d105      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a20      	ldr	r2, [pc, #128]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002842:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	4918      	ldr	r1, [pc, #96]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002870:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a12      	ldr	r2, [pc, #72]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002888:	4b0d      	ldr	r3, [pc, #52]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002896:	490a      	ldr	r1, [pc, #40]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a04      	ldr	r2, [pc, #16]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028b4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <std>:
 80028c4:	2300      	movs	r3, #0
 80028c6:	b510      	push	{r4, lr}
 80028c8:	4604      	mov	r4, r0
 80028ca:	e9c0 3300 	strd	r3, r3, [r0]
 80028ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028d2:	6083      	str	r3, [r0, #8]
 80028d4:	8181      	strh	r1, [r0, #12]
 80028d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80028d8:	81c2      	strh	r2, [r0, #14]
 80028da:	6183      	str	r3, [r0, #24]
 80028dc:	4619      	mov	r1, r3
 80028de:	2208      	movs	r2, #8
 80028e0:	305c      	adds	r0, #92	@ 0x5c
 80028e2:	f000 f99b 	bl	8002c1c <memset>
 80028e6:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <std+0x58>)
 80028e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80028ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <std+0x5c>)
 80028ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <std+0x60>)
 80028f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <std+0x64>)
 80028f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80028f6:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <std+0x68>)
 80028f8:	6224      	str	r4, [r4, #32]
 80028fa:	429c      	cmp	r4, r3
 80028fc:	d006      	beq.n	800290c <std+0x48>
 80028fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002902:	4294      	cmp	r4, r2
 8002904:	d002      	beq.n	800290c <std+0x48>
 8002906:	33d0      	adds	r3, #208	@ 0xd0
 8002908:	429c      	cmp	r4, r3
 800290a:	d105      	bne.n	8002918 <std+0x54>
 800290c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002914:	f000 b9fa 	b.w	8002d0c <__retarget_lock_init_recursive>
 8002918:	bd10      	pop	{r4, pc}
 800291a:	bf00      	nop
 800291c:	08002a6d 	.word	0x08002a6d
 8002920:	08002a8f 	.word	0x08002a8f
 8002924:	08002ac7 	.word	0x08002ac7
 8002928:	08002aeb 	.word	0x08002aeb
 800292c:	200000e0 	.word	0x200000e0

08002930 <stdio_exit_handler>:
 8002930:	4a02      	ldr	r2, [pc, #8]	@ (800293c <stdio_exit_handler+0xc>)
 8002932:	4903      	ldr	r1, [pc, #12]	@ (8002940 <stdio_exit_handler+0x10>)
 8002934:	4803      	ldr	r0, [pc, #12]	@ (8002944 <stdio_exit_handler+0x14>)
 8002936:	f000 b869 	b.w	8002a0c <_fwalk_sglue>
 800293a:	bf00      	nop
 800293c:	2000000c 	.word	0x2000000c
 8002940:	080035a9 	.word	0x080035a9
 8002944:	2000001c 	.word	0x2000001c

08002948 <cleanup_stdio>:
 8002948:	6841      	ldr	r1, [r0, #4]
 800294a:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <cleanup_stdio+0x34>)
 800294c:	4299      	cmp	r1, r3
 800294e:	b510      	push	{r4, lr}
 8002950:	4604      	mov	r4, r0
 8002952:	d001      	beq.n	8002958 <cleanup_stdio+0x10>
 8002954:	f000 fe28 	bl	80035a8 <_fflush_r>
 8002958:	68a1      	ldr	r1, [r4, #8]
 800295a:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <cleanup_stdio+0x38>)
 800295c:	4299      	cmp	r1, r3
 800295e:	d002      	beq.n	8002966 <cleanup_stdio+0x1e>
 8002960:	4620      	mov	r0, r4
 8002962:	f000 fe21 	bl	80035a8 <_fflush_r>
 8002966:	68e1      	ldr	r1, [r4, #12]
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <cleanup_stdio+0x3c>)
 800296a:	4299      	cmp	r1, r3
 800296c:	d004      	beq.n	8002978 <cleanup_stdio+0x30>
 800296e:	4620      	mov	r0, r4
 8002970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002974:	f000 be18 	b.w	80035a8 <_fflush_r>
 8002978:	bd10      	pop	{r4, pc}
 800297a:	bf00      	nop
 800297c:	200000e0 	.word	0x200000e0
 8002980:	20000148 	.word	0x20000148
 8002984:	200001b0 	.word	0x200001b0

08002988 <global_stdio_init.part.0>:
 8002988:	b510      	push	{r4, lr}
 800298a:	4b0b      	ldr	r3, [pc, #44]	@ (80029b8 <global_stdio_init.part.0+0x30>)
 800298c:	4c0b      	ldr	r4, [pc, #44]	@ (80029bc <global_stdio_init.part.0+0x34>)
 800298e:	4a0c      	ldr	r2, [pc, #48]	@ (80029c0 <global_stdio_init.part.0+0x38>)
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4620      	mov	r0, r4
 8002994:	2200      	movs	r2, #0
 8002996:	2104      	movs	r1, #4
 8002998:	f7ff ff94 	bl	80028c4 <std>
 800299c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80029a0:	2201      	movs	r2, #1
 80029a2:	2109      	movs	r1, #9
 80029a4:	f7ff ff8e 	bl	80028c4 <std>
 80029a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80029ac:	2202      	movs	r2, #2
 80029ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b2:	2112      	movs	r1, #18
 80029b4:	f7ff bf86 	b.w	80028c4 <std>
 80029b8:	20000218 	.word	0x20000218
 80029bc:	200000e0 	.word	0x200000e0
 80029c0:	08002931 	.word	0x08002931

080029c4 <__sfp_lock_acquire>:
 80029c4:	4801      	ldr	r0, [pc, #4]	@ (80029cc <__sfp_lock_acquire+0x8>)
 80029c6:	f000 b9a2 	b.w	8002d0e <__retarget_lock_acquire_recursive>
 80029ca:	bf00      	nop
 80029cc:	20000221 	.word	0x20000221

080029d0 <__sfp_lock_release>:
 80029d0:	4801      	ldr	r0, [pc, #4]	@ (80029d8 <__sfp_lock_release+0x8>)
 80029d2:	f000 b99d 	b.w	8002d10 <__retarget_lock_release_recursive>
 80029d6:	bf00      	nop
 80029d8:	20000221 	.word	0x20000221

080029dc <__sinit>:
 80029dc:	b510      	push	{r4, lr}
 80029de:	4604      	mov	r4, r0
 80029e0:	f7ff fff0 	bl	80029c4 <__sfp_lock_acquire>
 80029e4:	6a23      	ldr	r3, [r4, #32]
 80029e6:	b11b      	cbz	r3, 80029f0 <__sinit+0x14>
 80029e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ec:	f7ff bff0 	b.w	80029d0 <__sfp_lock_release>
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <__sinit+0x28>)
 80029f2:	6223      	str	r3, [r4, #32]
 80029f4:	4b04      	ldr	r3, [pc, #16]	@ (8002a08 <__sinit+0x2c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f5      	bne.n	80029e8 <__sinit+0xc>
 80029fc:	f7ff ffc4 	bl	8002988 <global_stdio_init.part.0>
 8002a00:	e7f2      	b.n	80029e8 <__sinit+0xc>
 8002a02:	bf00      	nop
 8002a04:	08002949 	.word	0x08002949
 8002a08:	20000218 	.word	0x20000218

08002a0c <_fwalk_sglue>:
 8002a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a10:	4607      	mov	r7, r0
 8002a12:	4688      	mov	r8, r1
 8002a14:	4614      	mov	r4, r2
 8002a16:	2600      	movs	r6, #0
 8002a18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a1c:	f1b9 0901 	subs.w	r9, r9, #1
 8002a20:	d505      	bpl.n	8002a2e <_fwalk_sglue+0x22>
 8002a22:	6824      	ldr	r4, [r4, #0]
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	d1f7      	bne.n	8002a18 <_fwalk_sglue+0xc>
 8002a28:	4630      	mov	r0, r6
 8002a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a2e:	89ab      	ldrh	r3, [r5, #12]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d907      	bls.n	8002a44 <_fwalk_sglue+0x38>
 8002a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	d003      	beq.n	8002a44 <_fwalk_sglue+0x38>
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	4638      	mov	r0, r7
 8002a40:	47c0      	blx	r8
 8002a42:	4306      	orrs	r6, r0
 8002a44:	3568      	adds	r5, #104	@ 0x68
 8002a46:	e7e9      	b.n	8002a1c <_fwalk_sglue+0x10>

08002a48 <iprintf>:
 8002a48:	b40f      	push	{r0, r1, r2, r3}
 8002a4a:	b507      	push	{r0, r1, r2, lr}
 8002a4c:	4906      	ldr	r1, [pc, #24]	@ (8002a68 <iprintf+0x20>)
 8002a4e:	ab04      	add	r3, sp, #16
 8002a50:	6808      	ldr	r0, [r1, #0]
 8002a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a56:	6881      	ldr	r1, [r0, #8]
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	f000 fa7d 	bl	8002f58 <_vfiprintf_r>
 8002a5e:	b003      	add	sp, #12
 8002a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a64:	b004      	add	sp, #16
 8002a66:	4770      	bx	lr
 8002a68:	20000018 	.word	0x20000018

08002a6c <__sread>:
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	460c      	mov	r4, r1
 8002a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a74:	f000 f8fc 	bl	8002c70 <_read_r>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	bfab      	itete	ge
 8002a7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8002a80:	181b      	addge	r3, r3, r0
 8002a82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a86:	bfac      	ite	ge
 8002a88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a8a:	81a3      	strhlt	r3, [r4, #12]
 8002a8c:	bd10      	pop	{r4, pc}

08002a8e <__swrite>:
 8002a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a92:	461f      	mov	r7, r3
 8002a94:	898b      	ldrh	r3, [r1, #12]
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	4605      	mov	r5, r0
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	4616      	mov	r6, r2
 8002a9e:	d505      	bpl.n	8002aac <__swrite+0x1e>
 8002aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f000 f8d0 	bl	8002c4c <_lseek_r>
 8002aac:	89a3      	ldrh	r3, [r4, #12]
 8002aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ab6:	81a3      	strh	r3, [r4, #12]
 8002ab8:	4632      	mov	r2, r6
 8002aba:	463b      	mov	r3, r7
 8002abc:	4628      	mov	r0, r5
 8002abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ac2:	f000 b8e7 	b.w	8002c94 <_write_r>

08002ac6 <__sseek>:
 8002ac6:	b510      	push	{r4, lr}
 8002ac8:	460c      	mov	r4, r1
 8002aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ace:	f000 f8bd 	bl	8002c4c <_lseek_r>
 8002ad2:	1c43      	adds	r3, r0, #1
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	bf15      	itete	ne
 8002ad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ae2:	81a3      	strheq	r3, [r4, #12]
 8002ae4:	bf18      	it	ne
 8002ae6:	81a3      	strhne	r3, [r4, #12]
 8002ae8:	bd10      	pop	{r4, pc}

08002aea <__sclose>:
 8002aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aee:	f000 b89d 	b.w	8002c2c <_close_r>

08002af2 <__swbuf_r>:
 8002af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af4:	460e      	mov	r6, r1
 8002af6:	4614      	mov	r4, r2
 8002af8:	4605      	mov	r5, r0
 8002afa:	b118      	cbz	r0, 8002b04 <__swbuf_r+0x12>
 8002afc:	6a03      	ldr	r3, [r0, #32]
 8002afe:	b90b      	cbnz	r3, 8002b04 <__swbuf_r+0x12>
 8002b00:	f7ff ff6c 	bl	80029dc <__sinit>
 8002b04:	69a3      	ldr	r3, [r4, #24]
 8002b06:	60a3      	str	r3, [r4, #8]
 8002b08:	89a3      	ldrh	r3, [r4, #12]
 8002b0a:	071a      	lsls	r2, r3, #28
 8002b0c:	d501      	bpl.n	8002b12 <__swbuf_r+0x20>
 8002b0e:	6923      	ldr	r3, [r4, #16]
 8002b10:	b943      	cbnz	r3, 8002b24 <__swbuf_r+0x32>
 8002b12:	4621      	mov	r1, r4
 8002b14:	4628      	mov	r0, r5
 8002b16:	f000 f82b 	bl	8002b70 <__swsetup_r>
 8002b1a:	b118      	cbz	r0, 8002b24 <__swbuf_r+0x32>
 8002b1c:	f04f 37ff 	mov.w	r7, #4294967295
 8002b20:	4638      	mov	r0, r7
 8002b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b24:	6823      	ldr	r3, [r4, #0]
 8002b26:	6922      	ldr	r2, [r4, #16]
 8002b28:	1a98      	subs	r0, r3, r2
 8002b2a:	6963      	ldr	r3, [r4, #20]
 8002b2c:	b2f6      	uxtb	r6, r6
 8002b2e:	4283      	cmp	r3, r0
 8002b30:	4637      	mov	r7, r6
 8002b32:	dc05      	bgt.n	8002b40 <__swbuf_r+0x4e>
 8002b34:	4621      	mov	r1, r4
 8002b36:	4628      	mov	r0, r5
 8002b38:	f000 fd36 	bl	80035a8 <_fflush_r>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	d1ed      	bne.n	8002b1c <__swbuf_r+0x2a>
 8002b40:	68a3      	ldr	r3, [r4, #8]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	60a3      	str	r3, [r4, #8]
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	6022      	str	r2, [r4, #0]
 8002b4c:	701e      	strb	r6, [r3, #0]
 8002b4e:	6962      	ldr	r2, [r4, #20]
 8002b50:	1c43      	adds	r3, r0, #1
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d004      	beq.n	8002b60 <__swbuf_r+0x6e>
 8002b56:	89a3      	ldrh	r3, [r4, #12]
 8002b58:	07db      	lsls	r3, r3, #31
 8002b5a:	d5e1      	bpl.n	8002b20 <__swbuf_r+0x2e>
 8002b5c:	2e0a      	cmp	r6, #10
 8002b5e:	d1df      	bne.n	8002b20 <__swbuf_r+0x2e>
 8002b60:	4621      	mov	r1, r4
 8002b62:	4628      	mov	r0, r5
 8002b64:	f000 fd20 	bl	80035a8 <_fflush_r>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d0d9      	beq.n	8002b20 <__swbuf_r+0x2e>
 8002b6c:	e7d6      	b.n	8002b1c <__swbuf_r+0x2a>
	...

08002b70 <__swsetup_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <__swsetup_r+0xa8>)
 8002b74:	4605      	mov	r5, r0
 8002b76:	6818      	ldr	r0, [r3, #0]
 8002b78:	460c      	mov	r4, r1
 8002b7a:	b118      	cbz	r0, 8002b84 <__swsetup_r+0x14>
 8002b7c:	6a03      	ldr	r3, [r0, #32]
 8002b7e:	b90b      	cbnz	r3, 8002b84 <__swsetup_r+0x14>
 8002b80:	f7ff ff2c 	bl	80029dc <__sinit>
 8002b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b88:	0719      	lsls	r1, r3, #28
 8002b8a:	d422      	bmi.n	8002bd2 <__swsetup_r+0x62>
 8002b8c:	06da      	lsls	r2, r3, #27
 8002b8e:	d407      	bmi.n	8002ba0 <__swsetup_r+0x30>
 8002b90:	2209      	movs	r2, #9
 8002b92:	602a      	str	r2, [r5, #0]
 8002b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b98:	81a3      	strh	r3, [r4, #12]
 8002b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9e:	e033      	b.n	8002c08 <__swsetup_r+0x98>
 8002ba0:	0758      	lsls	r0, r3, #29
 8002ba2:	d512      	bpl.n	8002bca <__swsetup_r+0x5a>
 8002ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ba6:	b141      	cbz	r1, 8002bba <__swsetup_r+0x4a>
 8002ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002bac:	4299      	cmp	r1, r3
 8002bae:	d002      	beq.n	8002bb6 <__swsetup_r+0x46>
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 f8af 	bl	8002d14 <_free_r>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002bc0:	81a3      	strh	r3, [r4, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	6063      	str	r3, [r4, #4]
 8002bc6:	6923      	ldr	r3, [r4, #16]
 8002bc8:	6023      	str	r3, [r4, #0]
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	6923      	ldr	r3, [r4, #16]
 8002bd4:	b94b      	cbnz	r3, 8002bea <__swsetup_r+0x7a>
 8002bd6:	89a3      	ldrh	r3, [r4, #12]
 8002bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be0:	d003      	beq.n	8002bea <__swsetup_r+0x7a>
 8002be2:	4621      	mov	r1, r4
 8002be4:	4628      	mov	r0, r5
 8002be6:	f000 fd2d 	bl	8003644 <__smakebuf_r>
 8002bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bee:	f013 0201 	ands.w	r2, r3, #1
 8002bf2:	d00a      	beq.n	8002c0a <__swsetup_r+0x9a>
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60a2      	str	r2, [r4, #8]
 8002bf8:	6962      	ldr	r2, [r4, #20]
 8002bfa:	4252      	negs	r2, r2
 8002bfc:	61a2      	str	r2, [r4, #24]
 8002bfe:	6922      	ldr	r2, [r4, #16]
 8002c00:	b942      	cbnz	r2, 8002c14 <__swsetup_r+0xa4>
 8002c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002c06:	d1c5      	bne.n	8002b94 <__swsetup_r+0x24>
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
 8002c0a:	0799      	lsls	r1, r3, #30
 8002c0c:	bf58      	it	pl
 8002c0e:	6962      	ldrpl	r2, [r4, #20]
 8002c10:	60a2      	str	r2, [r4, #8]
 8002c12:	e7f4      	b.n	8002bfe <__swsetup_r+0x8e>
 8002c14:	2000      	movs	r0, #0
 8002c16:	e7f7      	b.n	8002c08 <__swsetup_r+0x98>
 8002c18:	20000018 	.word	0x20000018

08002c1c <memset>:
 8002c1c:	4402      	add	r2, r0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d100      	bne.n	8002c26 <memset+0xa>
 8002c24:	4770      	bx	lr
 8002c26:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2a:	e7f9      	b.n	8002c20 <memset+0x4>

08002c2c <_close_r>:
 8002c2c:	b538      	push	{r3, r4, r5, lr}
 8002c2e:	4d06      	ldr	r5, [pc, #24]	@ (8002c48 <_close_r+0x1c>)
 8002c30:	2300      	movs	r3, #0
 8002c32:	4604      	mov	r4, r0
 8002c34:	4608      	mov	r0, r1
 8002c36:	602b      	str	r3, [r5, #0]
 8002c38:	f7fd fe38 	bl	80008ac <_close>
 8002c3c:	1c43      	adds	r3, r0, #1
 8002c3e:	d102      	bne.n	8002c46 <_close_r+0x1a>
 8002c40:	682b      	ldr	r3, [r5, #0]
 8002c42:	b103      	cbz	r3, 8002c46 <_close_r+0x1a>
 8002c44:	6023      	str	r3, [r4, #0]
 8002c46:	bd38      	pop	{r3, r4, r5, pc}
 8002c48:	2000021c 	.word	0x2000021c

08002c4c <_lseek_r>:
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4d07      	ldr	r5, [pc, #28]	@ (8002c6c <_lseek_r+0x20>)
 8002c50:	4604      	mov	r4, r0
 8002c52:	4608      	mov	r0, r1
 8002c54:	4611      	mov	r1, r2
 8002c56:	2200      	movs	r2, #0
 8002c58:	602a      	str	r2, [r5, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f7fd fe4d 	bl	80008fa <_lseek>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_lseek_r+0x1e>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_lseek_r+0x1e>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	2000021c 	.word	0x2000021c

08002c70 <_read_r>:
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4d07      	ldr	r5, [pc, #28]	@ (8002c90 <_read_r+0x20>)
 8002c74:	4604      	mov	r4, r0
 8002c76:	4608      	mov	r0, r1
 8002c78:	4611      	mov	r1, r2
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	602a      	str	r2, [r5, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f7fd fdf7 	bl	8000872 <_read>
 8002c84:	1c43      	adds	r3, r0, #1
 8002c86:	d102      	bne.n	8002c8e <_read_r+0x1e>
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	b103      	cbz	r3, 8002c8e <_read_r+0x1e>
 8002c8c:	6023      	str	r3, [r4, #0]
 8002c8e:	bd38      	pop	{r3, r4, r5, pc}
 8002c90:	2000021c 	.word	0x2000021c

08002c94 <_write_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	4d07      	ldr	r5, [pc, #28]	@ (8002cb4 <_write_r+0x20>)
 8002c98:	4604      	mov	r4, r0
 8002c9a:	4608      	mov	r0, r1
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	602a      	str	r2, [r5, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f7fd fb8f 	bl	80003c6 <_write>
 8002ca8:	1c43      	adds	r3, r0, #1
 8002caa:	d102      	bne.n	8002cb2 <_write_r+0x1e>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	b103      	cbz	r3, 8002cb2 <_write_r+0x1e>
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
 8002cb4:	2000021c 	.word	0x2000021c

08002cb8 <__errno>:
 8002cb8:	4b01      	ldr	r3, [pc, #4]	@ (8002cc0 <__errno+0x8>)
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000018 	.word	0x20000018

08002cc4 <__libc_init_array>:
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8002cfc <__libc_init_array+0x38>)
 8002cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8002d00 <__libc_init_array+0x3c>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	2600      	movs	r6, #0
 8002cd0:	42a6      	cmp	r6, r4
 8002cd2:	d109      	bne.n	8002ce8 <__libc_init_array+0x24>
 8002cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8002d04 <__libc_init_array+0x40>)
 8002cd6:	4c0c      	ldr	r4, [pc, #48]	@ (8002d08 <__libc_init_array+0x44>)
 8002cd8:	f000 fd22 	bl	8003720 <_init>
 8002cdc:	1b64      	subs	r4, r4, r5
 8002cde:	10a4      	asrs	r4, r4, #2
 8002ce0:	2600      	movs	r6, #0
 8002ce2:	42a6      	cmp	r6, r4
 8002ce4:	d105      	bne.n	8002cf2 <__libc_init_array+0x2e>
 8002ce6:	bd70      	pop	{r4, r5, r6, pc}
 8002ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cec:	4798      	blx	r3
 8002cee:	3601      	adds	r6, #1
 8002cf0:	e7ee      	b.n	8002cd0 <__libc_init_array+0xc>
 8002cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf6:	4798      	blx	r3
 8002cf8:	3601      	adds	r6, #1
 8002cfa:	e7f2      	b.n	8002ce2 <__libc_init_array+0x1e>
 8002cfc:	080037e4 	.word	0x080037e4
 8002d00:	080037e4 	.word	0x080037e4
 8002d04:	080037e4 	.word	0x080037e4
 8002d08:	080037e8 	.word	0x080037e8

08002d0c <__retarget_lock_init_recursive>:
 8002d0c:	4770      	bx	lr

08002d0e <__retarget_lock_acquire_recursive>:
 8002d0e:	4770      	bx	lr

08002d10 <__retarget_lock_release_recursive>:
 8002d10:	4770      	bx	lr
	...

08002d14 <_free_r>:
 8002d14:	b538      	push	{r3, r4, r5, lr}
 8002d16:	4605      	mov	r5, r0
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	d041      	beq.n	8002da0 <_free_r+0x8c>
 8002d1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d20:	1f0c      	subs	r4, r1, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bfb8      	it	lt
 8002d26:	18e4      	addlt	r4, r4, r3
 8002d28:	f000 f8e0 	bl	8002eec <__malloc_lock>
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002da4 <_free_r+0x90>)
 8002d2e:	6813      	ldr	r3, [r2, #0]
 8002d30:	b933      	cbnz	r3, 8002d40 <_free_r+0x2c>
 8002d32:	6063      	str	r3, [r4, #4]
 8002d34:	6014      	str	r4, [r2, #0]
 8002d36:	4628      	mov	r0, r5
 8002d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d3c:	f000 b8dc 	b.w	8002ef8 <__malloc_unlock>
 8002d40:	42a3      	cmp	r3, r4
 8002d42:	d908      	bls.n	8002d56 <_free_r+0x42>
 8002d44:	6820      	ldr	r0, [r4, #0]
 8002d46:	1821      	adds	r1, r4, r0
 8002d48:	428b      	cmp	r3, r1
 8002d4a:	bf01      	itttt	eq
 8002d4c:	6819      	ldreq	r1, [r3, #0]
 8002d4e:	685b      	ldreq	r3, [r3, #4]
 8002d50:	1809      	addeq	r1, r1, r0
 8002d52:	6021      	streq	r1, [r4, #0]
 8002d54:	e7ed      	b.n	8002d32 <_free_r+0x1e>
 8002d56:	461a      	mov	r2, r3
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	b10b      	cbz	r3, 8002d60 <_free_r+0x4c>
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	d9fa      	bls.n	8002d56 <_free_r+0x42>
 8002d60:	6811      	ldr	r1, [r2, #0]
 8002d62:	1850      	adds	r0, r2, r1
 8002d64:	42a0      	cmp	r0, r4
 8002d66:	d10b      	bne.n	8002d80 <_free_r+0x6c>
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	4401      	add	r1, r0
 8002d6c:	1850      	adds	r0, r2, r1
 8002d6e:	4283      	cmp	r3, r0
 8002d70:	6011      	str	r1, [r2, #0]
 8002d72:	d1e0      	bne.n	8002d36 <_free_r+0x22>
 8002d74:	6818      	ldr	r0, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	6053      	str	r3, [r2, #4]
 8002d7a:	4408      	add	r0, r1
 8002d7c:	6010      	str	r0, [r2, #0]
 8002d7e:	e7da      	b.n	8002d36 <_free_r+0x22>
 8002d80:	d902      	bls.n	8002d88 <_free_r+0x74>
 8002d82:	230c      	movs	r3, #12
 8002d84:	602b      	str	r3, [r5, #0]
 8002d86:	e7d6      	b.n	8002d36 <_free_r+0x22>
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	1821      	adds	r1, r4, r0
 8002d8c:	428b      	cmp	r3, r1
 8002d8e:	bf04      	itt	eq
 8002d90:	6819      	ldreq	r1, [r3, #0]
 8002d92:	685b      	ldreq	r3, [r3, #4]
 8002d94:	6063      	str	r3, [r4, #4]
 8002d96:	bf04      	itt	eq
 8002d98:	1809      	addeq	r1, r1, r0
 8002d9a:	6021      	streq	r1, [r4, #0]
 8002d9c:	6054      	str	r4, [r2, #4]
 8002d9e:	e7ca      	b.n	8002d36 <_free_r+0x22>
 8002da0:	bd38      	pop	{r3, r4, r5, pc}
 8002da2:	bf00      	nop
 8002da4:	20000228 	.word	0x20000228

08002da8 <sbrk_aligned>:
 8002da8:	b570      	push	{r4, r5, r6, lr}
 8002daa:	4e0f      	ldr	r6, [pc, #60]	@ (8002de8 <sbrk_aligned+0x40>)
 8002dac:	460c      	mov	r4, r1
 8002dae:	6831      	ldr	r1, [r6, #0]
 8002db0:	4605      	mov	r5, r0
 8002db2:	b911      	cbnz	r1, 8002dba <sbrk_aligned+0x12>
 8002db4:	f000 fca4 	bl	8003700 <_sbrk_r>
 8002db8:	6030      	str	r0, [r6, #0]
 8002dba:	4621      	mov	r1, r4
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	f000 fc9f 	bl	8003700 <_sbrk_r>
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	d103      	bne.n	8002dce <sbrk_aligned+0x26>
 8002dc6:	f04f 34ff 	mov.w	r4, #4294967295
 8002dca:	4620      	mov	r0, r4
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	1cc4      	adds	r4, r0, #3
 8002dd0:	f024 0403 	bic.w	r4, r4, #3
 8002dd4:	42a0      	cmp	r0, r4
 8002dd6:	d0f8      	beq.n	8002dca <sbrk_aligned+0x22>
 8002dd8:	1a21      	subs	r1, r4, r0
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f000 fc90 	bl	8003700 <_sbrk_r>
 8002de0:	3001      	adds	r0, #1
 8002de2:	d1f2      	bne.n	8002dca <sbrk_aligned+0x22>
 8002de4:	e7ef      	b.n	8002dc6 <sbrk_aligned+0x1e>
 8002de6:	bf00      	nop
 8002de8:	20000224 	.word	0x20000224

08002dec <_malloc_r>:
 8002dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002df0:	1ccd      	adds	r5, r1, #3
 8002df2:	f025 0503 	bic.w	r5, r5, #3
 8002df6:	3508      	adds	r5, #8
 8002df8:	2d0c      	cmp	r5, #12
 8002dfa:	bf38      	it	cc
 8002dfc:	250c      	movcc	r5, #12
 8002dfe:	2d00      	cmp	r5, #0
 8002e00:	4606      	mov	r6, r0
 8002e02:	db01      	blt.n	8002e08 <_malloc_r+0x1c>
 8002e04:	42a9      	cmp	r1, r5
 8002e06:	d904      	bls.n	8002e12 <_malloc_r+0x26>
 8002e08:	230c      	movs	r3, #12
 8002e0a:	6033      	str	r3, [r6, #0]
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ee8 <_malloc_r+0xfc>
 8002e16:	f000 f869 	bl	8002eec <__malloc_lock>
 8002e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8002e1e:	461c      	mov	r4, r3
 8002e20:	bb44      	cbnz	r4, 8002e74 <_malloc_r+0x88>
 8002e22:	4629      	mov	r1, r5
 8002e24:	4630      	mov	r0, r6
 8002e26:	f7ff ffbf 	bl	8002da8 <sbrk_aligned>
 8002e2a:	1c43      	adds	r3, r0, #1
 8002e2c:	4604      	mov	r4, r0
 8002e2e:	d158      	bne.n	8002ee2 <_malloc_r+0xf6>
 8002e30:	f8d8 4000 	ldr.w	r4, [r8]
 8002e34:	4627      	mov	r7, r4
 8002e36:	2f00      	cmp	r7, #0
 8002e38:	d143      	bne.n	8002ec2 <_malloc_r+0xd6>
 8002e3a:	2c00      	cmp	r4, #0
 8002e3c:	d04b      	beq.n	8002ed6 <_malloc_r+0xea>
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	4639      	mov	r1, r7
 8002e42:	4630      	mov	r0, r6
 8002e44:	eb04 0903 	add.w	r9, r4, r3
 8002e48:	f000 fc5a 	bl	8003700 <_sbrk_r>
 8002e4c:	4581      	cmp	r9, r0
 8002e4e:	d142      	bne.n	8002ed6 <_malloc_r+0xea>
 8002e50:	6821      	ldr	r1, [r4, #0]
 8002e52:	1a6d      	subs	r5, r5, r1
 8002e54:	4629      	mov	r1, r5
 8002e56:	4630      	mov	r0, r6
 8002e58:	f7ff ffa6 	bl	8002da8 <sbrk_aligned>
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	d03a      	beq.n	8002ed6 <_malloc_r+0xea>
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	442b      	add	r3, r5
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	f8d8 3000 	ldr.w	r3, [r8]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	bb62      	cbnz	r2, 8002ec8 <_malloc_r+0xdc>
 8002e6e:	f8c8 7000 	str.w	r7, [r8]
 8002e72:	e00f      	b.n	8002e94 <_malloc_r+0xa8>
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	1b52      	subs	r2, r2, r5
 8002e78:	d420      	bmi.n	8002ebc <_malloc_r+0xd0>
 8002e7a:	2a0b      	cmp	r2, #11
 8002e7c:	d917      	bls.n	8002eae <_malloc_r+0xc2>
 8002e7e:	1961      	adds	r1, r4, r5
 8002e80:	42a3      	cmp	r3, r4
 8002e82:	6025      	str	r5, [r4, #0]
 8002e84:	bf18      	it	ne
 8002e86:	6059      	strne	r1, [r3, #4]
 8002e88:	6863      	ldr	r3, [r4, #4]
 8002e8a:	bf08      	it	eq
 8002e8c:	f8c8 1000 	streq.w	r1, [r8]
 8002e90:	5162      	str	r2, [r4, r5]
 8002e92:	604b      	str	r3, [r1, #4]
 8002e94:	4630      	mov	r0, r6
 8002e96:	f000 f82f 	bl	8002ef8 <__malloc_unlock>
 8002e9a:	f104 000b 	add.w	r0, r4, #11
 8002e9e:	1d23      	adds	r3, r4, #4
 8002ea0:	f020 0007 	bic.w	r0, r0, #7
 8002ea4:	1ac2      	subs	r2, r0, r3
 8002ea6:	bf1c      	itt	ne
 8002ea8:	1a1b      	subne	r3, r3, r0
 8002eaa:	50a3      	strne	r3, [r4, r2]
 8002eac:	e7af      	b.n	8002e0e <_malloc_r+0x22>
 8002eae:	6862      	ldr	r2, [r4, #4]
 8002eb0:	42a3      	cmp	r3, r4
 8002eb2:	bf0c      	ite	eq
 8002eb4:	f8c8 2000 	streq.w	r2, [r8]
 8002eb8:	605a      	strne	r2, [r3, #4]
 8002eba:	e7eb      	b.n	8002e94 <_malloc_r+0xa8>
 8002ebc:	4623      	mov	r3, r4
 8002ebe:	6864      	ldr	r4, [r4, #4]
 8002ec0:	e7ae      	b.n	8002e20 <_malloc_r+0x34>
 8002ec2:	463c      	mov	r4, r7
 8002ec4:	687f      	ldr	r7, [r7, #4]
 8002ec6:	e7b6      	b.n	8002e36 <_malloc_r+0x4a>
 8002ec8:	461a      	mov	r2, r3
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	42a3      	cmp	r3, r4
 8002ece:	d1fb      	bne.n	8002ec8 <_malloc_r+0xdc>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6053      	str	r3, [r2, #4]
 8002ed4:	e7de      	b.n	8002e94 <_malloc_r+0xa8>
 8002ed6:	230c      	movs	r3, #12
 8002ed8:	6033      	str	r3, [r6, #0]
 8002eda:	4630      	mov	r0, r6
 8002edc:	f000 f80c 	bl	8002ef8 <__malloc_unlock>
 8002ee0:	e794      	b.n	8002e0c <_malloc_r+0x20>
 8002ee2:	6005      	str	r5, [r0, #0]
 8002ee4:	e7d6      	b.n	8002e94 <_malloc_r+0xa8>
 8002ee6:	bf00      	nop
 8002ee8:	20000228 	.word	0x20000228

08002eec <__malloc_lock>:
 8002eec:	4801      	ldr	r0, [pc, #4]	@ (8002ef4 <__malloc_lock+0x8>)
 8002eee:	f7ff bf0e 	b.w	8002d0e <__retarget_lock_acquire_recursive>
 8002ef2:	bf00      	nop
 8002ef4:	20000220 	.word	0x20000220

08002ef8 <__malloc_unlock>:
 8002ef8:	4801      	ldr	r0, [pc, #4]	@ (8002f00 <__malloc_unlock+0x8>)
 8002efa:	f7ff bf09 	b.w	8002d10 <__retarget_lock_release_recursive>
 8002efe:	bf00      	nop
 8002f00:	20000220 	.word	0x20000220

08002f04 <__sfputc_r>:
 8002f04:	6893      	ldr	r3, [r2, #8]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	b410      	push	{r4}
 8002f0c:	6093      	str	r3, [r2, #8]
 8002f0e:	da08      	bge.n	8002f22 <__sfputc_r+0x1e>
 8002f10:	6994      	ldr	r4, [r2, #24]
 8002f12:	42a3      	cmp	r3, r4
 8002f14:	db01      	blt.n	8002f1a <__sfputc_r+0x16>
 8002f16:	290a      	cmp	r1, #10
 8002f18:	d103      	bne.n	8002f22 <__sfputc_r+0x1e>
 8002f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f1e:	f7ff bde8 	b.w	8002af2 <__swbuf_r>
 8002f22:	6813      	ldr	r3, [r2, #0]
 8002f24:	1c58      	adds	r0, r3, #1
 8002f26:	6010      	str	r0, [r2, #0]
 8002f28:	7019      	strb	r1, [r3, #0]
 8002f2a:	4608      	mov	r0, r1
 8002f2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <__sfputs_r>:
 8002f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f34:	4606      	mov	r6, r0
 8002f36:	460f      	mov	r7, r1
 8002f38:	4614      	mov	r4, r2
 8002f3a:	18d5      	adds	r5, r2, r3
 8002f3c:	42ac      	cmp	r4, r5
 8002f3e:	d101      	bne.n	8002f44 <__sfputs_r+0x12>
 8002f40:	2000      	movs	r0, #0
 8002f42:	e007      	b.n	8002f54 <__sfputs_r+0x22>
 8002f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f48:	463a      	mov	r2, r7
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	f7ff ffda 	bl	8002f04 <__sfputc_r>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d1f3      	bne.n	8002f3c <__sfputs_r+0xa>
 8002f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f58 <_vfiprintf_r>:
 8002f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f5c:	460d      	mov	r5, r1
 8002f5e:	b09d      	sub	sp, #116	@ 0x74
 8002f60:	4614      	mov	r4, r2
 8002f62:	4698      	mov	r8, r3
 8002f64:	4606      	mov	r6, r0
 8002f66:	b118      	cbz	r0, 8002f70 <_vfiprintf_r+0x18>
 8002f68:	6a03      	ldr	r3, [r0, #32]
 8002f6a:	b90b      	cbnz	r3, 8002f70 <_vfiprintf_r+0x18>
 8002f6c:	f7ff fd36 	bl	80029dc <__sinit>
 8002f70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f72:	07d9      	lsls	r1, r3, #31
 8002f74:	d405      	bmi.n	8002f82 <_vfiprintf_r+0x2a>
 8002f76:	89ab      	ldrh	r3, [r5, #12]
 8002f78:	059a      	lsls	r2, r3, #22
 8002f7a:	d402      	bmi.n	8002f82 <_vfiprintf_r+0x2a>
 8002f7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002f7e:	f7ff fec6 	bl	8002d0e <__retarget_lock_acquire_recursive>
 8002f82:	89ab      	ldrh	r3, [r5, #12]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	d501      	bpl.n	8002f8c <_vfiprintf_r+0x34>
 8002f88:	692b      	ldr	r3, [r5, #16]
 8002f8a:	b99b      	cbnz	r3, 8002fb4 <_vfiprintf_r+0x5c>
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7ff fdee 	bl	8002b70 <__swsetup_r>
 8002f94:	b170      	cbz	r0, 8002fb4 <_vfiprintf_r+0x5c>
 8002f96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002f98:	07dc      	lsls	r4, r3, #31
 8002f9a:	d504      	bpl.n	8002fa6 <_vfiprintf_r+0x4e>
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	b01d      	add	sp, #116	@ 0x74
 8002fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fa6:	89ab      	ldrh	r3, [r5, #12]
 8002fa8:	0598      	lsls	r0, r3, #22
 8002faa:	d4f7      	bmi.n	8002f9c <_vfiprintf_r+0x44>
 8002fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002fae:	f7ff feaf 	bl	8002d10 <__retarget_lock_release_recursive>
 8002fb2:	e7f3      	b.n	8002f9c <_vfiprintf_r+0x44>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fb8:	2320      	movs	r3, #32
 8002fba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fc2:	2330      	movs	r3, #48	@ 0x30
 8002fc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003174 <_vfiprintf_r+0x21c>
 8002fc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002fcc:	f04f 0901 	mov.w	r9, #1
 8002fd0:	4623      	mov	r3, r4
 8002fd2:	469a      	mov	sl, r3
 8002fd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002fd8:	b10a      	cbz	r2, 8002fde <_vfiprintf_r+0x86>
 8002fda:	2a25      	cmp	r2, #37	@ 0x25
 8002fdc:	d1f9      	bne.n	8002fd2 <_vfiprintf_r+0x7a>
 8002fde:	ebba 0b04 	subs.w	fp, sl, r4
 8002fe2:	d00b      	beq.n	8002ffc <_vfiprintf_r+0xa4>
 8002fe4:	465b      	mov	r3, fp
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	4630      	mov	r0, r6
 8002fec:	f7ff ffa1 	bl	8002f32 <__sfputs_r>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	f000 80a7 	beq.w	8003144 <_vfiprintf_r+0x1ec>
 8002ff6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002ff8:	445a      	add	r2, fp
 8002ffa:	9209      	str	r2, [sp, #36]	@ 0x24
 8002ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 809f 	beq.w	8003144 <_vfiprintf_r+0x1ec>
 8003006:	2300      	movs	r3, #0
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003010:	f10a 0a01 	add.w	sl, sl, #1
 8003014:	9304      	str	r3, [sp, #16]
 8003016:	9307      	str	r3, [sp, #28]
 8003018:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800301c:	931a      	str	r3, [sp, #104]	@ 0x68
 800301e:	4654      	mov	r4, sl
 8003020:	2205      	movs	r2, #5
 8003022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003026:	4853      	ldr	r0, [pc, #332]	@ (8003174 <_vfiprintf_r+0x21c>)
 8003028:	f7fd f8fa 	bl	8000220 <memchr>
 800302c:	9a04      	ldr	r2, [sp, #16]
 800302e:	b9d8      	cbnz	r0, 8003068 <_vfiprintf_r+0x110>
 8003030:	06d1      	lsls	r1, r2, #27
 8003032:	bf44      	itt	mi
 8003034:	2320      	movmi	r3, #32
 8003036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800303a:	0713      	lsls	r3, r2, #28
 800303c:	bf44      	itt	mi
 800303e:	232b      	movmi	r3, #43	@ 0x2b
 8003040:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003044:	f89a 3000 	ldrb.w	r3, [sl]
 8003048:	2b2a      	cmp	r3, #42	@ 0x2a
 800304a:	d015      	beq.n	8003078 <_vfiprintf_r+0x120>
 800304c:	9a07      	ldr	r2, [sp, #28]
 800304e:	4654      	mov	r4, sl
 8003050:	2000      	movs	r0, #0
 8003052:	f04f 0c0a 	mov.w	ip, #10
 8003056:	4621      	mov	r1, r4
 8003058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800305c:	3b30      	subs	r3, #48	@ 0x30
 800305e:	2b09      	cmp	r3, #9
 8003060:	d94b      	bls.n	80030fa <_vfiprintf_r+0x1a2>
 8003062:	b1b0      	cbz	r0, 8003092 <_vfiprintf_r+0x13a>
 8003064:	9207      	str	r2, [sp, #28]
 8003066:	e014      	b.n	8003092 <_vfiprintf_r+0x13a>
 8003068:	eba0 0308 	sub.w	r3, r0, r8
 800306c:	fa09 f303 	lsl.w	r3, r9, r3
 8003070:	4313      	orrs	r3, r2
 8003072:	9304      	str	r3, [sp, #16]
 8003074:	46a2      	mov	sl, r4
 8003076:	e7d2      	b.n	800301e <_vfiprintf_r+0xc6>
 8003078:	9b03      	ldr	r3, [sp, #12]
 800307a:	1d19      	adds	r1, r3, #4
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	9103      	str	r1, [sp, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	bfbb      	ittet	lt
 8003084:	425b      	neglt	r3, r3
 8003086:	f042 0202 	orrlt.w	r2, r2, #2
 800308a:	9307      	strge	r3, [sp, #28]
 800308c:	9307      	strlt	r3, [sp, #28]
 800308e:	bfb8      	it	lt
 8003090:	9204      	strlt	r2, [sp, #16]
 8003092:	7823      	ldrb	r3, [r4, #0]
 8003094:	2b2e      	cmp	r3, #46	@ 0x2e
 8003096:	d10a      	bne.n	80030ae <_vfiprintf_r+0x156>
 8003098:	7863      	ldrb	r3, [r4, #1]
 800309a:	2b2a      	cmp	r3, #42	@ 0x2a
 800309c:	d132      	bne.n	8003104 <_vfiprintf_r+0x1ac>
 800309e:	9b03      	ldr	r3, [sp, #12]
 80030a0:	1d1a      	adds	r2, r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	9203      	str	r2, [sp, #12]
 80030a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030aa:	3402      	adds	r4, #2
 80030ac:	9305      	str	r3, [sp, #20]
 80030ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003184 <_vfiprintf_r+0x22c>
 80030b2:	7821      	ldrb	r1, [r4, #0]
 80030b4:	2203      	movs	r2, #3
 80030b6:	4650      	mov	r0, sl
 80030b8:	f7fd f8b2 	bl	8000220 <memchr>
 80030bc:	b138      	cbz	r0, 80030ce <_vfiprintf_r+0x176>
 80030be:	9b04      	ldr	r3, [sp, #16]
 80030c0:	eba0 000a 	sub.w	r0, r0, sl
 80030c4:	2240      	movs	r2, #64	@ 0x40
 80030c6:	4082      	lsls	r2, r0
 80030c8:	4313      	orrs	r3, r2
 80030ca:	3401      	adds	r4, #1
 80030cc:	9304      	str	r3, [sp, #16]
 80030ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030d2:	4829      	ldr	r0, [pc, #164]	@ (8003178 <_vfiprintf_r+0x220>)
 80030d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80030d8:	2206      	movs	r2, #6
 80030da:	f7fd f8a1 	bl	8000220 <memchr>
 80030de:	2800      	cmp	r0, #0
 80030e0:	d03f      	beq.n	8003162 <_vfiprintf_r+0x20a>
 80030e2:	4b26      	ldr	r3, [pc, #152]	@ (800317c <_vfiprintf_r+0x224>)
 80030e4:	bb1b      	cbnz	r3, 800312e <_vfiprintf_r+0x1d6>
 80030e6:	9b03      	ldr	r3, [sp, #12]
 80030e8:	3307      	adds	r3, #7
 80030ea:	f023 0307 	bic.w	r3, r3, #7
 80030ee:	3308      	adds	r3, #8
 80030f0:	9303      	str	r3, [sp, #12]
 80030f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030f4:	443b      	add	r3, r7
 80030f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80030f8:	e76a      	b.n	8002fd0 <_vfiprintf_r+0x78>
 80030fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80030fe:	460c      	mov	r4, r1
 8003100:	2001      	movs	r0, #1
 8003102:	e7a8      	b.n	8003056 <_vfiprintf_r+0xfe>
 8003104:	2300      	movs	r3, #0
 8003106:	3401      	adds	r4, #1
 8003108:	9305      	str	r3, [sp, #20]
 800310a:	4619      	mov	r1, r3
 800310c:	f04f 0c0a 	mov.w	ip, #10
 8003110:	4620      	mov	r0, r4
 8003112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003116:	3a30      	subs	r2, #48	@ 0x30
 8003118:	2a09      	cmp	r2, #9
 800311a:	d903      	bls.n	8003124 <_vfiprintf_r+0x1cc>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0c6      	beq.n	80030ae <_vfiprintf_r+0x156>
 8003120:	9105      	str	r1, [sp, #20]
 8003122:	e7c4      	b.n	80030ae <_vfiprintf_r+0x156>
 8003124:	fb0c 2101 	mla	r1, ip, r1, r2
 8003128:	4604      	mov	r4, r0
 800312a:	2301      	movs	r3, #1
 800312c:	e7f0      	b.n	8003110 <_vfiprintf_r+0x1b8>
 800312e:	ab03      	add	r3, sp, #12
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	462a      	mov	r2, r5
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <_vfiprintf_r+0x228>)
 8003136:	a904      	add	r1, sp, #16
 8003138:	4630      	mov	r0, r6
 800313a:	f3af 8000 	nop.w
 800313e:	4607      	mov	r7, r0
 8003140:	1c78      	adds	r0, r7, #1
 8003142:	d1d6      	bne.n	80030f2 <_vfiprintf_r+0x19a>
 8003144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003146:	07d9      	lsls	r1, r3, #31
 8003148:	d405      	bmi.n	8003156 <_vfiprintf_r+0x1fe>
 800314a:	89ab      	ldrh	r3, [r5, #12]
 800314c:	059a      	lsls	r2, r3, #22
 800314e:	d402      	bmi.n	8003156 <_vfiprintf_r+0x1fe>
 8003150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003152:	f7ff fddd 	bl	8002d10 <__retarget_lock_release_recursive>
 8003156:	89ab      	ldrh	r3, [r5, #12]
 8003158:	065b      	lsls	r3, r3, #25
 800315a:	f53f af1f 	bmi.w	8002f9c <_vfiprintf_r+0x44>
 800315e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003160:	e71e      	b.n	8002fa0 <_vfiprintf_r+0x48>
 8003162:	ab03      	add	r3, sp, #12
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	462a      	mov	r2, r5
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <_vfiprintf_r+0x228>)
 800316a:	a904      	add	r1, sp, #16
 800316c:	4630      	mov	r0, r6
 800316e:	f000 f879 	bl	8003264 <_printf_i>
 8003172:	e7e4      	b.n	800313e <_vfiprintf_r+0x1e6>
 8003174:	080037a8 	.word	0x080037a8
 8003178:	080037b2 	.word	0x080037b2
 800317c:	00000000 	.word	0x00000000
 8003180:	08002f33 	.word	0x08002f33
 8003184:	080037ae 	.word	0x080037ae

08003188 <_printf_common>:
 8003188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800318c:	4616      	mov	r6, r2
 800318e:	4698      	mov	r8, r3
 8003190:	688a      	ldr	r2, [r1, #8]
 8003192:	690b      	ldr	r3, [r1, #16]
 8003194:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003198:	4293      	cmp	r3, r2
 800319a:	bfb8      	it	lt
 800319c:	4613      	movlt	r3, r2
 800319e:	6033      	str	r3, [r6, #0]
 80031a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80031a4:	4607      	mov	r7, r0
 80031a6:	460c      	mov	r4, r1
 80031a8:	b10a      	cbz	r2, 80031ae <_printf_common+0x26>
 80031aa:	3301      	adds	r3, #1
 80031ac:	6033      	str	r3, [r6, #0]
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	0699      	lsls	r1, r3, #26
 80031b2:	bf42      	ittt	mi
 80031b4:	6833      	ldrmi	r3, [r6, #0]
 80031b6:	3302      	addmi	r3, #2
 80031b8:	6033      	strmi	r3, [r6, #0]
 80031ba:	6825      	ldr	r5, [r4, #0]
 80031bc:	f015 0506 	ands.w	r5, r5, #6
 80031c0:	d106      	bne.n	80031d0 <_printf_common+0x48>
 80031c2:	f104 0a19 	add.w	sl, r4, #25
 80031c6:	68e3      	ldr	r3, [r4, #12]
 80031c8:	6832      	ldr	r2, [r6, #0]
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	42ab      	cmp	r3, r5
 80031ce:	dc26      	bgt.n	800321e <_printf_common+0x96>
 80031d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80031d4:	6822      	ldr	r2, [r4, #0]
 80031d6:	3b00      	subs	r3, #0
 80031d8:	bf18      	it	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	0692      	lsls	r2, r2, #26
 80031de:	d42b      	bmi.n	8003238 <_printf_common+0xb0>
 80031e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80031e4:	4641      	mov	r1, r8
 80031e6:	4638      	mov	r0, r7
 80031e8:	47c8      	blx	r9
 80031ea:	3001      	adds	r0, #1
 80031ec:	d01e      	beq.n	800322c <_printf_common+0xa4>
 80031ee:	6823      	ldr	r3, [r4, #0]
 80031f0:	6922      	ldr	r2, [r4, #16]
 80031f2:	f003 0306 	and.w	r3, r3, #6
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	bf02      	ittt	eq
 80031fa:	68e5      	ldreq	r5, [r4, #12]
 80031fc:	6833      	ldreq	r3, [r6, #0]
 80031fe:	1aed      	subeq	r5, r5, r3
 8003200:	68a3      	ldr	r3, [r4, #8]
 8003202:	bf0c      	ite	eq
 8003204:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003208:	2500      	movne	r5, #0
 800320a:	4293      	cmp	r3, r2
 800320c:	bfc4      	itt	gt
 800320e:	1a9b      	subgt	r3, r3, r2
 8003210:	18ed      	addgt	r5, r5, r3
 8003212:	2600      	movs	r6, #0
 8003214:	341a      	adds	r4, #26
 8003216:	42b5      	cmp	r5, r6
 8003218:	d11a      	bne.n	8003250 <_printf_common+0xc8>
 800321a:	2000      	movs	r0, #0
 800321c:	e008      	b.n	8003230 <_printf_common+0xa8>
 800321e:	2301      	movs	r3, #1
 8003220:	4652      	mov	r2, sl
 8003222:	4641      	mov	r1, r8
 8003224:	4638      	mov	r0, r7
 8003226:	47c8      	blx	r9
 8003228:	3001      	adds	r0, #1
 800322a:	d103      	bne.n	8003234 <_printf_common+0xac>
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003234:	3501      	adds	r5, #1
 8003236:	e7c6      	b.n	80031c6 <_printf_common+0x3e>
 8003238:	18e1      	adds	r1, r4, r3
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	2030      	movs	r0, #48	@ 0x30
 800323e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003242:	4422      	add	r2, r4
 8003244:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003248:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800324c:	3302      	adds	r3, #2
 800324e:	e7c7      	b.n	80031e0 <_printf_common+0x58>
 8003250:	2301      	movs	r3, #1
 8003252:	4622      	mov	r2, r4
 8003254:	4641      	mov	r1, r8
 8003256:	4638      	mov	r0, r7
 8003258:	47c8      	blx	r9
 800325a:	3001      	adds	r0, #1
 800325c:	d0e6      	beq.n	800322c <_printf_common+0xa4>
 800325e:	3601      	adds	r6, #1
 8003260:	e7d9      	b.n	8003216 <_printf_common+0x8e>
	...

08003264 <_printf_i>:
 8003264:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	7e0f      	ldrb	r7, [r1, #24]
 800326a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800326c:	2f78      	cmp	r7, #120	@ 0x78
 800326e:	4691      	mov	r9, r2
 8003270:	4680      	mov	r8, r0
 8003272:	460c      	mov	r4, r1
 8003274:	469a      	mov	sl, r3
 8003276:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800327a:	d807      	bhi.n	800328c <_printf_i+0x28>
 800327c:	2f62      	cmp	r7, #98	@ 0x62
 800327e:	d80a      	bhi.n	8003296 <_printf_i+0x32>
 8003280:	2f00      	cmp	r7, #0
 8003282:	f000 80d1 	beq.w	8003428 <_printf_i+0x1c4>
 8003286:	2f58      	cmp	r7, #88	@ 0x58
 8003288:	f000 80b8 	beq.w	80033fc <_printf_i+0x198>
 800328c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003290:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003294:	e03a      	b.n	800330c <_printf_i+0xa8>
 8003296:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800329a:	2b15      	cmp	r3, #21
 800329c:	d8f6      	bhi.n	800328c <_printf_i+0x28>
 800329e:	a101      	add	r1, pc, #4	@ (adr r1, 80032a4 <_printf_i+0x40>)
 80032a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032a4:	080032fd 	.word	0x080032fd
 80032a8:	08003311 	.word	0x08003311
 80032ac:	0800328d 	.word	0x0800328d
 80032b0:	0800328d 	.word	0x0800328d
 80032b4:	0800328d 	.word	0x0800328d
 80032b8:	0800328d 	.word	0x0800328d
 80032bc:	08003311 	.word	0x08003311
 80032c0:	0800328d 	.word	0x0800328d
 80032c4:	0800328d 	.word	0x0800328d
 80032c8:	0800328d 	.word	0x0800328d
 80032cc:	0800328d 	.word	0x0800328d
 80032d0:	0800340f 	.word	0x0800340f
 80032d4:	0800333b 	.word	0x0800333b
 80032d8:	080033c9 	.word	0x080033c9
 80032dc:	0800328d 	.word	0x0800328d
 80032e0:	0800328d 	.word	0x0800328d
 80032e4:	08003431 	.word	0x08003431
 80032e8:	0800328d 	.word	0x0800328d
 80032ec:	0800333b 	.word	0x0800333b
 80032f0:	0800328d 	.word	0x0800328d
 80032f4:	0800328d 	.word	0x0800328d
 80032f8:	080033d1 	.word	0x080033d1
 80032fc:	6833      	ldr	r3, [r6, #0]
 80032fe:	1d1a      	adds	r2, r3, #4
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6032      	str	r2, [r6, #0]
 8003304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003308:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800330c:	2301      	movs	r3, #1
 800330e:	e09c      	b.n	800344a <_printf_i+0x1e6>
 8003310:	6833      	ldr	r3, [r6, #0]
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	1d19      	adds	r1, r3, #4
 8003316:	6031      	str	r1, [r6, #0]
 8003318:	0606      	lsls	r6, r0, #24
 800331a:	d501      	bpl.n	8003320 <_printf_i+0xbc>
 800331c:	681d      	ldr	r5, [r3, #0]
 800331e:	e003      	b.n	8003328 <_printf_i+0xc4>
 8003320:	0645      	lsls	r5, r0, #25
 8003322:	d5fb      	bpl.n	800331c <_printf_i+0xb8>
 8003324:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003328:	2d00      	cmp	r5, #0
 800332a:	da03      	bge.n	8003334 <_printf_i+0xd0>
 800332c:	232d      	movs	r3, #45	@ 0x2d
 800332e:	426d      	negs	r5, r5
 8003330:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003334:	4858      	ldr	r0, [pc, #352]	@ (8003498 <_printf_i+0x234>)
 8003336:	230a      	movs	r3, #10
 8003338:	e011      	b.n	800335e <_printf_i+0xfa>
 800333a:	6821      	ldr	r1, [r4, #0]
 800333c:	6833      	ldr	r3, [r6, #0]
 800333e:	0608      	lsls	r0, r1, #24
 8003340:	f853 5b04 	ldr.w	r5, [r3], #4
 8003344:	d402      	bmi.n	800334c <_printf_i+0xe8>
 8003346:	0649      	lsls	r1, r1, #25
 8003348:	bf48      	it	mi
 800334a:	b2ad      	uxthmi	r5, r5
 800334c:	2f6f      	cmp	r7, #111	@ 0x6f
 800334e:	4852      	ldr	r0, [pc, #328]	@ (8003498 <_printf_i+0x234>)
 8003350:	6033      	str	r3, [r6, #0]
 8003352:	bf14      	ite	ne
 8003354:	230a      	movne	r3, #10
 8003356:	2308      	moveq	r3, #8
 8003358:	2100      	movs	r1, #0
 800335a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800335e:	6866      	ldr	r6, [r4, #4]
 8003360:	60a6      	str	r6, [r4, #8]
 8003362:	2e00      	cmp	r6, #0
 8003364:	db05      	blt.n	8003372 <_printf_i+0x10e>
 8003366:	6821      	ldr	r1, [r4, #0]
 8003368:	432e      	orrs	r6, r5
 800336a:	f021 0104 	bic.w	r1, r1, #4
 800336e:	6021      	str	r1, [r4, #0]
 8003370:	d04b      	beq.n	800340a <_printf_i+0x1a6>
 8003372:	4616      	mov	r6, r2
 8003374:	fbb5 f1f3 	udiv	r1, r5, r3
 8003378:	fb03 5711 	mls	r7, r3, r1, r5
 800337c:	5dc7      	ldrb	r7, [r0, r7]
 800337e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003382:	462f      	mov	r7, r5
 8003384:	42bb      	cmp	r3, r7
 8003386:	460d      	mov	r5, r1
 8003388:	d9f4      	bls.n	8003374 <_printf_i+0x110>
 800338a:	2b08      	cmp	r3, #8
 800338c:	d10b      	bne.n	80033a6 <_printf_i+0x142>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	07df      	lsls	r7, r3, #31
 8003392:	d508      	bpl.n	80033a6 <_printf_i+0x142>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	6861      	ldr	r1, [r4, #4]
 8003398:	4299      	cmp	r1, r3
 800339a:	bfde      	ittt	le
 800339c:	2330      	movle	r3, #48	@ 0x30
 800339e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80033a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80033a6:	1b92      	subs	r2, r2, r6
 80033a8:	6122      	str	r2, [r4, #16]
 80033aa:	f8cd a000 	str.w	sl, [sp]
 80033ae:	464b      	mov	r3, r9
 80033b0:	aa03      	add	r2, sp, #12
 80033b2:	4621      	mov	r1, r4
 80033b4:	4640      	mov	r0, r8
 80033b6:	f7ff fee7 	bl	8003188 <_printf_common>
 80033ba:	3001      	adds	r0, #1
 80033bc:	d14a      	bne.n	8003454 <_printf_i+0x1f0>
 80033be:	f04f 30ff 	mov.w	r0, #4294967295
 80033c2:	b004      	add	sp, #16
 80033c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	f043 0320 	orr.w	r3, r3, #32
 80033ce:	6023      	str	r3, [r4, #0]
 80033d0:	4832      	ldr	r0, [pc, #200]	@ (800349c <_printf_i+0x238>)
 80033d2:	2778      	movs	r7, #120	@ 0x78
 80033d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	6831      	ldr	r1, [r6, #0]
 80033dc:	061f      	lsls	r7, r3, #24
 80033de:	f851 5b04 	ldr.w	r5, [r1], #4
 80033e2:	d402      	bmi.n	80033ea <_printf_i+0x186>
 80033e4:	065f      	lsls	r7, r3, #25
 80033e6:	bf48      	it	mi
 80033e8:	b2ad      	uxthmi	r5, r5
 80033ea:	6031      	str	r1, [r6, #0]
 80033ec:	07d9      	lsls	r1, r3, #31
 80033ee:	bf44      	itt	mi
 80033f0:	f043 0320 	orrmi.w	r3, r3, #32
 80033f4:	6023      	strmi	r3, [r4, #0]
 80033f6:	b11d      	cbz	r5, 8003400 <_printf_i+0x19c>
 80033f8:	2310      	movs	r3, #16
 80033fa:	e7ad      	b.n	8003358 <_printf_i+0xf4>
 80033fc:	4826      	ldr	r0, [pc, #152]	@ (8003498 <_printf_i+0x234>)
 80033fe:	e7e9      	b.n	80033d4 <_printf_i+0x170>
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	f023 0320 	bic.w	r3, r3, #32
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	e7f6      	b.n	80033f8 <_printf_i+0x194>
 800340a:	4616      	mov	r6, r2
 800340c:	e7bd      	b.n	800338a <_printf_i+0x126>
 800340e:	6833      	ldr	r3, [r6, #0]
 8003410:	6825      	ldr	r5, [r4, #0]
 8003412:	6961      	ldr	r1, [r4, #20]
 8003414:	1d18      	adds	r0, r3, #4
 8003416:	6030      	str	r0, [r6, #0]
 8003418:	062e      	lsls	r6, r5, #24
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	d501      	bpl.n	8003422 <_printf_i+0x1be>
 800341e:	6019      	str	r1, [r3, #0]
 8003420:	e002      	b.n	8003428 <_printf_i+0x1c4>
 8003422:	0668      	lsls	r0, r5, #25
 8003424:	d5fb      	bpl.n	800341e <_printf_i+0x1ba>
 8003426:	8019      	strh	r1, [r3, #0]
 8003428:	2300      	movs	r3, #0
 800342a:	6123      	str	r3, [r4, #16]
 800342c:	4616      	mov	r6, r2
 800342e:	e7bc      	b.n	80033aa <_printf_i+0x146>
 8003430:	6833      	ldr	r3, [r6, #0]
 8003432:	1d1a      	adds	r2, r3, #4
 8003434:	6032      	str	r2, [r6, #0]
 8003436:	681e      	ldr	r6, [r3, #0]
 8003438:	6862      	ldr	r2, [r4, #4]
 800343a:	2100      	movs	r1, #0
 800343c:	4630      	mov	r0, r6
 800343e:	f7fc feef 	bl	8000220 <memchr>
 8003442:	b108      	cbz	r0, 8003448 <_printf_i+0x1e4>
 8003444:	1b80      	subs	r0, r0, r6
 8003446:	6060      	str	r0, [r4, #4]
 8003448:	6863      	ldr	r3, [r4, #4]
 800344a:	6123      	str	r3, [r4, #16]
 800344c:	2300      	movs	r3, #0
 800344e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003452:	e7aa      	b.n	80033aa <_printf_i+0x146>
 8003454:	6923      	ldr	r3, [r4, #16]
 8003456:	4632      	mov	r2, r6
 8003458:	4649      	mov	r1, r9
 800345a:	4640      	mov	r0, r8
 800345c:	47d0      	blx	sl
 800345e:	3001      	adds	r0, #1
 8003460:	d0ad      	beq.n	80033be <_printf_i+0x15a>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	079b      	lsls	r3, r3, #30
 8003466:	d413      	bmi.n	8003490 <_printf_i+0x22c>
 8003468:	68e0      	ldr	r0, [r4, #12]
 800346a:	9b03      	ldr	r3, [sp, #12]
 800346c:	4298      	cmp	r0, r3
 800346e:	bfb8      	it	lt
 8003470:	4618      	movlt	r0, r3
 8003472:	e7a6      	b.n	80033c2 <_printf_i+0x15e>
 8003474:	2301      	movs	r3, #1
 8003476:	4632      	mov	r2, r6
 8003478:	4649      	mov	r1, r9
 800347a:	4640      	mov	r0, r8
 800347c:	47d0      	blx	sl
 800347e:	3001      	adds	r0, #1
 8003480:	d09d      	beq.n	80033be <_printf_i+0x15a>
 8003482:	3501      	adds	r5, #1
 8003484:	68e3      	ldr	r3, [r4, #12]
 8003486:	9903      	ldr	r1, [sp, #12]
 8003488:	1a5b      	subs	r3, r3, r1
 800348a:	42ab      	cmp	r3, r5
 800348c:	dcf2      	bgt.n	8003474 <_printf_i+0x210>
 800348e:	e7eb      	b.n	8003468 <_printf_i+0x204>
 8003490:	2500      	movs	r5, #0
 8003492:	f104 0619 	add.w	r6, r4, #25
 8003496:	e7f5      	b.n	8003484 <_printf_i+0x220>
 8003498:	080037b9 	.word	0x080037b9
 800349c:	080037ca 	.word	0x080037ca

080034a0 <__sflush_r>:
 80034a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034a8:	0716      	lsls	r6, r2, #28
 80034aa:	4605      	mov	r5, r0
 80034ac:	460c      	mov	r4, r1
 80034ae:	d454      	bmi.n	800355a <__sflush_r+0xba>
 80034b0:	684b      	ldr	r3, [r1, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	dc02      	bgt.n	80034bc <__sflush_r+0x1c>
 80034b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	dd48      	ble.n	800354e <__sflush_r+0xae>
 80034bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034be:	2e00      	cmp	r6, #0
 80034c0:	d045      	beq.n	800354e <__sflush_r+0xae>
 80034c2:	2300      	movs	r3, #0
 80034c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80034c8:	682f      	ldr	r7, [r5, #0]
 80034ca:	6a21      	ldr	r1, [r4, #32]
 80034cc:	602b      	str	r3, [r5, #0]
 80034ce:	d030      	beq.n	8003532 <__sflush_r+0x92>
 80034d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	0759      	lsls	r1, r3, #29
 80034d6:	d505      	bpl.n	80034e4 <__sflush_r+0x44>
 80034d8:	6863      	ldr	r3, [r4, #4]
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80034de:	b10b      	cbz	r3, 80034e4 <__sflush_r+0x44>
 80034e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034e2:	1ad2      	subs	r2, r2, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80034e8:	6a21      	ldr	r1, [r4, #32]
 80034ea:	4628      	mov	r0, r5
 80034ec:	47b0      	blx	r6
 80034ee:	1c43      	adds	r3, r0, #1
 80034f0:	89a3      	ldrh	r3, [r4, #12]
 80034f2:	d106      	bne.n	8003502 <__sflush_r+0x62>
 80034f4:	6829      	ldr	r1, [r5, #0]
 80034f6:	291d      	cmp	r1, #29
 80034f8:	d82b      	bhi.n	8003552 <__sflush_r+0xb2>
 80034fa:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <__sflush_r+0x104>)
 80034fc:	40ca      	lsrs	r2, r1
 80034fe:	07d6      	lsls	r6, r2, #31
 8003500:	d527      	bpl.n	8003552 <__sflush_r+0xb2>
 8003502:	2200      	movs	r2, #0
 8003504:	6062      	str	r2, [r4, #4]
 8003506:	04d9      	lsls	r1, r3, #19
 8003508:	6922      	ldr	r2, [r4, #16]
 800350a:	6022      	str	r2, [r4, #0]
 800350c:	d504      	bpl.n	8003518 <__sflush_r+0x78>
 800350e:	1c42      	adds	r2, r0, #1
 8003510:	d101      	bne.n	8003516 <__sflush_r+0x76>
 8003512:	682b      	ldr	r3, [r5, #0]
 8003514:	b903      	cbnz	r3, 8003518 <__sflush_r+0x78>
 8003516:	6560      	str	r0, [r4, #84]	@ 0x54
 8003518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800351a:	602f      	str	r7, [r5, #0]
 800351c:	b1b9      	cbz	r1, 800354e <__sflush_r+0xae>
 800351e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003522:	4299      	cmp	r1, r3
 8003524:	d002      	beq.n	800352c <__sflush_r+0x8c>
 8003526:	4628      	mov	r0, r5
 8003528:	f7ff fbf4 	bl	8002d14 <_free_r>
 800352c:	2300      	movs	r3, #0
 800352e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003530:	e00d      	b.n	800354e <__sflush_r+0xae>
 8003532:	2301      	movs	r3, #1
 8003534:	4628      	mov	r0, r5
 8003536:	47b0      	blx	r6
 8003538:	4602      	mov	r2, r0
 800353a:	1c50      	adds	r0, r2, #1
 800353c:	d1c9      	bne.n	80034d2 <__sflush_r+0x32>
 800353e:	682b      	ldr	r3, [r5, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0c6      	beq.n	80034d2 <__sflush_r+0x32>
 8003544:	2b1d      	cmp	r3, #29
 8003546:	d001      	beq.n	800354c <__sflush_r+0xac>
 8003548:	2b16      	cmp	r3, #22
 800354a:	d11e      	bne.n	800358a <__sflush_r+0xea>
 800354c:	602f      	str	r7, [r5, #0]
 800354e:	2000      	movs	r0, #0
 8003550:	e022      	b.n	8003598 <__sflush_r+0xf8>
 8003552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003556:	b21b      	sxth	r3, r3
 8003558:	e01b      	b.n	8003592 <__sflush_r+0xf2>
 800355a:	690f      	ldr	r7, [r1, #16]
 800355c:	2f00      	cmp	r7, #0
 800355e:	d0f6      	beq.n	800354e <__sflush_r+0xae>
 8003560:	0793      	lsls	r3, r2, #30
 8003562:	680e      	ldr	r6, [r1, #0]
 8003564:	bf08      	it	eq
 8003566:	694b      	ldreq	r3, [r1, #20]
 8003568:	600f      	str	r7, [r1, #0]
 800356a:	bf18      	it	ne
 800356c:	2300      	movne	r3, #0
 800356e:	eba6 0807 	sub.w	r8, r6, r7
 8003572:	608b      	str	r3, [r1, #8]
 8003574:	f1b8 0f00 	cmp.w	r8, #0
 8003578:	dde9      	ble.n	800354e <__sflush_r+0xae>
 800357a:	6a21      	ldr	r1, [r4, #32]
 800357c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800357e:	4643      	mov	r3, r8
 8003580:	463a      	mov	r2, r7
 8003582:	4628      	mov	r0, r5
 8003584:	47b0      	blx	r6
 8003586:	2800      	cmp	r0, #0
 8003588:	dc08      	bgt.n	800359c <__sflush_r+0xfc>
 800358a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003592:	81a3      	strh	r3, [r4, #12]
 8003594:	f04f 30ff 	mov.w	r0, #4294967295
 8003598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800359c:	4407      	add	r7, r0
 800359e:	eba8 0800 	sub.w	r8, r8, r0
 80035a2:	e7e7      	b.n	8003574 <__sflush_r+0xd4>
 80035a4:	20400001 	.word	0x20400001

080035a8 <_fflush_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	690b      	ldr	r3, [r1, #16]
 80035ac:	4605      	mov	r5, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	b913      	cbnz	r3, 80035b8 <_fflush_r+0x10>
 80035b2:	2500      	movs	r5, #0
 80035b4:	4628      	mov	r0, r5
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	b118      	cbz	r0, 80035c2 <_fflush_r+0x1a>
 80035ba:	6a03      	ldr	r3, [r0, #32]
 80035bc:	b90b      	cbnz	r3, 80035c2 <_fflush_r+0x1a>
 80035be:	f7ff fa0d 	bl	80029dc <__sinit>
 80035c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f3      	beq.n	80035b2 <_fflush_r+0xa>
 80035ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80035cc:	07d0      	lsls	r0, r2, #31
 80035ce:	d404      	bmi.n	80035da <_fflush_r+0x32>
 80035d0:	0599      	lsls	r1, r3, #22
 80035d2:	d402      	bmi.n	80035da <_fflush_r+0x32>
 80035d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035d6:	f7ff fb9a 	bl	8002d0e <__retarget_lock_acquire_recursive>
 80035da:	4628      	mov	r0, r5
 80035dc:	4621      	mov	r1, r4
 80035de:	f7ff ff5f 	bl	80034a0 <__sflush_r>
 80035e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80035e4:	07da      	lsls	r2, r3, #31
 80035e6:	4605      	mov	r5, r0
 80035e8:	d4e4      	bmi.n	80035b4 <_fflush_r+0xc>
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	059b      	lsls	r3, r3, #22
 80035ee:	d4e1      	bmi.n	80035b4 <_fflush_r+0xc>
 80035f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80035f2:	f7ff fb8d 	bl	8002d10 <__retarget_lock_release_recursive>
 80035f6:	e7dd      	b.n	80035b4 <_fflush_r+0xc>

080035f8 <__swhatbuf_r>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	460c      	mov	r4, r1
 80035fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003600:	2900      	cmp	r1, #0
 8003602:	b096      	sub	sp, #88	@ 0x58
 8003604:	4615      	mov	r5, r2
 8003606:	461e      	mov	r6, r3
 8003608:	da0d      	bge.n	8003626 <__swhatbuf_r+0x2e>
 800360a:	89a3      	ldrh	r3, [r4, #12]
 800360c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003610:	f04f 0100 	mov.w	r1, #0
 8003614:	bf14      	ite	ne
 8003616:	2340      	movne	r3, #64	@ 0x40
 8003618:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800361c:	2000      	movs	r0, #0
 800361e:	6031      	str	r1, [r6, #0]
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	b016      	add	sp, #88	@ 0x58
 8003624:	bd70      	pop	{r4, r5, r6, pc}
 8003626:	466a      	mov	r2, sp
 8003628:	f000 f848 	bl	80036bc <_fstat_r>
 800362c:	2800      	cmp	r0, #0
 800362e:	dbec      	blt.n	800360a <__swhatbuf_r+0x12>
 8003630:	9901      	ldr	r1, [sp, #4]
 8003632:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003636:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800363a:	4259      	negs	r1, r3
 800363c:	4159      	adcs	r1, r3
 800363e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003642:	e7eb      	b.n	800361c <__swhatbuf_r+0x24>

08003644 <__smakebuf_r>:
 8003644:	898b      	ldrh	r3, [r1, #12]
 8003646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003648:	079d      	lsls	r5, r3, #30
 800364a:	4606      	mov	r6, r0
 800364c:	460c      	mov	r4, r1
 800364e:	d507      	bpl.n	8003660 <__smakebuf_r+0x1c>
 8003650:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	6123      	str	r3, [r4, #16]
 8003658:	2301      	movs	r3, #1
 800365a:	6163      	str	r3, [r4, #20]
 800365c:	b003      	add	sp, #12
 800365e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003660:	ab01      	add	r3, sp, #4
 8003662:	466a      	mov	r2, sp
 8003664:	f7ff ffc8 	bl	80035f8 <__swhatbuf_r>
 8003668:	9f00      	ldr	r7, [sp, #0]
 800366a:	4605      	mov	r5, r0
 800366c:	4639      	mov	r1, r7
 800366e:	4630      	mov	r0, r6
 8003670:	f7ff fbbc 	bl	8002dec <_malloc_r>
 8003674:	b948      	cbnz	r0, 800368a <__smakebuf_r+0x46>
 8003676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800367a:	059a      	lsls	r2, r3, #22
 800367c:	d4ee      	bmi.n	800365c <__smakebuf_r+0x18>
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	81a3      	strh	r3, [r4, #12]
 8003688:	e7e2      	b.n	8003650 <__smakebuf_r+0xc>
 800368a:	89a3      	ldrh	r3, [r4, #12]
 800368c:	6020      	str	r0, [r4, #0]
 800368e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003692:	81a3      	strh	r3, [r4, #12]
 8003694:	9b01      	ldr	r3, [sp, #4]
 8003696:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800369a:	b15b      	cbz	r3, 80036b4 <__smakebuf_r+0x70>
 800369c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a0:	4630      	mov	r0, r6
 80036a2:	f000 f81d 	bl	80036e0 <_isatty_r>
 80036a6:	b128      	cbz	r0, 80036b4 <__smakebuf_r+0x70>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	431d      	orrs	r5, r3
 80036b8:	81a5      	strh	r5, [r4, #12]
 80036ba:	e7cf      	b.n	800365c <__smakebuf_r+0x18>

080036bc <_fstat_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d07      	ldr	r5, [pc, #28]	@ (80036dc <_fstat_r+0x20>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	602b      	str	r3, [r5, #0]
 80036ca:	f7fd f8fb 	bl	80008c4 <_fstat>
 80036ce:	1c43      	adds	r3, r0, #1
 80036d0:	d102      	bne.n	80036d8 <_fstat_r+0x1c>
 80036d2:	682b      	ldr	r3, [r5, #0]
 80036d4:	b103      	cbz	r3, 80036d8 <_fstat_r+0x1c>
 80036d6:	6023      	str	r3, [r4, #0]
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	bf00      	nop
 80036dc:	2000021c 	.word	0x2000021c

080036e0 <_isatty_r>:
 80036e0:	b538      	push	{r3, r4, r5, lr}
 80036e2:	4d06      	ldr	r5, [pc, #24]	@ (80036fc <_isatty_r+0x1c>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	4604      	mov	r4, r0
 80036e8:	4608      	mov	r0, r1
 80036ea:	602b      	str	r3, [r5, #0]
 80036ec:	f7fd f8fa 	bl	80008e4 <_isatty>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_isatty_r+0x1a>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_isatty_r+0x1a>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	2000021c 	.word	0x2000021c

08003700 <_sbrk_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4d06      	ldr	r5, [pc, #24]	@ (800371c <_sbrk_r+0x1c>)
 8003704:	2300      	movs	r3, #0
 8003706:	4604      	mov	r4, r0
 8003708:	4608      	mov	r0, r1
 800370a:	602b      	str	r3, [r5, #0]
 800370c:	f7fd f902 	bl	8000914 <_sbrk>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_sbrk_r+0x1a>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_sbrk_r+0x1a>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	2000021c 	.word	0x2000021c

08003720 <_init>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr

0800372c <_fini>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	bf00      	nop
 8003730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003732:	bc08      	pop	{r3}
 8003734:	469e      	mov	lr, r3
 8003736:	4770      	bx	lr
