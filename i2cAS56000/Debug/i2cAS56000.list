
i2cAS56000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003aa4  08003aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003b3c  08003b3c  00004b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b44  08003b44  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b48  08003b48  00004b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003b4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000068  08003bb4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003bb4  0000522c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009cd7  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cee  00000000  00000000  0000ed6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  00010a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c2  00000000  00000000  000114a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8a5  00000000  00000000  00011c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c37e  00000000  00000000  0002f50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b54cc  00000000  00000000  0003b88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f0  00000000  00000000  000f0d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f3e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003a8c 	.word	0x08003a8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08003a8c 	.word	0x08003a8c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002cc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d013      	beq.n	8000300 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002d8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002dc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80002e0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00b      	beq.n	8000300 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002e8:	e000      	b.n	80002ec <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002ec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f9      	beq.n	80002ea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002f6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	b2d2      	uxtb	r2, r2
 80002fe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	b086      	sub	sp, #24
 8000312:	af00      	add	r7, sp, #0
 8000314:	60f8      	str	r0, [r7, #12]
 8000316:	60b9      	str	r1, [r7, #8]
 8000318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]
 800031e:	e009      	b.n	8000334 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60ba      	str	r2, [r7, #8]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ffc9 	bl	80002c0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	dbf1      	blt.n	8000320 <_write+0x12>
  }
  return len;
 800033c:	687b      	ldr	r3, [r7, #4]
}
 800033e:	4618      	mov	r0, r3
 8000340:	3718      	adds	r7, #24
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <read_register.1>:




uint8_t read_register(uint8_t Sensor_register)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b088      	sub	sp, #32
 800034c:	af04      	add	r7, sp, #16
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
 8000352:	f8c7 c000 	str.w	ip, [r7]
	HAL_StatusTypeDef status;
	uint8_t return_value = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1,AS5600_ADDRESS ,Sensor_register, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	b29a      	uxth	r2, r3
 800035e:	2364      	movs	r3, #100	@ 0x64
 8000360:	9302      	str	r3, [sp, #8]
 8000362:	2301      	movs	r3, #1
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	f107 030e 	add.w	r3, r7, #14
 800036a:	9300      	str	r3, [sp, #0]
 800036c:	2301      	movs	r3, #1
 800036e:	216c      	movs	r1, #108	@ 0x6c
 8000370:	480a      	ldr	r0, [pc, #40]	@ (800039c <read_register.1+0x54>)
 8000372:	f000 ff1d 	bl	80011b0 <HAL_I2C_Mem_Read>
 8000376:	4603      	mov	r3, r0
 8000378:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800037a:	200a      	movs	r0, #10
 800037c:	f000 fbdc 	bl	8000b38 <HAL_Delay>
	/* Check the communication status */
	if(status != HAL_OK)
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d004      	beq.n	8000390 <read_register.1+0x48>
	{
		printf("I2C read status error =%#x \n\r",status);
 8000386:	7bfb      	ldrb	r3, [r7, #15]
 8000388:	4619      	mov	r1, r3
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <read_register.1+0x58>)
 800038c:	f002 fc78 	bl	8002c80 <iprintf>
	HAL_BUSY     = 0x02U,
	HAL_TIMEOUT  = 0x03U
				 */
	}

	return return_value;
 8000390:	7bbb      	ldrb	r3, [r7, #14]
};
 8000392:	4618      	mov	r0, r3
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000084 	.word	0x20000084
 80003a0:	08003aa4 	.word	0x08003aa4

080003a4 <main>:
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b08a      	sub	sp, #40	@ 0x28
 80003a8:	af00      	add	r7, sp, #0
int main(void)
 80003aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003ae:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80003b0:	f000 fb51 	bl	8000a56 <HAL_Init>
  SystemClock_Config();
 80003b4:	f000 f8bb 	bl	800052e <SystemClock_Config>
  MX_GPIO_Init();
 80003b8:	f000 f944 	bl	8000644 <MX_GPIO_Init>
  MX_I2C1_Init();
 80003bc:	f000 f902 	bl	80005c4 <MX_I2C1_Init>
  printf("Hello!\r\n");
 80003c0:	4842      	ldr	r0, [pc, #264]	@ (80004cc <main+0x128>)
 80003c2:	f002 fccd 	bl	8002d60 <puts>
  printf("\r\n");
 80003c6:	4842      	ldr	r0, [pc, #264]	@ (80004d0 <main+0x12c>)
 80003c8:	f002 fcca 	bl	8002d60 <puts>
   	printf("Scanning I2C bus:\r\n");
 80003cc:	4841      	ldr	r0, [pc, #260]	@ (80004d4 <main+0x130>)
 80003ce:	f002 fcc7 	bl	8002d60 <puts>
   	for (i=1; i<128; i++)
 80003d2:	2301      	movs	r3, #1
 80003d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80003d8:	e01f      	b.n	800041a <main+0x76>
   	  result = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 2, 2);
 80003da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003de:	b29b      	uxth	r3, r3
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	b299      	uxth	r1, r3
 80003e4:	2302      	movs	r3, #2
 80003e6:	2202      	movs	r2, #2
 80003e8:	483b      	ldr	r0, [pc, #236]	@ (80004d8 <main+0x134>)
 80003ea:	f000 fffb 	bl	80013e4 <HAL_I2C_IsDeviceReady>
 80003ee:	4603      	mov	r3, r0
 80003f0:	72fb      	strb	r3, [r7, #11]
   	  if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <main+0x5a>
   		  printf("."); // No ACK received at that address
 80003f8:	202e      	movs	r0, #46	@ 0x2e
 80003fa:	f002 fc53 	bl	8002ca4 <putchar>
   	  if (result == HAL_OK)
 80003fe:	7afb      	ldrb	r3, [r7, #11]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <main+0x6c>
   		  printf("0x%X", i); // Received an ACK at that address
 8000404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000408:	4619      	mov	r1, r3
 800040a:	4834      	ldr	r0, [pc, #208]	@ (80004dc <main+0x138>)
 800040c:	f002 fc38 	bl	8002c80 <iprintf>
   	for (i=1; i<128; i++)
 8000410:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000414:	3301      	adds	r3, #1
 8000416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800041a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800041e:	2b00      	cmp	r3, #0
 8000420:	dadb      	bge.n	80003da <main+0x36>
   	printf("\r\n");
 8000422:	482b      	ldr	r0, [pc, #172]	@ (80004d0 <main+0x12c>)
 8000424:	f002 fc9c 	bl	8002d60 <puts>
	  return ( highByte << 8 ) | lowByte;
};

#define AS5600_RESOLUTION 4096  // 12-bit resolution

int angle = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	613b      	str	r3, [r7, #16]
int32_t multi_turn_angle = 0;    // final multi-turn angle in "steps"
 800042c:	2300      	movs	r3, #0
 800042e:	623b      	str	r3, [r7, #32]
int16_t previous_angle = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	83fb      	strh	r3, [r7, #30]
int32_t turns = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
int32_t totalAngle = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
	//HAL_Delay(100);

	//printf("RAW ANGLE   = 0x%04X\r\n", readTwo_register(AS5600_REG_RAW_ANGLE_H));
	//HAL_Delay(100);

	angle = readTwo_register(AS5600_REG_RAW_ANGLE_H);
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	469c      	mov	ip, r3
 8000440:	200c      	movs	r0, #12
 8000442:	f000 f84f 	bl	80004e4 <readTwo_register.0>
 8000446:	4603      	mov	r3, r0
 8000448:	613b      	str	r3, [r7, #16]
    int16_t delta = angle - previous_angle;
 800044a:	693b      	ldr	r3, [r7, #16]
 800044c:	b29a      	uxth	r2, r3
 800044e:	8bfb      	ldrh	r3, [r7, #30]
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	b29b      	uxth	r3, r3
 8000454:	82fb      	strh	r3, [r7, #22]

    // Handle wrap-around (crossing 0 or 4095)
    if (delta > (AS5600_RESOLUTION / 2)) {
 8000456:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800045a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800045e:	dd08      	ble.n	8000472 <main+0xce>
        turns--; // rotated backwards over zero
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	3b01      	subs	r3, #1
 8000464:	61bb      	str	r3, [r7, #24]
        delta -= AS5600_RESOLUTION;
 8000466:	8afb      	ldrh	r3, [r7, #22]
 8000468:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800046c:	b29b      	uxth	r3, r3
 800046e:	82fb      	strh	r3, [r7, #22]
 8000470:	e00c      	b.n	800048c <main+0xe8>
    } else if (delta < -(AS5600_RESOLUTION / 2)) {
 8000472:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000476:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 800047a:	da07      	bge.n	800048c <main+0xe8>
        turns++; // rotated forward over zero
 800047c:	69bb      	ldr	r3, [r7, #24]
 800047e:	3301      	adds	r3, #1
 8000480:	61bb      	str	r3, [r7, #24]
        delta += AS5600_RESOLUTION;
 8000482:	8afb      	ldrh	r3, [r7, #22]
 8000484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000488:	b29b      	uxth	r3, r3
 800048a:	82fb      	strh	r3, [r7, #22]
    }

    multi_turn_angle += delta;
 800048c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000490:	6a3a      	ldr	r2, [r7, #32]
 8000492:	4413      	add	r3, r2
 8000494:	623b      	str	r3, [r7, #32]
    previous_angle = angle;
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	83fb      	strh	r3, [r7, #30]

    totalAngle = 360 * turns + ((360 * angle) / AS5600_RESOLUTION);
 800049a:	69bb      	ldr	r3, [r7, #24]
 800049c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80004a0:	fb03 f202 	mul.w	r2, r3, r2
 80004a4:	693b      	ldr	r3, [r7, #16]
 80004a6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80004aa:	fb01 f303 	mul.w	r3, r1, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	da01      	bge.n	80004b6 <main+0x112>
 80004b2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80004b6:	131b      	asrs	r3, r3, #12
 80004b8:	4413      	add	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
    printf("angle: %d\r\n", totalAngle);
 80004bc:	68f9      	ldr	r1, [r7, #12]
 80004be:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <main+0x13c>)
 80004c0:	f002 fbde 	bl	8002c80 <iprintf>
	HAL_Delay(20);
 80004c4:	2014      	movs	r0, #20
 80004c6:	f000 fb37 	bl	8000b38 <HAL_Delay>
  {
 80004ca:	e7b7      	b.n	800043c <main+0x98>
 80004cc:	08003ac4 	.word	0x08003ac4
 80004d0:	08003acc 	.word	0x08003acc
 80004d4:	08003ad0 	.word	0x08003ad0
 80004d8:	20000084 	.word	0x20000084
 80004dc:	08003ae4 	.word	0x08003ae4
 80004e0:	08003aec 	.word	0x08003aec

080004e4 <readTwo_register.0>:
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]
 80004ee:	4664      	mov	r4, ip
 80004f0:	f8c7 c000 	str.w	ip, [r7]
	  int highByte = read_register(Sensor_register );
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	46a4      	mov	ip, r4
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff25 	bl	8000348 <read_register.1>
 80004fe:	4603      	mov	r3, r0
 8000500:	60fb      	str	r3, [r7, #12]
	  int lowByte  = read_register(Sensor_register+1);
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3301      	adds	r3, #1
 8000506:	b2db      	uxtb	r3, r3
 8000508:	46a4      	mov	ip, r4
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff1c 	bl	8000348 <read_register.1>
 8000510:	4603      	mov	r3, r0
 8000512:	60bb      	str	r3, [r7, #8]
	  return ( highByte << 8 ) | lowByte;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	b21b      	sxth	r3, r3
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b21a      	sxth	r2, r3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	b21b      	sxth	r3, r3
 8000520:	4313      	orrs	r3, r2
 8000522:	b21b      	sxth	r3, r3
 8000524:	b29b      	uxth	r3, r3
};
 8000526:	4618      	mov	r0, r3
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	bd90      	pop	{r4, r7, pc}

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b094      	sub	sp, #80	@ 0x50
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	2238      	movs	r2, #56	@ 0x38
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fcef 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000550:	2000      	movs	r0, #0
 8000552:	f001 fb39 	bl	8001bc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800055e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000560:	2340      	movs	r3, #64	@ 0x40
 8000562:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800056c:	2304      	movs	r3, #4
 800056e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000570:	2355      	movs	r3, #85	@ 0x55
 8000572:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000574:	2302      	movs	r3, #2
 8000576:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fbd3 	bl	8001d30 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000590:	f000 f8d0 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2104      	movs	r1, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fed1 	bl	8002354 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b8:	f000 f8bc 	bl	8000734 <Error_Handler>
  }
}
 80005bc:	bf00      	nop
 80005be:	3750      	adds	r7, #80	@ 0x50
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005ca:	4a1c      	ldr	r2, [pc, #112]	@ (800063c <MX_I2C1_Init+0x78>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 80005ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000640 <MX_I2C1_Init+0x7c>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_I2C1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000600:	f000 fd3a 	bl	8001078 <HAL_I2C_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060a:	f000 f893 	bl	8000734 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800060e:	2100      	movs	r1, #0
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000612:	f001 fa41 	bl	8001a98 <HAL_I2CEx_ConfigAnalogFilter>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f88a 	bl	8000734 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000620:	2100      	movs	r1, #0
 8000622:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_I2C1_Init+0x74>)
 8000624:	f001 fa83 	bl	8001b2e <HAL_I2CEx_ConfigDigitalFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800062e:	f000 f881 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000084 	.word	0x20000084
 800063c:	40005400 	.word	0x40005400
 8000640:	40b285c2 	.word	0x40b285c2

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065a:	4b34      	ldr	r3, [pc, #208]	@ (800072c <MX_GPIO_Init+0xe8>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	4a33      	ldr	r2, [pc, #204]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000666:	4b31      	ldr	r3, [pc, #196]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000672:	4b2e      	ldr	r3, [pc, #184]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	4a2d      	ldr	r2, [pc, #180]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000678:	f043 0320 	orr.w	r3, r3, #32
 800067c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800067e:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b28      	ldr	r3, [pc, #160]	@ (800072c <MX_GPIO_Init+0xe8>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	4a27      	ldr	r2, [pc, #156]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <MX_GPIO_Init+0xe8>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_GPIO_Init+0xe8>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a6:	4a21      	ldr	r2, [pc, #132]	@ (800072c <MX_GPIO_Init+0xe8>)
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_GPIO_Init+0xe8>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b2:	f003 0302 	and.w	r3, r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2120      	movs	r1, #32
 80006be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006c2:	f000 fcc1 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	4814      	ldr	r0, [pc, #80]	@ (8000730 <MX_GPIO_Init+0xec>)
 80006de:	f000 fb31 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80006e2:	230c      	movs	r3, #12
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	2300      	movs	r3, #0
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80006f2:	230c      	movs	r3, #12
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000700:	f000 fb20 	bl	8000d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000704:	2320      	movs	r3, #32
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000708:	2301      	movs	r3, #1
 800070a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800071e:	f000 fb11 	bl	8000d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000722:	bf00      	nop
 8000724:	3728      	adds	r7, #40	@ 0x28
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000
 8000730:	48000800 	.word	0x48000800

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <Error_Handler+0x8>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <HAL_MspInit+0x44>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074a:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <HAL_MspInit+0x44>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6613      	str	r3, [r2, #96]	@ 0x60
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <HAL_MspInit+0x44>)
 8000754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x44>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x44>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6593      	str	r3, [r2, #88]	@ 0x58
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x44>)
 800076c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000776:	f001 facb 	bl	8001d10 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000

08000788 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09c      	sub	sp, #112	@ 0x70
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	2244      	movs	r2, #68	@ 0x44
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 fbb9 	bl	8002f20 <memset>
  if(hi2c->Instance==I2C1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000868 <HAL_I2C_MspInit+0xe0>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d153      	bne.n	8000860 <HAL_I2C_MspInit+0xd8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007b8:	2340      	movs	r3, #64	@ 0x40
 80007ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007bc:	2300      	movs	r3, #0
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 ffa9 	bl	800271c <HAL_RCCEx_PeriphCLKConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007d0:	f7ff ffb0 	bl	8000734 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d8:	4a24      	ldr	r2, [pc, #144]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e0:	4b22      	ldr	r3, [pc, #136]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e4:	f003 0301 	and.w	r3, r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ec:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f0:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f8:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 80007fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fc:	f003 0302 	and.w	r3, r3, #2
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000804:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000808:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800080a:	2312      	movs	r3, #18
 800080c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080e:	2301      	movs	r3, #1
 8000810:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000816:	2304      	movs	r3, #4
 8000818:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000824:	f000 fa8e 	bl	8000d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000828:	2380      	movs	r3, #128	@ 0x80
 800082a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800082c:	2312      	movs	r3, #18
 800082e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000838:	2304      	movs	r3, #4
 800083a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000840:	4619      	mov	r1, r3
 8000842:	480b      	ldr	r0, [pc, #44]	@ (8000870 <HAL_I2C_MspInit+0xe8>)
 8000844:	f000 fa7e 	bl	8000d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 800084e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000852:	6593      	str	r3, [r2, #88]	@ 0x58
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_I2C_MspInit+0xe4>)
 8000856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000858:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000860:	bf00      	nop
 8000862:	3770      	adds	r7, #112	@ 0x70
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40005400 	.word	0x40005400
 800086c:	40021000 	.word	0x40021000
 8000870:	48000400 	.word	0x48000400

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 f917 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
 80008e2:	e00a      	b.n	80008fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008e4:	f3af 8000 	nop.w
 80008e8:	4601      	mov	r1, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	b2ca      	uxtb	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	429a      	cmp	r2, r3
 8000900:	dbf0      	blt.n	80008e4 <_read+0x12>
  }

  return len;
 8000902:	687b      	ldr	r3, [r7, #4]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3718      	adds	r7, #24
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <_close>:
  }
  return len;
}

int _close(int file)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000918:	4618      	mov	r0, r3
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000934:	605a      	str	r2, [r3, #4]
  return 0;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <_isatty>:

int _isatty(int file)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800094c:	2301      	movs	r3, #1
}
 800094e:	4618      	mov	r0, r3
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr

0800095a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095a:	b480      	push	{r7}
 800095c:	b085      	sub	sp, #20
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800097c:	4a14      	ldr	r2, [pc, #80]	@ (80009d0 <_sbrk+0x5c>)
 800097e:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <_sbrk+0x60>)
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <_sbrk+0x64>)
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <_sbrk+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d207      	bcs.n	80009b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a4:	f002 fb0a 	bl	8002fbc <__errno>
 80009a8:	4603      	mov	r3, r0
 80009aa:	220c      	movs	r2, #12
 80009ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e009      	b.n	80009c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_sbrk+0x64>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ba:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <_sbrk+0x64>)
 80009c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009c6:	68fb      	ldr	r3, [r7, #12]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20008000 	.word	0x20008000
 80009d4:	00000400 	.word	0x00000400
 80009d8:	200000d8 	.word	0x200000d8
 80009dc:	20000230 	.word	0x20000230

080009e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	@ (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff ffea 	bl	80009e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a0e:	490d      	ldr	r1, [pc, #52]	@ (8000a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a10:	4a0d      	ldr	r2, [pc, #52]	@ (8000a48 <LoopForever+0xe>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a14:	e002      	b.n	8000a1c <LoopCopyDataInit>

08000a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1a:	3304      	adds	r3, #4

08000a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a20:	d3f9      	bcc.n	8000a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a24:	4c0a      	ldr	r4, [pc, #40]	@ (8000a50 <LoopForever+0x16>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a28:	e001      	b.n	8000a2e <LoopFillZerobss>

08000a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a2c:	3204      	adds	r2, #4

08000a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a30:	d3fb      	bcc.n	8000a2a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 fac9 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fcb5 	bl	80003a4 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   r0, =_estack
 8000a3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a48:	08003b4c 	.word	0x08003b4c
  ldr r2, =_sbss
 8000a4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a50:	2000022c 	.word	0x2000022c

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>

08000a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f93d 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f80e 	bl	8000a88 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fe62 	bl	8000740 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_InitTick+0x68>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d022      	beq.n	8000ae2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_InitTick+0x6c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <HAL_InitTick+0x68>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f93a 	bl	8000d2a <HAL_SYSTICK_Config>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10f      	bne.n	8000adc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	d809      	bhi.n	8000ad6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	f000 f914 	bl	8000cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <HAL_InitTick+0x70>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	e007      	b.n	8000ae6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e004      	b.n	8000ae6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e001      	b.n	8000ae6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000008 	.word	0x20000008
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a03      	ldr	r2, [pc, #12]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	200000dc 	.word	0x200000dc
 8000b1c:	20000008 	.word	0x20000008

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000dc 	.word	0x200000dc

08000b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b40:	f7ff ffee 	bl	8000b20 <HAL_GetTick>
 8000b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d004      	beq.n	8000b5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <HAL_Delay+0x40>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b5c:	bf00      	nop
 8000b5e:	f7ff ffdf 	bl	8000b20 <HAL_GetTick>
 8000b62:	4602      	mov	r2, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d8f7      	bhi.n	8000b5e <HAL_Delay+0x26>
  {
  }
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff5e 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff90 	bl	8000c34 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5f 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff ffb2 	bl	8000c9c <SysTick_Config>
 8000d38:	4603      	mov	r3, r0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d52:	e15a      	b.n	800100a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 814c 	beq.w	8001004 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d130      	bne.n	8000de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dba:	2201      	movs	r2, #1
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	091b      	lsrs	r3, r3, #4
 8000dd0:	f003 0201 	and.w	r2, r3, #1
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d017      	beq.n	8000e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	689a      	ldr	r2, [r3, #8]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d123      	bne.n	8000e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	08da      	lsrs	r2, r3, #3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3208      	adds	r2, #8
 8000e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	220f      	movs	r2, #15
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	f003 0307 	and.w	r3, r3, #7
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	08da      	lsrs	r2, r3, #3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3208      	adds	r2, #8
 8000e70:	6939      	ldr	r1, [r7, #16]
 8000e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0203 	and.w	r2, r3, #3
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 80a6 	beq.w	8001004 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <HAL_GPIO_Init+0x2e4>)
 8000eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8001028 <HAL_GPIO_Init+0x2e4>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec4:	4b58      	ldr	r3, [pc, #352]	@ (8001028 <HAL_GPIO_Init+0x2e4>)
 8000ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed0:	4a56      	ldr	r2, [pc, #344]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000efa:	d01f      	beq.n	8000f3c <HAL_GPIO_Init+0x1f8>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4c      	ldr	r2, [pc, #304]	@ (8001030 <HAL_GPIO_Init+0x2ec>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d019      	beq.n	8000f38 <HAL_GPIO_Init+0x1f4>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4b      	ldr	r2, [pc, #300]	@ (8001034 <HAL_GPIO_Init+0x2f0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d013      	beq.n	8000f34 <HAL_GPIO_Init+0x1f0>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8001038 <HAL_GPIO_Init+0x2f4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1ec>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a49      	ldr	r2, [pc, #292]	@ (800103c <HAL_GPIO_Init+0x2f8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1e8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a48      	ldr	r2, [pc, #288]	@ (8001040 <HAL_GPIO_Init+0x2fc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1e4>
 8000f24:	2305      	movs	r3, #5
 8000f26:	e00a      	b.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f28:	2306      	movs	r3, #6
 8000f2a:	e008      	b.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f30:	2303      	movs	r3, #3
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x1fa>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4e:	4937      	ldr	r1, [pc, #220]	@ (800102c <HAL_GPIO_Init+0x2e8>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f5c:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f80:	4a30      	ldr	r2, [pc, #192]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000faa:	4a26      	ldr	r2, [pc, #152]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fb0:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_GPIO_Init+0x300>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	f47f ae9d 	bne.w	8000d54 <HAL_GPIO_Init+0x10>
  }
}
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000800 	.word	0x48000800
 8001038:	48000c00 	.word	0x48000c00
 800103c:	48001000 	.word	0x48001000
 8001040:	48001400 	.word	0x48001400
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
 8001054:	4613      	mov	r3, r2
 8001056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001058:	787b      	ldrb	r3, [r7, #1]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001064:	e002      	b.n	800106c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e08d      	b.n	80011a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d106      	bne.n	80010a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fb72 	bl	8000788 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2224      	movs	r2, #36	@ 0x24
 80010a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	e006      	b.n	8001100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d108      	bne.n	800111a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	e007      	b.n	800112a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001128:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800113c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800114c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69d9      	ldr	r1, [r3, #28]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2220      	movs	r2, #32
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	4608      	mov	r0, r1
 80011ba:	4611      	mov	r1, r2
 80011bc:	461a      	mov	r2, r3
 80011be:	4603      	mov	r3, r0
 80011c0:	817b      	strh	r3, [r7, #10]
 80011c2:	460b      	mov	r3, r1
 80011c4:	813b      	strh	r3, [r7, #8]
 80011c6:	4613      	mov	r3, r2
 80011c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b20      	cmp	r3, #32
 80011d4:	f040 80fd 	bne.w	80013d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d002      	beq.n	80011e4 <HAL_I2C_Mem_Read+0x34>
 80011de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0f1      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_I2C_Mem_Read+0x4e>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e0ea      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001206:	f7ff fc8b 	bl	8000b20 <HAL_GetTick>
 800120a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2319      	movs	r3, #25
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 fa47 	bl	80016ac <I2C_WaitOnFlagUntilTimeout>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d5      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2222      	movs	r2, #34	@ 0x22
 800122c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2240      	movs	r2, #64	@ 0x40
 8001234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6a3a      	ldr	r2, [r7, #32]
 8001242:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001250:	88f8      	ldrh	r0, [r7, #6]
 8001252:	893a      	ldrh	r2, [r7, #8]
 8001254:	8979      	ldrh	r1, [r7, #10]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4603      	mov	r3, r0
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f9ab 	bl	80015bc <I2C_RequestMemoryRead>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e0ad      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800127c:	b29b      	uxth	r3, r3
 800127e:	2bff      	cmp	r3, #255	@ 0xff
 8001280:	d90e      	bls.n	80012a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	22ff      	movs	r2, #255	@ 0xff
 8001286:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800128c:	b2da      	uxtb	r2, r3
 800128e:	8979      	ldrh	r1, [r7, #10]
 8001290:	4b52      	ldr	r3, [pc, #328]	@ (80013dc <HAL_I2C_Mem_Read+0x22c>)
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fbcb 	bl	8001a34 <I2C_TransferConfig>
 800129e:	e00f      	b.n	80012c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	8979      	ldrh	r1, [r7, #10]
 80012b2:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <HAL_I2C_Mem_Read+0x22c>)
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f000 fbba 	bl	8001a34 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	2104      	movs	r1, #4
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	f000 f9ee 	bl	80016ac <I2C_WaitOnFlagUntilTimeout>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e07c      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	b2d2      	uxtb	r2, r2
 80012e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012f6:	3b01      	subs	r3, #1
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001310:	b29b      	uxth	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d034      	beq.n	8001380 <HAL_I2C_Mem_Read+0x1d0>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800131a:	2b00      	cmp	r3, #0
 800131c:	d130      	bne.n	8001380 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001324:	2200      	movs	r2, #0
 8001326:	2180      	movs	r1, #128	@ 0x80
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f9bf 	bl	80016ac <I2C_WaitOnFlagUntilTimeout>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e04d      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800133c:	b29b      	uxth	r3, r3
 800133e:	2bff      	cmp	r3, #255	@ 0xff
 8001340:	d90e      	bls.n	8001360 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	22ff      	movs	r2, #255	@ 0xff
 8001346:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800134c:	b2da      	uxtb	r2, r3
 800134e:	8979      	ldrh	r1, [r7, #10]
 8001350:	2300      	movs	r3, #0
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001358:	68f8      	ldr	r0, [r7, #12]
 800135a:	f000 fb6b 	bl	8001a34 <I2C_TransferConfig>
 800135e:	e00f      	b.n	8001380 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001364:	b29a      	uxth	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800136e:	b2da      	uxtb	r2, r3
 8001370:	8979      	ldrh	r1, [r7, #10]
 8001372:	2300      	movs	r3, #0
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 fb5a 	bl	8001a34 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001384:	b29b      	uxth	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d19a      	bne.n	80012c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fa2c 	bl	80017ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e01a      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2220      	movs	r2, #32
 80013a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6859      	ldr	r1, [r3, #4]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_I2C_Mem_Read+0x230>)
 80013b2:	400b      	ands	r3, r1
 80013b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2220      	movs	r2, #32
 80013ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80013d2:	2302      	movs	r3, #2
  }
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	80002400 	.word	0x80002400
 80013e0:	fe00e800 	.word	0xfe00e800

080013e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	460b      	mov	r3, r1
 80013f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b20      	cmp	r3, #32
 8001402:	f040 80d6 	bne.w	80015b2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001414:	d101      	bne.n	800141a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001416:	2302      	movs	r3, #2
 8001418:	e0cc      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_I2C_IsDeviceReady+0x44>
 8001424:	2302      	movs	r3, #2
 8001426:	e0c5      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d107      	bne.n	8001456 <HAL_I2C_IsDeviceReady+0x72>
 8001446:	897b      	ldrh	r3, [r7, #10]
 8001448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800144c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001450:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001454:	e006      	b.n	8001464 <HAL_I2C_IsDeviceReady+0x80>
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001460:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800146a:	f7ff fb59 	bl	8000b20 <HAL_GetTick>
 800146e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	2b20      	cmp	r3, #32
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0310 	and.w	r3, r3, #16
 8001490:	2b10      	cmp	r3, #16
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800149c:	e034      	b.n	8001508 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d01a      	beq.n	80014dc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014a6:	f7ff fb3b 	bl	8000b20 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d302      	bcc.n	80014bc <HAL_I2C_IsDeviceReady+0xd8>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10f      	bne.n	80014dc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e06b      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0320 	and.w	r3, r3, #32
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <HAL_I2C_IsDeviceReady+0x130>
 800150e:	7fbb      	ldrb	r3, [r7, #30]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0c4      	beq.n	800149e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b10      	cmp	r3, #16
 8001520:	d01a      	beq.n	8001558 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	2120      	movs	r1, #32
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f8bd 	bl	80016ac <I2C_WaitOnFlagUntilTimeout>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e03b      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2220      	movs	r2, #32
 8001542:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e02d      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	2120      	movs	r1, #32
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f8a2 	bl	80016ac <I2C_WaitOnFlagUntilTimeout>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e020      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2210      	movs	r2, #16
 8001578:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2220      	movs	r2, #32
 8001580:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	f63f af56 	bhi.w	800143e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f043 0220 	orr.w	r2, r3, #32
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80015b2:	2302      	movs	r3, #2
  }
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af02      	add	r7, sp, #8
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	817b      	strh	r3, [r7, #10]
 80015ce:	460b      	mov	r3, r1
 80015d0:	813b      	strh	r3, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	8979      	ldrh	r1, [r7, #10]
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <I2C_RequestMemoryRead+0xa4>)
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fa26 	bl	8001a34 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	69b9      	ldr	r1, [r7, #24]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f8b6 	bl	800175e <I2C_WaitOnTXISFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e02c      	b.n	8001656 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d105      	bne.n	800160e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001602:	893b      	ldrh	r3, [r7, #8]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
 800160c:	e015      	b.n	800163a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800160e:	893b      	ldrh	r3, [r7, #8]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	b29b      	uxth	r3, r3
 8001614:	b2da      	uxtb	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f89c 	bl	800175e <I2C_WaitOnTXISFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e012      	b.n	8001656 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001630:	893b      	ldrh	r3, [r7, #8]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2200      	movs	r2, #0
 8001642:	2140      	movs	r1, #64	@ 0x40
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f000 f831 	bl	80016ac <I2C_WaitOnFlagUntilTimeout>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	80002000 	.word	0x80002000

08001664 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b02      	cmp	r3, #2
 8001678:	d103      	bne.n	8001682 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b01      	cmp	r3, #1
 800168e:	d007      	beq.n	80016a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	619a      	str	r2, [r3, #24]
  }
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4613      	mov	r3, r2
 80016ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016bc:	e03b      	b.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	6839      	ldr	r1, [r7, #0]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 f8d6 	bl	8001874 <I2C_IsErrorOccurred>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e041      	b.n	8001756 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d02d      	beq.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016da:	f7ff fa21 	bl	8000b20 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d302      	bcc.n	80016f0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d122      	bne.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699a      	ldr	r2, [r3, #24]
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	4013      	ands	r3, r2
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	429a      	cmp	r2, r3
 800170c:	d113      	bne.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4013      	ands	r3, r2
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	429a      	cmp	r2, r3
 8001752:	d0b4      	beq.n	80016be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800176a:	e033      	b.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f87f 	bl	8001874 <I2C_IsErrorOccurred>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e031      	b.n	80017e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001786:	d025      	beq.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001788:	f7ff f9ca 	bl	8000b20 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d302      	bcc.n	800179e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d11a      	bne.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d013      	beq.n	80017d4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b0:	f043 0220 	orr.w	r2, r3, #32
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2220      	movs	r2, #32
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e007      	b.n	80017e4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d1c4      	bne.n	800176c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f8:	e02f      	b.n	800185a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f838 	bl	8001874 <I2C_IsErrorOccurred>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e02d      	b.n	800186a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180e:	f7ff f987 	bl	8000b20 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	429a      	cmp	r2, r3
 800181c:	d302      	bcc.n	8001824 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d11a      	bne.n	800185a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0320 	and.w	r3, r3, #32
 800182e:	2b20      	cmp	r3, #32
 8001830:	d013      	beq.n	800185a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f043 0220 	orr.w	r2, r3, #32
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2220      	movs	r2, #32
 8001842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e007      	b.n	800186a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	f003 0320 	and.w	r3, r3, #32
 8001864:	2b20      	cmp	r3, #32
 8001866:	d1c8      	bne.n	80017fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	@ 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b00      	cmp	r3, #0
 800189e:	d068      	beq.n	8001972 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2210      	movs	r2, #16
 80018a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018a8:	e049      	b.n	800193e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d045      	beq.n	800193e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018b2:	f7ff f935 	bl	8000b20 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d302      	bcc.n	80018c8 <I2C_IsErrorOccurred+0x54>
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d13a      	bne.n	800193e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018ea:	d121      	bne.n	8001930 <I2C_IsErrorOccurred+0xbc>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018f2:	d01d      	beq.n	8001930 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d01a      	beq.n	8001930 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001908:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800190a:	f7ff f909 	bl	8000b20 <HAL_GetTick>
 800190e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001910:	e00e      	b.n	8001930 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001912:	f7ff f905 	bl	8000b20 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b19      	cmp	r3, #25
 800191e:	d907      	bls.n	8001930 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f043 0320 	orr.w	r3, r3, #32
 8001926:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800192e:	e006      	b.n	800193e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d1e9      	bne.n	8001912 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b20      	cmp	r3, #32
 800194a:	d003      	beq.n	8001954 <I2C_IsErrorOccurred+0xe0>
 800194c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0aa      	beq.n	80018aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001958:	2b00      	cmp	r3, #0
 800195a:	d103      	bne.n	8001964 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2220      	movs	r2, #32
 8001962:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00b      	beq.n	800199c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019a6:	6a3b      	ldr	r3, [r7, #32]
 80019a8:	f043 0308 	orr.w	r3, r3, #8
 80019ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019c8:	6a3b      	ldr	r3, [r7, #32]
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80019e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fe3b 	bl	8001664 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <I2C_IsErrorOccurred+0x1bc>)
 80019fa:	400b      	ands	r3, r1
 80019fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	431a      	orrs	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001a22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3728      	adds	r7, #40	@ 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	fe00e800 	.word	0xfe00e800

08001a34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	460b      	mov	r3, r1
 8001a40:	817b      	strh	r3, [r7, #10]
 8001a42:	4613      	mov	r3, r2
 8001a44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a46:	897b      	ldrh	r3, [r7, #10]
 8001a48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a4c:	7a7b      	ldrb	r3, [r7, #9]
 8001a4e:	041b      	lsls	r3, r3, #16
 8001a50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	0d5b      	lsrs	r3, r3, #21
 8001a6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <I2C_TransferConfig+0x60>)
 8001a74:	430b      	orrs	r3, r1
 8001a76:	43db      	mvns	r3, r3
 8001a78:	ea02 0103 	and.w	r1, r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	03ff63ff 	.word	0x03ff63ff

08001a98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d138      	bne.n	8001b20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e032      	b.n	8001b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2224      	movs	r2, #36	@ 0x24
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f022 0201 	bic.w	r2, r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	6819      	ldr	r1, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e000      	b.n	8001b22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b20:	2302      	movs	r3, #2
  }
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b20      	cmp	r3, #32
 8001b42:	d139      	bne.n	8001bb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e033      	b.n	8001bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2224      	movs	r2, #36	@ 0x24
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	e000      	b.n	8001bba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bb8:	2302      	movs	r3, #2
  }
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d141      	bne.n	8001c5a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bd6:	4b4b      	ldr	r3, [pc, #300]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be2:	d131      	bne.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be4:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bea:	4a46      	ldr	r2, [pc, #280]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bfc:	4a41      	ldr	r2, [pc, #260]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c04:	4b40      	ldr	r3, [pc, #256]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2232      	movs	r2, #50	@ 0x32
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c10:	fba2 2303 	umull	r2, r3, r2, r3
 8001c14:	0c9b      	lsrs	r3, r3, #18
 8001c16:	3301      	adds	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1a:	e002      	b.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c2e:	d102      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f2      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c36:	4b33      	ldr	r3, [pc, #204]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	695b      	ldr	r3, [r3, #20]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c42:	d158      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e057      	b.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c58:	e04d      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c60:	d141      	bne.n	8001ce6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c62:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c6e:	d131      	bne.n	8001cd4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c70:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c76:	4a23      	ldr	r2, [pc, #140]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c80:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c88:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2232      	movs	r2, #50	@ 0x32
 8001c96:	fb02 f303 	mul.w	r3, r2, r3
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca0:	0c9b      	lsrs	r3, r3, #18
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca6:	e002      	b.n	8001cae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cba:	d102      	bne.n	8001cc2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f2      	bne.n	8001ca8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cce:	d112      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e011      	b.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cda:	4a0a      	ldr	r2, [pc, #40]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ce4:	e007      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40007000 	.word	0x40007000
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d14:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a04      	ldr	r2, [pc, #16]	@ (8001d2c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d1e:	6093      	str	r3, [r2, #8]
}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40007000 	.word	0x40007000

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e2fe      	b.n	8002340 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d075      	beq.n	8001e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4e:	4b97      	ldr	r3, [pc, #604]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d58:	4b94      	ldr	r3, [pc, #592]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b0c      	cmp	r3, #12
 8001d66:	d102      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3e>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_OscConfig+0x44>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	4b8d      	ldr	r3, [pc, #564]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x108>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d157      	bne.n	8001e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e2d9      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x74>
 8001d96:	4b85      	ldr	r3, [pc, #532]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a84      	ldr	r2, [pc, #528]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0xb0>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x98>
 8001dae:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b7c      	ldr	r3, [pc, #496]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a7b      	ldr	r2, [pc, #492]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xb0>
 8001dc8:	4b78      	ldr	r3, [pc, #480]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a77      	ldr	r2, [pc, #476]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a74      	ldr	r2, [pc, #464]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7fe fe9a 	bl	8000b20 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7fe fe96 	bl	8000b20 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e29e      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4b6a      	ldr	r3, [pc, #424]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xc0>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe86 	bl	8000b20 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7fe fe82 	bl	8000b20 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e28a      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	4b60      	ldr	r3, [pc, #384]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0xe8>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b56      	ldr	r3, [pc, #344]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x136>
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d002      	beq.n	8001e6c <HAL_RCC_OscConfig+0x13c>
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d11f      	bne.n	8001eac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x154>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e25d      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e84:	4b49      	ldr	r3, [pc, #292]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	061b      	lsls	r3, r3, #24
 8001e92:	4946      	ldr	r1, [pc, #280]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e98:	4b45      	ldr	r3, [pc, #276]	@ (8001fb0 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fdf3 	bl	8000a88 <HAL_InitTick>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d043      	beq.n	8001f30 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e249      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fe2e 	bl	8000b20 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7fe fe2a 	bl	8000b20 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e232      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eda:	4b34      	ldr	r3, [pc, #208]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b31      	ldr	r3, [pc, #196]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	061b      	lsls	r3, r3, #24
 8001ef4:	492d      	ldr	r1, [pc, #180]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	e01a      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efc:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a2a      	ldr	r2, [pc, #168]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe fe0a 	bl	8000b20 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7fe fe06 	bl	8000b20 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e20e      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f22:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1e0>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d041      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d01c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4c:	4a17      	ldr	r2, [pc, #92]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7fe fde3 	bl	8000b20 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5e:	f7fe fddf 	bl	8000b20 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1e7      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0ef      	beq.n	8001f5e <HAL_RCC_OscConfig+0x22e>
 8001f7e:	e020      	b.n	8001fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f90:	f7fe fdc6 	bl	8000b20 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f96:	e00d      	b.n	8001fb4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f98:	f7fe fdc2 	bl	8000b20 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d906      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1ca      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb4:	4b8c      	ldr	r3, [pc, #560]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ea      	bne.n	8001f98 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80a6 	beq.w	800211c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd4:	4b84      	ldr	r3, [pc, #528]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2b4>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x2b6>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00d      	beq.n	8002006 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	4b7f      	ldr	r3, [pc, #508]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a7e      	ldr	r2, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff6:	4b7c      	ldr	r3, [pc, #496]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002002:	2301      	movs	r3, #1
 8002004:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	4b79      	ldr	r3, [pc, #484]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200e:	2b00      	cmp	r3, #0
 8002010:	d118      	bne.n	8002044 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002012:	4b76      	ldr	r3, [pc, #472]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a75      	ldr	r2, [pc, #468]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7fe fd7f 	bl	8000b20 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe fd7b 	bl	8000b20 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e183      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b6c      	ldr	r3, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x4bc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d108      	bne.n	800205e <HAL_RCC_OscConfig+0x32e>
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002052:	4a65      	ldr	r2, [pc, #404]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800205c:	e024      	b.n	80020a8 <HAL_RCC_OscConfig+0x378>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2b05      	cmp	r3, #5
 8002064:	d110      	bne.n	8002088 <HAL_RCC_OscConfig+0x358>
 8002066:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206c:	4a5e      	ldr	r2, [pc, #376]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002076:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	4a5a      	ldr	r2, [pc, #360]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_OscConfig+0x378>
 8002088:	4b57      	ldr	r3, [pc, #348]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a56      	ldr	r2, [pc, #344]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7fe fd36 	bl	8000b20 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe fd32 	bl	8000b20 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e138      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	4b46      	ldr	r3, [pc, #280]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ed      	beq.n	80020b8 <HAL_RCC_OscConfig+0x388>
 80020dc:	e015      	b.n	800210a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe fd1f 	bl	8000b20 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7fe fd1b 	bl	8000b20 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e121      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020fc:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ed      	bne.n	80020e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b00      	cmp	r3, #0
 8002126:	d03c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01c      	beq.n	800216a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002130:	4b2d      	ldr	r3, [pc, #180]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002136:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe fcee 	bl	8000b20 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002148:	f7fe fcea 	bl	8000b20 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e0f2      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800215a:	4b23      	ldr	r3, [pc, #140]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800215c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ef      	beq.n	8002148 <HAL_RCC_OscConfig+0x418>
 8002168:	e01b      	b.n	80021a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800216a:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002170:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217a:	f7fe fcd1 	bl	8000b20 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002182:	f7fe fccd 	bl	8000b20 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0d5      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002194:	4b14      	ldr	r3, [pc, #80]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 8002196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ef      	bne.n	8002182 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80c9 	beq.w	800233e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	f000 8083 	beq.w	80022c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d15e      	bne.n	8002280 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a08      	ldr	r2, [pc, #32]	@ (80021e8 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ce:	f7fe fca7 	bl	8000b20 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d4:	e00c      	b.n	80021f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d6:	f7fe fca3 	bl	8000b20 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d905      	bls.n	80021f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e0ab      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f0:	4b55      	ldr	r3, [pc, #340]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ec      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021fc:	4b52      	ldr	r3, [pc, #328]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4b52      	ldr	r3, [pc, #328]	@ (800234c <HAL_RCC_OscConfig+0x61c>)
 8002202:	4013      	ands	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6a11      	ldr	r1, [r2, #32]
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220c:	3a01      	subs	r2, #1
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	4311      	orrs	r1, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002216:	0212      	lsls	r2, r2, #8
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0552      	lsls	r2, r2, #21
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800222a:	0852      	lsrs	r2, r2, #1
 800222c:	3a01      	subs	r2, #1
 800222e:	0652      	lsls	r2, r2, #25
 8002230:	4311      	orrs	r1, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002236:	06d2      	lsls	r2, r2, #27
 8002238:	430a      	orrs	r2, r1
 800223a:	4943      	ldr	r1, [pc, #268]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 800223c:	4313      	orrs	r3, r2
 800223e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b41      	ldr	r3, [pc, #260]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a40      	ldr	r2, [pc, #256]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800224c:	4b3e      	ldr	r3, [pc, #248]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a3d      	ldr	r2, [pc, #244]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002252:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fc62 	bl	8000b20 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fc5e 	bl	8000b20 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e066      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b35      	ldr	r3, [pc, #212]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x530>
 800227e:	e05e      	b.n	800233e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002280:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 8002286:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fc48 	bl	8000b20 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fc44 	bl	8000b20 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e04c      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a6:	4b28      	ldr	r3, [pc, #160]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	4924      	ldr	r1, [pc, #144]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
 80022be:	e03e      	b.n	800233e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e039      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002348 <HAL_RCC_OscConfig+0x618>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d12c      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	3b01      	subs	r3, #1
 80022ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d123      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11b      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800230c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d113      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d109      	bne.n	800233a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	019f800c 	.word	0x019f800c
 8002350:	feeefffc 	.word	0xfeeefffc

08002354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e11e      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b91      	ldr	r3, [pc, #580]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b8e      	ldr	r3, [pc, #568]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 020f 	bic.w	r2, r3, #15
 8002382:	498c      	ldr	r1, [pc, #560]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b8a      	ldr	r3, [pc, #552]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e106      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d073      	beq.n	8002490 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d129      	bne.n	8002404 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b0:	4b81      	ldr	r3, [pc, #516]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0f4      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023c0:	f000 f966 	bl	8002690 <RCC_GetSysClockFreqFromPLLSource>
 80023c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a7c      	ldr	r2, [pc, #496]	@ (80025bc <HAL_RCC_ClockConfig+0x268>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d93f      	bls.n	800244e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ce:	4b7a      	ldr	r3, [pc, #488]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d009      	beq.n	80023ee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d033      	beq.n	800244e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d12f      	bne.n	800244e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ee:	4b72      	ldr	r3, [pc, #456]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023f6:	4a70      	ldr	r2, [pc, #448]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80023f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e024      	b.n	800244e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b02      	cmp	r3, #2
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240c:	4b6a      	ldr	r3, [pc, #424]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0c6      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b66      	ldr	r3, [pc, #408]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0be      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800242c:	f000 f8ce 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002430:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4a61      	ldr	r2, [pc, #388]	@ (80025bc <HAL_RCC_ClockConfig+0x268>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d909      	bls.n	800244e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800243a:	4b5f      	ldr	r3, [pc, #380]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002442:	4a5d      	ldr	r2, [pc, #372]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002448:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b5a      	ldr	r3, [pc, #360]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4957      	ldr	r1, [pc, #348]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002460:	f7fe fb5e 	bl	8000b20 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fb5a 	bl	8000b20 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e095      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b4e      	ldr	r3, [pc, #312]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d023      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b43      	ldr	r3, [pc, #268]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a42      	ldr	r2, [pc, #264]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024b2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d007      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024c0:	4b3d      	ldr	r3, [pc, #244]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024c8:	4a3b      	ldr	r2, [pc, #236]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b39      	ldr	r3, [pc, #228]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4936      	ldr	r1, [pc, #216]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b80      	cmp	r3, #128	@ 0x80
 80024e8:	d105      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024ea:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4a32      	ldr	r2, [pc, #200]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 80024f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024f4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f6:	4b2f      	ldr	r3, [pc, #188]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d21d      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	4b2b      	ldr	r3, [pc, #172]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 020f 	bic.w	r2, r3, #15
 800250c:	4929      	ldr	r1, [pc, #164]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002514:	f7fe fb04 	bl	8000b20 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fb00 	bl	8000b20 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e03b      	b.n	80025aa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b20      	ldr	r3, [pc, #128]	@ (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d1ed      	bne.n	800251c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b1a      	ldr	r3, [pc, #104]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4917      	ldr	r1, [pc, #92]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490f      	ldr	r1, [pc, #60]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257e:	f000 f825 	bl	80025cc <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_RCC_ClockConfig+0x264>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490c      	ldr	r1, [pc, #48]	@ (80025c0 <HAL_RCC_ClockConfig+0x26c>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	fa22 f303 	lsr.w	r3, r2, r3
 800259a:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_RCC_ClockConfig+0x270>)
 800259c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800259e:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_RCC_ClockConfig+0x274>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fa70 	bl	8000a88 <HAL_InitTick>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	04c4b400 	.word	0x04c4b400
 80025c0:	08003af8 	.word	0x08003af8
 80025c4:	20000000 	.word	0x20000000
 80025c8:	20000004 	.word	0x20000004

080025cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d102      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	e047      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e4:	4b27      	ldr	r3, [pc, #156]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d102      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025f0:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e03e      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025f6:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d136      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800260c:	4b1d      	ldr	r3, [pc, #116]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d10c      	bne.n	800263a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002620:	4a1a      	ldr	r2, [pc, #104]	@ (800268c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262a:	68d2      	ldr	r2, [r2, #12]
 800262c:	0a12      	lsrs	r2, r2, #8
 800262e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
      break;
 8002638:	e00c      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002644:	68d2      	ldr	r2, [r2, #12]
 8002646:	0a12      	lsrs	r2, r2, #8
 8002648:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
      break;
 8002652:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0e5b      	lsrs	r3, r3, #25
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	3301      	adds	r3, #1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e001      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002674:	693b      	ldr	r3, [r7, #16]
}
 8002676:	4618      	mov	r0, r3
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	00f42400 	.word	0x00f42400
 800268c:	016e3600 	.word	0x016e3600

08002690 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002696:	4b1e      	ldr	r3, [pc, #120]	@ (8002710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3301      	adds	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d10c      	bne.n	80026ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b4:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	4a14      	ldr	r2, [pc, #80]	@ (8002710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026be:	68d2      	ldr	r2, [r2, #12]
 80026c0:	0a12      	lsrs	r2, r2, #8
 80026c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	617b      	str	r3, [r7, #20]
    break;
 80026cc:	e00c      	b.n	80026e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	0a12      	lsrs	r2, r2, #8
 80026dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    break;
 80026e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0e5b      	lsrs	r3, r3, #25
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	3301      	adds	r3, #1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002702:	687b      	ldr	r3, [r7, #4]
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40021000 	.word	0x40021000
 8002714:	016e3600 	.word	0x016e3600
 8002718:	00f42400 	.word	0x00f42400

0800271c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002724:	2300      	movs	r3, #0
 8002726:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002728:	2300      	movs	r3, #0
 800272a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 8098 	beq.w	800286a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b40      	ldr	r3, [pc, #256]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	4a3f      	ldr	r2, [pc, #252]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	@ 0x58
 8002756:	4b3d      	ldr	r3, [pc, #244]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002766:	4b3a      	ldr	r3, [pc, #232]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a39      	ldr	r2, [pc, #228]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002772:	f7fe f9d5 	bl	8000b20 <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002778:	e009      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7fe f9d1 	bl	8000b20 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d902      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	74fb      	strb	r3, [r7, #19]
        break;
 800278c:	e005      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800278e:	4b30      	ldr	r3, [pc, #192]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0ef      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d159      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027a0:	4b2a      	ldr	r3, [pc, #168]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01e      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d019      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027bc:	4b23      	ldr	r3, [pc, #140]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c8:	4b20      	ldr	r3, [pc, #128]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	4a1f      	ldr	r2, [pc, #124]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e8:	4a18      	ldr	r2, [pc, #96]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d016      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7fe f991 	bl	8000b20 <HAL_GetTick>
 80027fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002800:	e00b      	b.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f98d 	bl	8000b20 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d902      	bls.n	800281a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	74fb      	strb	r3, [r7, #19]
            break;
 8002818:	e006      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ec      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	4903      	ldr	r1, [pc, #12]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002844:	e008      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	74bb      	strb	r3, [r7, #18]
 800284a:	e005      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002854:	7cfb      	ldrb	r3, [r7, #19]
 8002856:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002858:	7c7b      	ldrb	r3, [r7, #17]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285e:	4ba6      	ldr	r3, [pc, #664]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	4aa5      	ldr	r2, [pc, #660]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002864:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002868:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002876:	4ba0      	ldr	r3, [pc, #640]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287c:	f023 0203 	bic.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	499c      	ldr	r1, [pc, #624]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002898:	4b97      	ldr	r3, [pc, #604]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289e:	f023 020c 	bic.w	r2, r3, #12
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	4994      	ldr	r1, [pc, #592]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028ba:	4b8f      	ldr	r3, [pc, #572]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	498b      	ldr	r1, [pc, #556]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028dc:	4b86      	ldr	r3, [pc, #536]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	4983      	ldr	r1, [pc, #524]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0320 	and.w	r3, r3, #32
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028fe:	4b7e      	ldr	r3, [pc, #504]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	497a      	ldr	r1, [pc, #488]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002920:	4b75      	ldr	r3, [pc, #468]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002926:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	4972      	ldr	r1, [pc, #456]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00a      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002942:	4b6d      	ldr	r3, [pc, #436]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002948:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4969      	ldr	r1, [pc, #420]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00a      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002964:	4b64      	ldr	r3, [pc, #400]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4961      	ldr	r1, [pc, #388]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002986:	4b5c      	ldr	r3, [pc, #368]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	4958      	ldr	r1, [pc, #352]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029a8:	4b53      	ldr	r3, [pc, #332]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	4950      	ldr	r1, [pc, #320]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b4b      	ldr	r3, [pc, #300]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a4a      	ldr	r2, [pc, #296]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e0:	4b45      	ldr	r3, [pc, #276]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ee:	4942      	ldr	r1, [pc, #264]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fe:	d105      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a00:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a3c      	ldr	r2, [pc, #240]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a18:	4b37      	ldr	r3, [pc, #220]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4934      	ldr	r1, [pc, #208]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	4b2f      	ldr	r3, [pc, #188]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d015      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a50:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5e:	4926      	ldr	r1, [pc, #152]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	4a20      	ldr	r2, [pc, #128]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	4918      	ldr	r1, [pc, #96]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b13      	ldr	r3, [pc, #76]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ace:	490a      	ldr	r1, [pc, #40]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ada:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ade:	d105      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002aec:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000

08002afc <std>:
 8002afc:	2300      	movs	r3, #0
 8002afe:	b510      	push	{r4, lr}
 8002b00:	4604      	mov	r4, r0
 8002b02:	e9c0 3300 	strd	r3, r3, [r0]
 8002b06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b0a:	6083      	str	r3, [r0, #8]
 8002b0c:	8181      	strh	r1, [r0, #12]
 8002b0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b10:	81c2      	strh	r2, [r0, #14]
 8002b12:	6183      	str	r3, [r0, #24]
 8002b14:	4619      	mov	r1, r3
 8002b16:	2208      	movs	r2, #8
 8002b18:	305c      	adds	r0, #92	@ 0x5c
 8002b1a:	f000 fa01 	bl	8002f20 <memset>
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <std+0x58>)
 8002b20:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <std+0x5c>)
 8002b24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <std+0x60>)
 8002b28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <std+0x64>)
 8002b2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <std+0x68>)
 8002b30:	6224      	str	r4, [r4, #32]
 8002b32:	429c      	cmp	r4, r3
 8002b34:	d006      	beq.n	8002b44 <std+0x48>
 8002b36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b3a:	4294      	cmp	r4, r2
 8002b3c:	d002      	beq.n	8002b44 <std+0x48>
 8002b3e:	33d0      	adds	r3, #208	@ 0xd0
 8002b40:	429c      	cmp	r4, r3
 8002b42:	d105      	bne.n	8002b50 <std+0x54>
 8002b44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b4c:	f000 ba60 	b.w	8003010 <__retarget_lock_init_recursive>
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	bf00      	nop
 8002b54:	08002d71 	.word	0x08002d71
 8002b58:	08002d93 	.word	0x08002d93
 8002b5c:	08002dcb 	.word	0x08002dcb
 8002b60:	08002def 	.word	0x08002def
 8002b64:	200000e0 	.word	0x200000e0

08002b68 <stdio_exit_handler>:
 8002b68:	4a02      	ldr	r2, [pc, #8]	@ (8002b74 <stdio_exit_handler+0xc>)
 8002b6a:	4903      	ldr	r1, [pc, #12]	@ (8002b78 <stdio_exit_handler+0x10>)
 8002b6c:	4803      	ldr	r0, [pc, #12]	@ (8002b7c <stdio_exit_handler+0x14>)
 8002b6e:	f000 b869 	b.w	8002c44 <_fwalk_sglue>
 8002b72:	bf00      	nop
 8002b74:	2000000c 	.word	0x2000000c
 8002b78:	080038ad 	.word	0x080038ad
 8002b7c:	2000001c 	.word	0x2000001c

08002b80 <cleanup_stdio>:
 8002b80:	6841      	ldr	r1, [r0, #4]
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <cleanup_stdio+0x34>)
 8002b84:	4299      	cmp	r1, r3
 8002b86:	b510      	push	{r4, lr}
 8002b88:	4604      	mov	r4, r0
 8002b8a:	d001      	beq.n	8002b90 <cleanup_stdio+0x10>
 8002b8c:	f000 fe8e 	bl	80038ac <_fflush_r>
 8002b90:	68a1      	ldr	r1, [r4, #8]
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <cleanup_stdio+0x38>)
 8002b94:	4299      	cmp	r1, r3
 8002b96:	d002      	beq.n	8002b9e <cleanup_stdio+0x1e>
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f000 fe87 	bl	80038ac <_fflush_r>
 8002b9e:	68e1      	ldr	r1, [r4, #12]
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <cleanup_stdio+0x3c>)
 8002ba2:	4299      	cmp	r1, r3
 8002ba4:	d004      	beq.n	8002bb0 <cleanup_stdio+0x30>
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bac:	f000 be7e 	b.w	80038ac <_fflush_r>
 8002bb0:	bd10      	pop	{r4, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200000e0 	.word	0x200000e0
 8002bb8:	20000148 	.word	0x20000148
 8002bbc:	200001b0 	.word	0x200001b0

08002bc0 <global_stdio_init.part.0>:
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf0 <global_stdio_init.part.0+0x30>)
 8002bc4:	4c0b      	ldr	r4, [pc, #44]	@ (8002bf4 <global_stdio_init.part.0+0x34>)
 8002bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf8 <global_stdio_init.part.0+0x38>)
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	4620      	mov	r0, r4
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2104      	movs	r1, #4
 8002bd0:	f7ff ff94 	bl	8002afc <std>
 8002bd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002bd8:	2201      	movs	r2, #1
 8002bda:	2109      	movs	r1, #9
 8002bdc:	f7ff ff8e 	bl	8002afc <std>
 8002be0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002be4:	2202      	movs	r2, #2
 8002be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bea:	2112      	movs	r1, #18
 8002bec:	f7ff bf86 	b.w	8002afc <std>
 8002bf0:	20000218 	.word	0x20000218
 8002bf4:	200000e0 	.word	0x200000e0
 8002bf8:	08002b69 	.word	0x08002b69

08002bfc <__sfp_lock_acquire>:
 8002bfc:	4801      	ldr	r0, [pc, #4]	@ (8002c04 <__sfp_lock_acquire+0x8>)
 8002bfe:	f000 ba08 	b.w	8003012 <__retarget_lock_acquire_recursive>
 8002c02:	bf00      	nop
 8002c04:	20000221 	.word	0x20000221

08002c08 <__sfp_lock_release>:
 8002c08:	4801      	ldr	r0, [pc, #4]	@ (8002c10 <__sfp_lock_release+0x8>)
 8002c0a:	f000 ba03 	b.w	8003014 <__retarget_lock_release_recursive>
 8002c0e:	bf00      	nop
 8002c10:	20000221 	.word	0x20000221

08002c14 <__sinit>:
 8002c14:	b510      	push	{r4, lr}
 8002c16:	4604      	mov	r4, r0
 8002c18:	f7ff fff0 	bl	8002bfc <__sfp_lock_acquire>
 8002c1c:	6a23      	ldr	r3, [r4, #32]
 8002c1e:	b11b      	cbz	r3, 8002c28 <__sinit+0x14>
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c24:	f7ff bff0 	b.w	8002c08 <__sfp_lock_release>
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <__sinit+0x28>)
 8002c2a:	6223      	str	r3, [r4, #32]
 8002c2c:	4b04      	ldr	r3, [pc, #16]	@ (8002c40 <__sinit+0x2c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f5      	bne.n	8002c20 <__sinit+0xc>
 8002c34:	f7ff ffc4 	bl	8002bc0 <global_stdio_init.part.0>
 8002c38:	e7f2      	b.n	8002c20 <__sinit+0xc>
 8002c3a:	bf00      	nop
 8002c3c:	08002b81 	.word	0x08002b81
 8002c40:	20000218 	.word	0x20000218

08002c44 <_fwalk_sglue>:
 8002c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c48:	4607      	mov	r7, r0
 8002c4a:	4688      	mov	r8, r1
 8002c4c:	4614      	mov	r4, r2
 8002c4e:	2600      	movs	r6, #0
 8002c50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c54:	f1b9 0901 	subs.w	r9, r9, #1
 8002c58:	d505      	bpl.n	8002c66 <_fwalk_sglue+0x22>
 8002c5a:	6824      	ldr	r4, [r4, #0]
 8002c5c:	2c00      	cmp	r4, #0
 8002c5e:	d1f7      	bne.n	8002c50 <_fwalk_sglue+0xc>
 8002c60:	4630      	mov	r0, r6
 8002c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c66:	89ab      	ldrh	r3, [r5, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d907      	bls.n	8002c7c <_fwalk_sglue+0x38>
 8002c6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c70:	3301      	adds	r3, #1
 8002c72:	d003      	beq.n	8002c7c <_fwalk_sglue+0x38>
 8002c74:	4629      	mov	r1, r5
 8002c76:	4638      	mov	r0, r7
 8002c78:	47c0      	blx	r8
 8002c7a:	4306      	orrs	r6, r0
 8002c7c:	3568      	adds	r5, #104	@ 0x68
 8002c7e:	e7e9      	b.n	8002c54 <_fwalk_sglue+0x10>

08002c80 <iprintf>:
 8002c80:	b40f      	push	{r0, r1, r2, r3}
 8002c82:	b507      	push	{r0, r1, r2, lr}
 8002c84:	4906      	ldr	r1, [pc, #24]	@ (8002ca0 <iprintf+0x20>)
 8002c86:	ab04      	add	r3, sp, #16
 8002c88:	6808      	ldr	r0, [r1, #0]
 8002c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c8e:	6881      	ldr	r1, [r0, #8]
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	f000 fae3 	bl	800325c <_vfiprintf_r>
 8002c96:	b003      	add	sp, #12
 8002c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c9c:	b004      	add	sp, #16
 8002c9e:	4770      	bx	lr
 8002ca0:	20000018 	.word	0x20000018

08002ca4 <putchar>:
 8002ca4:	4b02      	ldr	r3, [pc, #8]	@ (8002cb0 <putchar+0xc>)
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	6882      	ldr	r2, [r0, #8]
 8002cac:	f000 be88 	b.w	80039c0 <_putc_r>
 8002cb0:	20000018 	.word	0x20000018

08002cb4 <_puts_r>:
 8002cb4:	6a03      	ldr	r3, [r0, #32]
 8002cb6:	b570      	push	{r4, r5, r6, lr}
 8002cb8:	6884      	ldr	r4, [r0, #8]
 8002cba:	4605      	mov	r5, r0
 8002cbc:	460e      	mov	r6, r1
 8002cbe:	b90b      	cbnz	r3, 8002cc4 <_puts_r+0x10>
 8002cc0:	f7ff ffa8 	bl	8002c14 <__sinit>
 8002cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cc6:	07db      	lsls	r3, r3, #31
 8002cc8:	d405      	bmi.n	8002cd6 <_puts_r+0x22>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	0598      	lsls	r0, r3, #22
 8002cce:	d402      	bmi.n	8002cd6 <_puts_r+0x22>
 8002cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cd2:	f000 f99e 	bl	8003012 <__retarget_lock_acquire_recursive>
 8002cd6:	89a3      	ldrh	r3, [r4, #12]
 8002cd8:	0719      	lsls	r1, r3, #28
 8002cda:	d502      	bpl.n	8002ce2 <_puts_r+0x2e>
 8002cdc:	6923      	ldr	r3, [r4, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d135      	bne.n	8002d4e <_puts_r+0x9a>
 8002ce2:	4621      	mov	r1, r4
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f000 f8c5 	bl	8002e74 <__swsetup_r>
 8002cea:	b380      	cbz	r0, 8002d4e <_puts_r+0x9a>
 8002cec:	f04f 35ff 	mov.w	r5, #4294967295
 8002cf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002cf2:	07da      	lsls	r2, r3, #31
 8002cf4:	d405      	bmi.n	8002d02 <_puts_r+0x4e>
 8002cf6:	89a3      	ldrh	r3, [r4, #12]
 8002cf8:	059b      	lsls	r3, r3, #22
 8002cfa:	d402      	bmi.n	8002d02 <_puts_r+0x4e>
 8002cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002cfe:	f000 f989 	bl	8003014 <__retarget_lock_release_recursive>
 8002d02:	4628      	mov	r0, r5
 8002d04:	bd70      	pop	{r4, r5, r6, pc}
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	da04      	bge.n	8002d14 <_puts_r+0x60>
 8002d0a:	69a2      	ldr	r2, [r4, #24]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dc17      	bgt.n	8002d40 <_puts_r+0x8c>
 8002d10:	290a      	cmp	r1, #10
 8002d12:	d015      	beq.n	8002d40 <_puts_r+0x8c>
 8002d14:	6823      	ldr	r3, [r4, #0]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	6022      	str	r2, [r4, #0]
 8002d1a:	7019      	strb	r1, [r3, #0]
 8002d1c:	68a3      	ldr	r3, [r4, #8]
 8002d1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60a3      	str	r3, [r4, #8]
 8002d26:	2900      	cmp	r1, #0
 8002d28:	d1ed      	bne.n	8002d06 <_puts_r+0x52>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	da11      	bge.n	8002d52 <_puts_r+0x9e>
 8002d2e:	4622      	mov	r2, r4
 8002d30:	210a      	movs	r1, #10
 8002d32:	4628      	mov	r0, r5
 8002d34:	f000 f85f 	bl	8002df6 <__swbuf_r>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d0d7      	beq.n	8002cec <_puts_r+0x38>
 8002d3c:	250a      	movs	r5, #10
 8002d3e:	e7d7      	b.n	8002cf0 <_puts_r+0x3c>
 8002d40:	4622      	mov	r2, r4
 8002d42:	4628      	mov	r0, r5
 8002d44:	f000 f857 	bl	8002df6 <__swbuf_r>
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d1e7      	bne.n	8002d1c <_puts_r+0x68>
 8002d4c:	e7ce      	b.n	8002cec <_puts_r+0x38>
 8002d4e:	3e01      	subs	r6, #1
 8002d50:	e7e4      	b.n	8002d1c <_puts_r+0x68>
 8002d52:	6823      	ldr	r3, [r4, #0]
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	6022      	str	r2, [r4, #0]
 8002d58:	220a      	movs	r2, #10
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e7ee      	b.n	8002d3c <_puts_r+0x88>
	...

08002d60 <puts>:
 8002d60:	4b02      	ldr	r3, [pc, #8]	@ (8002d6c <puts+0xc>)
 8002d62:	4601      	mov	r1, r0
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	f7ff bfa5 	b.w	8002cb4 <_puts_r>
 8002d6a:	bf00      	nop
 8002d6c:	20000018 	.word	0x20000018

08002d70 <__sread>:
 8002d70:	b510      	push	{r4, lr}
 8002d72:	460c      	mov	r4, r1
 8002d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d78:	f000 f8fc 	bl	8002f74 <_read_r>
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	bfab      	itete	ge
 8002d80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d82:	89a3      	ldrhlt	r3, [r4, #12]
 8002d84:	181b      	addge	r3, r3, r0
 8002d86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d8a:	bfac      	ite	ge
 8002d8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d8e:	81a3      	strhlt	r3, [r4, #12]
 8002d90:	bd10      	pop	{r4, pc}

08002d92 <__swrite>:
 8002d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d96:	461f      	mov	r7, r3
 8002d98:	898b      	ldrh	r3, [r1, #12]
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	4616      	mov	r6, r2
 8002da2:	d505      	bpl.n	8002db0 <__swrite+0x1e>
 8002da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002da8:	2302      	movs	r3, #2
 8002daa:	2200      	movs	r2, #0
 8002dac:	f000 f8d0 	bl	8002f50 <_lseek_r>
 8002db0:	89a3      	ldrh	r3, [r4, #12]
 8002db2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002db6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dba:	81a3      	strh	r3, [r4, #12]
 8002dbc:	4632      	mov	r2, r6
 8002dbe:	463b      	mov	r3, r7
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dc6:	f000 b8e7 	b.w	8002f98 <_write_r>

08002dca <__sseek>:
 8002dca:	b510      	push	{r4, lr}
 8002dcc:	460c      	mov	r4, r1
 8002dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd2:	f000 f8bd 	bl	8002f50 <_lseek_r>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	bf15      	itete	ne
 8002ddc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002dde:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002de2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002de6:	81a3      	strheq	r3, [r4, #12]
 8002de8:	bf18      	it	ne
 8002dea:	81a3      	strhne	r3, [r4, #12]
 8002dec:	bd10      	pop	{r4, pc}

08002dee <__sclose>:
 8002dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002df2:	f000 b89d 	b.w	8002f30 <_close_r>

08002df6 <__swbuf_r>:
 8002df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df8:	460e      	mov	r6, r1
 8002dfa:	4614      	mov	r4, r2
 8002dfc:	4605      	mov	r5, r0
 8002dfe:	b118      	cbz	r0, 8002e08 <__swbuf_r+0x12>
 8002e00:	6a03      	ldr	r3, [r0, #32]
 8002e02:	b90b      	cbnz	r3, 8002e08 <__swbuf_r+0x12>
 8002e04:	f7ff ff06 	bl	8002c14 <__sinit>
 8002e08:	69a3      	ldr	r3, [r4, #24]
 8002e0a:	60a3      	str	r3, [r4, #8]
 8002e0c:	89a3      	ldrh	r3, [r4, #12]
 8002e0e:	071a      	lsls	r2, r3, #28
 8002e10:	d501      	bpl.n	8002e16 <__swbuf_r+0x20>
 8002e12:	6923      	ldr	r3, [r4, #16]
 8002e14:	b943      	cbnz	r3, 8002e28 <__swbuf_r+0x32>
 8002e16:	4621      	mov	r1, r4
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f000 f82b 	bl	8002e74 <__swsetup_r>
 8002e1e:	b118      	cbz	r0, 8002e28 <__swbuf_r+0x32>
 8002e20:	f04f 37ff 	mov.w	r7, #4294967295
 8002e24:	4638      	mov	r0, r7
 8002e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e28:	6823      	ldr	r3, [r4, #0]
 8002e2a:	6922      	ldr	r2, [r4, #16]
 8002e2c:	1a98      	subs	r0, r3, r2
 8002e2e:	6963      	ldr	r3, [r4, #20]
 8002e30:	b2f6      	uxtb	r6, r6
 8002e32:	4283      	cmp	r3, r0
 8002e34:	4637      	mov	r7, r6
 8002e36:	dc05      	bgt.n	8002e44 <__swbuf_r+0x4e>
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 fd36 	bl	80038ac <_fflush_r>
 8002e40:	2800      	cmp	r0, #0
 8002e42:	d1ed      	bne.n	8002e20 <__swbuf_r+0x2a>
 8002e44:	68a3      	ldr	r3, [r4, #8]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	60a3      	str	r3, [r4, #8]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	6022      	str	r2, [r4, #0]
 8002e50:	701e      	strb	r6, [r3, #0]
 8002e52:	6962      	ldr	r2, [r4, #20]
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d004      	beq.n	8002e64 <__swbuf_r+0x6e>
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	07db      	lsls	r3, r3, #31
 8002e5e:	d5e1      	bpl.n	8002e24 <__swbuf_r+0x2e>
 8002e60:	2e0a      	cmp	r6, #10
 8002e62:	d1df      	bne.n	8002e24 <__swbuf_r+0x2e>
 8002e64:	4621      	mov	r1, r4
 8002e66:	4628      	mov	r0, r5
 8002e68:	f000 fd20 	bl	80038ac <_fflush_r>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d0d9      	beq.n	8002e24 <__swbuf_r+0x2e>
 8002e70:	e7d6      	b.n	8002e20 <__swbuf_r+0x2a>
	...

08002e74 <__swsetup_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <__swsetup_r+0xa8>)
 8002e78:	4605      	mov	r5, r0
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	b118      	cbz	r0, 8002e88 <__swsetup_r+0x14>
 8002e80:	6a03      	ldr	r3, [r0, #32]
 8002e82:	b90b      	cbnz	r3, 8002e88 <__swsetup_r+0x14>
 8002e84:	f7ff fec6 	bl	8002c14 <__sinit>
 8002e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e8c:	0719      	lsls	r1, r3, #28
 8002e8e:	d422      	bmi.n	8002ed6 <__swsetup_r+0x62>
 8002e90:	06da      	lsls	r2, r3, #27
 8002e92:	d407      	bmi.n	8002ea4 <__swsetup_r+0x30>
 8002e94:	2209      	movs	r2, #9
 8002e96:	602a      	str	r2, [r5, #0]
 8002e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea2:	e033      	b.n	8002f0c <__swsetup_r+0x98>
 8002ea4:	0758      	lsls	r0, r3, #29
 8002ea6:	d512      	bpl.n	8002ece <__swsetup_r+0x5a>
 8002ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002eaa:	b141      	cbz	r1, 8002ebe <__swsetup_r+0x4a>
 8002eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002eb0:	4299      	cmp	r1, r3
 8002eb2:	d002      	beq.n	8002eba <__swsetup_r+0x46>
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	f000 f8af 	bl	8003018 <_free_r>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ebe:	89a3      	ldrh	r3, [r4, #12]
 8002ec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	6063      	str	r3, [r4, #4]
 8002eca:	6923      	ldr	r3, [r4, #16]
 8002ecc:	6023      	str	r3, [r4, #0]
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	f043 0308 	orr.w	r3, r3, #8
 8002ed4:	81a3      	strh	r3, [r4, #12]
 8002ed6:	6923      	ldr	r3, [r4, #16]
 8002ed8:	b94b      	cbnz	r3, 8002eee <__swsetup_r+0x7a>
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee4:	d003      	beq.n	8002eee <__swsetup_r+0x7a>
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f000 fd2d 	bl	8003948 <__smakebuf_r>
 8002eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ef2:	f013 0201 	ands.w	r2, r3, #1
 8002ef6:	d00a      	beq.n	8002f0e <__swsetup_r+0x9a>
 8002ef8:	2200      	movs	r2, #0
 8002efa:	60a2      	str	r2, [r4, #8]
 8002efc:	6962      	ldr	r2, [r4, #20]
 8002efe:	4252      	negs	r2, r2
 8002f00:	61a2      	str	r2, [r4, #24]
 8002f02:	6922      	ldr	r2, [r4, #16]
 8002f04:	b942      	cbnz	r2, 8002f18 <__swsetup_r+0xa4>
 8002f06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f0a:	d1c5      	bne.n	8002e98 <__swsetup_r+0x24>
 8002f0c:	bd38      	pop	{r3, r4, r5, pc}
 8002f0e:	0799      	lsls	r1, r3, #30
 8002f10:	bf58      	it	pl
 8002f12:	6962      	ldrpl	r2, [r4, #20]
 8002f14:	60a2      	str	r2, [r4, #8]
 8002f16:	e7f4      	b.n	8002f02 <__swsetup_r+0x8e>
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e7f7      	b.n	8002f0c <__swsetup_r+0x98>
 8002f1c:	20000018 	.word	0x20000018

08002f20 <memset>:
 8002f20:	4402      	add	r2, r0
 8002f22:	4603      	mov	r3, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <_close_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	4d06      	ldr	r5, [pc, #24]	@ (8002f4c <_close_r+0x1c>)
 8002f34:	2300      	movs	r3, #0
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	602b      	str	r3, [r5, #0]
 8002f3c:	f7fd fce6 	bl	800090c <_close>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_close_r+0x1a>
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_close_r+0x1a>
 8002f48:	6023      	str	r3, [r4, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	2000021c 	.word	0x2000021c

08002f50 <_lseek_r>:
 8002f50:	b538      	push	{r3, r4, r5, lr}
 8002f52:	4d07      	ldr	r5, [pc, #28]	@ (8002f70 <_lseek_r+0x20>)
 8002f54:	4604      	mov	r4, r0
 8002f56:	4608      	mov	r0, r1
 8002f58:	4611      	mov	r1, r2
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	602a      	str	r2, [r5, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f7fd fcfb 	bl	800095a <_lseek>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_lseek_r+0x1e>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_lseek_r+0x1e>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	2000021c 	.word	0x2000021c

08002f74 <_read_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4d07      	ldr	r5, [pc, #28]	@ (8002f94 <_read_r+0x20>)
 8002f78:	4604      	mov	r4, r0
 8002f7a:	4608      	mov	r0, r1
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	2200      	movs	r2, #0
 8002f80:	602a      	str	r2, [r5, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	f7fd fca5 	bl	80008d2 <_read>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_read_r+0x1e>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_read_r+0x1e>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	2000021c 	.word	0x2000021c

08002f98 <_write_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	4d07      	ldr	r5, [pc, #28]	@ (8002fb8 <_write_r+0x20>)
 8002f9c:	4604      	mov	r4, r0
 8002f9e:	4608      	mov	r0, r1
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	602a      	str	r2, [r5, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f7fd f9b1 	bl	800030e <_write>
 8002fac:	1c43      	adds	r3, r0, #1
 8002fae:	d102      	bne.n	8002fb6 <_write_r+0x1e>
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	b103      	cbz	r3, 8002fb6 <_write_r+0x1e>
 8002fb4:	6023      	str	r3, [r4, #0]
 8002fb6:	bd38      	pop	{r3, r4, r5, pc}
 8002fb8:	2000021c 	.word	0x2000021c

08002fbc <__errno>:
 8002fbc:	4b01      	ldr	r3, [pc, #4]	@ (8002fc4 <__errno+0x8>)
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000018 	.word	0x20000018

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	4d0d      	ldr	r5, [pc, #52]	@ (8003000 <__libc_init_array+0x38>)
 8002fcc:	4c0d      	ldr	r4, [pc, #52]	@ (8003004 <__libc_init_array+0x3c>)
 8002fce:	1b64      	subs	r4, r4, r5
 8002fd0:	10a4      	asrs	r4, r4, #2
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	4d0b      	ldr	r5, [pc, #44]	@ (8003008 <__libc_init_array+0x40>)
 8002fda:	4c0c      	ldr	r4, [pc, #48]	@ (800300c <__libc_init_array+0x44>)
 8002fdc:	f000 fd56 	bl	8003a8c <_init>
 8002fe0:	1b64      	subs	r4, r4, r5
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	2600      	movs	r6, #0
 8002fe6:	42a6      	cmp	r6, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff0:	4798      	blx	r3
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ffa:	4798      	blx	r3
 8002ffc:	3601      	adds	r6, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003b44 	.word	0x08003b44
 8003004:	08003b44 	.word	0x08003b44
 8003008:	08003b44 	.word	0x08003b44
 800300c:	08003b48 	.word	0x08003b48

08003010 <__retarget_lock_init_recursive>:
 8003010:	4770      	bx	lr

08003012 <__retarget_lock_acquire_recursive>:
 8003012:	4770      	bx	lr

08003014 <__retarget_lock_release_recursive>:
 8003014:	4770      	bx	lr
	...

08003018 <_free_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4605      	mov	r5, r0
 800301c:	2900      	cmp	r1, #0
 800301e:	d041      	beq.n	80030a4 <_free_r+0x8c>
 8003020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003024:	1f0c      	subs	r4, r1, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	bfb8      	it	lt
 800302a:	18e4      	addlt	r4, r4, r3
 800302c:	f000 f8e0 	bl	80031f0 <__malloc_lock>
 8003030:	4a1d      	ldr	r2, [pc, #116]	@ (80030a8 <_free_r+0x90>)
 8003032:	6813      	ldr	r3, [r2, #0]
 8003034:	b933      	cbnz	r3, 8003044 <_free_r+0x2c>
 8003036:	6063      	str	r3, [r4, #4]
 8003038:	6014      	str	r4, [r2, #0]
 800303a:	4628      	mov	r0, r5
 800303c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003040:	f000 b8dc 	b.w	80031fc <__malloc_unlock>
 8003044:	42a3      	cmp	r3, r4
 8003046:	d908      	bls.n	800305a <_free_r+0x42>
 8003048:	6820      	ldr	r0, [r4, #0]
 800304a:	1821      	adds	r1, r4, r0
 800304c:	428b      	cmp	r3, r1
 800304e:	bf01      	itttt	eq
 8003050:	6819      	ldreq	r1, [r3, #0]
 8003052:	685b      	ldreq	r3, [r3, #4]
 8003054:	1809      	addeq	r1, r1, r0
 8003056:	6021      	streq	r1, [r4, #0]
 8003058:	e7ed      	b.n	8003036 <_free_r+0x1e>
 800305a:	461a      	mov	r2, r3
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	b10b      	cbz	r3, 8003064 <_free_r+0x4c>
 8003060:	42a3      	cmp	r3, r4
 8003062:	d9fa      	bls.n	800305a <_free_r+0x42>
 8003064:	6811      	ldr	r1, [r2, #0]
 8003066:	1850      	adds	r0, r2, r1
 8003068:	42a0      	cmp	r0, r4
 800306a:	d10b      	bne.n	8003084 <_free_r+0x6c>
 800306c:	6820      	ldr	r0, [r4, #0]
 800306e:	4401      	add	r1, r0
 8003070:	1850      	adds	r0, r2, r1
 8003072:	4283      	cmp	r3, r0
 8003074:	6011      	str	r1, [r2, #0]
 8003076:	d1e0      	bne.n	800303a <_free_r+0x22>
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	6053      	str	r3, [r2, #4]
 800307e:	4408      	add	r0, r1
 8003080:	6010      	str	r0, [r2, #0]
 8003082:	e7da      	b.n	800303a <_free_r+0x22>
 8003084:	d902      	bls.n	800308c <_free_r+0x74>
 8003086:	230c      	movs	r3, #12
 8003088:	602b      	str	r3, [r5, #0]
 800308a:	e7d6      	b.n	800303a <_free_r+0x22>
 800308c:	6820      	ldr	r0, [r4, #0]
 800308e:	1821      	adds	r1, r4, r0
 8003090:	428b      	cmp	r3, r1
 8003092:	bf04      	itt	eq
 8003094:	6819      	ldreq	r1, [r3, #0]
 8003096:	685b      	ldreq	r3, [r3, #4]
 8003098:	6063      	str	r3, [r4, #4]
 800309a:	bf04      	itt	eq
 800309c:	1809      	addeq	r1, r1, r0
 800309e:	6021      	streq	r1, [r4, #0]
 80030a0:	6054      	str	r4, [r2, #4]
 80030a2:	e7ca      	b.n	800303a <_free_r+0x22>
 80030a4:	bd38      	pop	{r3, r4, r5, pc}
 80030a6:	bf00      	nop
 80030a8:	20000228 	.word	0x20000228

080030ac <sbrk_aligned>:
 80030ac:	b570      	push	{r4, r5, r6, lr}
 80030ae:	4e0f      	ldr	r6, [pc, #60]	@ (80030ec <sbrk_aligned+0x40>)
 80030b0:	460c      	mov	r4, r1
 80030b2:	6831      	ldr	r1, [r6, #0]
 80030b4:	4605      	mov	r5, r0
 80030b6:	b911      	cbnz	r1, 80030be <sbrk_aligned+0x12>
 80030b8:	f000 fcd8 	bl	8003a6c <_sbrk_r>
 80030bc:	6030      	str	r0, [r6, #0]
 80030be:	4621      	mov	r1, r4
 80030c0:	4628      	mov	r0, r5
 80030c2:	f000 fcd3 	bl	8003a6c <_sbrk_r>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	d103      	bne.n	80030d2 <sbrk_aligned+0x26>
 80030ca:	f04f 34ff 	mov.w	r4, #4294967295
 80030ce:	4620      	mov	r0, r4
 80030d0:	bd70      	pop	{r4, r5, r6, pc}
 80030d2:	1cc4      	adds	r4, r0, #3
 80030d4:	f024 0403 	bic.w	r4, r4, #3
 80030d8:	42a0      	cmp	r0, r4
 80030da:	d0f8      	beq.n	80030ce <sbrk_aligned+0x22>
 80030dc:	1a21      	subs	r1, r4, r0
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 fcc4 	bl	8003a6c <_sbrk_r>
 80030e4:	3001      	adds	r0, #1
 80030e6:	d1f2      	bne.n	80030ce <sbrk_aligned+0x22>
 80030e8:	e7ef      	b.n	80030ca <sbrk_aligned+0x1e>
 80030ea:	bf00      	nop
 80030ec:	20000224 	.word	0x20000224

080030f0 <_malloc_r>:
 80030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030f4:	1ccd      	adds	r5, r1, #3
 80030f6:	f025 0503 	bic.w	r5, r5, #3
 80030fa:	3508      	adds	r5, #8
 80030fc:	2d0c      	cmp	r5, #12
 80030fe:	bf38      	it	cc
 8003100:	250c      	movcc	r5, #12
 8003102:	2d00      	cmp	r5, #0
 8003104:	4606      	mov	r6, r0
 8003106:	db01      	blt.n	800310c <_malloc_r+0x1c>
 8003108:	42a9      	cmp	r1, r5
 800310a:	d904      	bls.n	8003116 <_malloc_r+0x26>
 800310c:	230c      	movs	r3, #12
 800310e:	6033      	str	r3, [r6, #0]
 8003110:	2000      	movs	r0, #0
 8003112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031ec <_malloc_r+0xfc>
 800311a:	f000 f869 	bl	80031f0 <__malloc_lock>
 800311e:	f8d8 3000 	ldr.w	r3, [r8]
 8003122:	461c      	mov	r4, r3
 8003124:	bb44      	cbnz	r4, 8003178 <_malloc_r+0x88>
 8003126:	4629      	mov	r1, r5
 8003128:	4630      	mov	r0, r6
 800312a:	f7ff ffbf 	bl	80030ac <sbrk_aligned>
 800312e:	1c43      	adds	r3, r0, #1
 8003130:	4604      	mov	r4, r0
 8003132:	d158      	bne.n	80031e6 <_malloc_r+0xf6>
 8003134:	f8d8 4000 	ldr.w	r4, [r8]
 8003138:	4627      	mov	r7, r4
 800313a:	2f00      	cmp	r7, #0
 800313c:	d143      	bne.n	80031c6 <_malloc_r+0xd6>
 800313e:	2c00      	cmp	r4, #0
 8003140:	d04b      	beq.n	80031da <_malloc_r+0xea>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	4639      	mov	r1, r7
 8003146:	4630      	mov	r0, r6
 8003148:	eb04 0903 	add.w	r9, r4, r3
 800314c:	f000 fc8e 	bl	8003a6c <_sbrk_r>
 8003150:	4581      	cmp	r9, r0
 8003152:	d142      	bne.n	80031da <_malloc_r+0xea>
 8003154:	6821      	ldr	r1, [r4, #0]
 8003156:	1a6d      	subs	r5, r5, r1
 8003158:	4629      	mov	r1, r5
 800315a:	4630      	mov	r0, r6
 800315c:	f7ff ffa6 	bl	80030ac <sbrk_aligned>
 8003160:	3001      	adds	r0, #1
 8003162:	d03a      	beq.n	80031da <_malloc_r+0xea>
 8003164:	6823      	ldr	r3, [r4, #0]
 8003166:	442b      	add	r3, r5
 8003168:	6023      	str	r3, [r4, #0]
 800316a:	f8d8 3000 	ldr.w	r3, [r8]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	bb62      	cbnz	r2, 80031cc <_malloc_r+0xdc>
 8003172:	f8c8 7000 	str.w	r7, [r8]
 8003176:	e00f      	b.n	8003198 <_malloc_r+0xa8>
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	1b52      	subs	r2, r2, r5
 800317c:	d420      	bmi.n	80031c0 <_malloc_r+0xd0>
 800317e:	2a0b      	cmp	r2, #11
 8003180:	d917      	bls.n	80031b2 <_malloc_r+0xc2>
 8003182:	1961      	adds	r1, r4, r5
 8003184:	42a3      	cmp	r3, r4
 8003186:	6025      	str	r5, [r4, #0]
 8003188:	bf18      	it	ne
 800318a:	6059      	strne	r1, [r3, #4]
 800318c:	6863      	ldr	r3, [r4, #4]
 800318e:	bf08      	it	eq
 8003190:	f8c8 1000 	streq.w	r1, [r8]
 8003194:	5162      	str	r2, [r4, r5]
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	4630      	mov	r0, r6
 800319a:	f000 f82f 	bl	80031fc <__malloc_unlock>
 800319e:	f104 000b 	add.w	r0, r4, #11
 80031a2:	1d23      	adds	r3, r4, #4
 80031a4:	f020 0007 	bic.w	r0, r0, #7
 80031a8:	1ac2      	subs	r2, r0, r3
 80031aa:	bf1c      	itt	ne
 80031ac:	1a1b      	subne	r3, r3, r0
 80031ae:	50a3      	strne	r3, [r4, r2]
 80031b0:	e7af      	b.n	8003112 <_malloc_r+0x22>
 80031b2:	6862      	ldr	r2, [r4, #4]
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	bf0c      	ite	eq
 80031b8:	f8c8 2000 	streq.w	r2, [r8]
 80031bc:	605a      	strne	r2, [r3, #4]
 80031be:	e7eb      	b.n	8003198 <_malloc_r+0xa8>
 80031c0:	4623      	mov	r3, r4
 80031c2:	6864      	ldr	r4, [r4, #4]
 80031c4:	e7ae      	b.n	8003124 <_malloc_r+0x34>
 80031c6:	463c      	mov	r4, r7
 80031c8:	687f      	ldr	r7, [r7, #4]
 80031ca:	e7b6      	b.n	800313a <_malloc_r+0x4a>
 80031cc:	461a      	mov	r2, r3
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	42a3      	cmp	r3, r4
 80031d2:	d1fb      	bne.n	80031cc <_malloc_r+0xdc>
 80031d4:	2300      	movs	r3, #0
 80031d6:	6053      	str	r3, [r2, #4]
 80031d8:	e7de      	b.n	8003198 <_malloc_r+0xa8>
 80031da:	230c      	movs	r3, #12
 80031dc:	6033      	str	r3, [r6, #0]
 80031de:	4630      	mov	r0, r6
 80031e0:	f000 f80c 	bl	80031fc <__malloc_unlock>
 80031e4:	e794      	b.n	8003110 <_malloc_r+0x20>
 80031e6:	6005      	str	r5, [r0, #0]
 80031e8:	e7d6      	b.n	8003198 <_malloc_r+0xa8>
 80031ea:	bf00      	nop
 80031ec:	20000228 	.word	0x20000228

080031f0 <__malloc_lock>:
 80031f0:	4801      	ldr	r0, [pc, #4]	@ (80031f8 <__malloc_lock+0x8>)
 80031f2:	f7ff bf0e 	b.w	8003012 <__retarget_lock_acquire_recursive>
 80031f6:	bf00      	nop
 80031f8:	20000220 	.word	0x20000220

080031fc <__malloc_unlock>:
 80031fc:	4801      	ldr	r0, [pc, #4]	@ (8003204 <__malloc_unlock+0x8>)
 80031fe:	f7ff bf09 	b.w	8003014 <__retarget_lock_release_recursive>
 8003202:	bf00      	nop
 8003204:	20000220 	.word	0x20000220

08003208 <__sfputc_r>:
 8003208:	6893      	ldr	r3, [r2, #8]
 800320a:	3b01      	subs	r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	b410      	push	{r4}
 8003210:	6093      	str	r3, [r2, #8]
 8003212:	da08      	bge.n	8003226 <__sfputc_r+0x1e>
 8003214:	6994      	ldr	r4, [r2, #24]
 8003216:	42a3      	cmp	r3, r4
 8003218:	db01      	blt.n	800321e <__sfputc_r+0x16>
 800321a:	290a      	cmp	r1, #10
 800321c:	d103      	bne.n	8003226 <__sfputc_r+0x1e>
 800321e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003222:	f7ff bde8 	b.w	8002df6 <__swbuf_r>
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	1c58      	adds	r0, r3, #1
 800322a:	6010      	str	r0, [r2, #0]
 800322c:	7019      	strb	r1, [r3, #0]
 800322e:	4608      	mov	r0, r1
 8003230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003234:	4770      	bx	lr

08003236 <__sfputs_r>:
 8003236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003238:	4606      	mov	r6, r0
 800323a:	460f      	mov	r7, r1
 800323c:	4614      	mov	r4, r2
 800323e:	18d5      	adds	r5, r2, r3
 8003240:	42ac      	cmp	r4, r5
 8003242:	d101      	bne.n	8003248 <__sfputs_r+0x12>
 8003244:	2000      	movs	r0, #0
 8003246:	e007      	b.n	8003258 <__sfputs_r+0x22>
 8003248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800324c:	463a      	mov	r2, r7
 800324e:	4630      	mov	r0, r6
 8003250:	f7ff ffda 	bl	8003208 <__sfputc_r>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d1f3      	bne.n	8003240 <__sfputs_r+0xa>
 8003258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800325c <_vfiprintf_r>:
 800325c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003260:	460d      	mov	r5, r1
 8003262:	b09d      	sub	sp, #116	@ 0x74
 8003264:	4614      	mov	r4, r2
 8003266:	4698      	mov	r8, r3
 8003268:	4606      	mov	r6, r0
 800326a:	b118      	cbz	r0, 8003274 <_vfiprintf_r+0x18>
 800326c:	6a03      	ldr	r3, [r0, #32]
 800326e:	b90b      	cbnz	r3, 8003274 <_vfiprintf_r+0x18>
 8003270:	f7ff fcd0 	bl	8002c14 <__sinit>
 8003274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003276:	07d9      	lsls	r1, r3, #31
 8003278:	d405      	bmi.n	8003286 <_vfiprintf_r+0x2a>
 800327a:	89ab      	ldrh	r3, [r5, #12]
 800327c:	059a      	lsls	r2, r3, #22
 800327e:	d402      	bmi.n	8003286 <_vfiprintf_r+0x2a>
 8003280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003282:	f7ff fec6 	bl	8003012 <__retarget_lock_acquire_recursive>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	071b      	lsls	r3, r3, #28
 800328a:	d501      	bpl.n	8003290 <_vfiprintf_r+0x34>
 800328c:	692b      	ldr	r3, [r5, #16]
 800328e:	b99b      	cbnz	r3, 80032b8 <_vfiprintf_r+0x5c>
 8003290:	4629      	mov	r1, r5
 8003292:	4630      	mov	r0, r6
 8003294:	f7ff fdee 	bl	8002e74 <__swsetup_r>
 8003298:	b170      	cbz	r0, 80032b8 <_vfiprintf_r+0x5c>
 800329a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800329c:	07dc      	lsls	r4, r3, #31
 800329e:	d504      	bpl.n	80032aa <_vfiprintf_r+0x4e>
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	b01d      	add	sp, #116	@ 0x74
 80032a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032aa:	89ab      	ldrh	r3, [r5, #12]
 80032ac:	0598      	lsls	r0, r3, #22
 80032ae:	d4f7      	bmi.n	80032a0 <_vfiprintf_r+0x44>
 80032b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032b2:	f7ff feaf 	bl	8003014 <__retarget_lock_release_recursive>
 80032b6:	e7f3      	b.n	80032a0 <_vfiprintf_r+0x44>
 80032b8:	2300      	movs	r3, #0
 80032ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80032bc:	2320      	movs	r3, #32
 80032be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c6:	2330      	movs	r3, #48	@ 0x30
 80032c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003478 <_vfiprintf_r+0x21c>
 80032cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032d0:	f04f 0901 	mov.w	r9, #1
 80032d4:	4623      	mov	r3, r4
 80032d6:	469a      	mov	sl, r3
 80032d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032dc:	b10a      	cbz	r2, 80032e2 <_vfiprintf_r+0x86>
 80032de:	2a25      	cmp	r2, #37	@ 0x25
 80032e0:	d1f9      	bne.n	80032d6 <_vfiprintf_r+0x7a>
 80032e2:	ebba 0b04 	subs.w	fp, sl, r4
 80032e6:	d00b      	beq.n	8003300 <_vfiprintf_r+0xa4>
 80032e8:	465b      	mov	r3, fp
 80032ea:	4622      	mov	r2, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	4630      	mov	r0, r6
 80032f0:	f7ff ffa1 	bl	8003236 <__sfputs_r>
 80032f4:	3001      	adds	r0, #1
 80032f6:	f000 80a7 	beq.w	8003448 <_vfiprintf_r+0x1ec>
 80032fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032fc:	445a      	add	r2, fp
 80032fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003300:	f89a 3000 	ldrb.w	r3, [sl]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 809f 	beq.w	8003448 <_vfiprintf_r+0x1ec>
 800330a:	2300      	movs	r3, #0
 800330c:	f04f 32ff 	mov.w	r2, #4294967295
 8003310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003314:	f10a 0a01 	add.w	sl, sl, #1
 8003318:	9304      	str	r3, [sp, #16]
 800331a:	9307      	str	r3, [sp, #28]
 800331c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003320:	931a      	str	r3, [sp, #104]	@ 0x68
 8003322:	4654      	mov	r4, sl
 8003324:	2205      	movs	r2, #5
 8003326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332a:	4853      	ldr	r0, [pc, #332]	@ (8003478 <_vfiprintf_r+0x21c>)
 800332c:	f7fc ff78 	bl	8000220 <memchr>
 8003330:	9a04      	ldr	r2, [sp, #16]
 8003332:	b9d8      	cbnz	r0, 800336c <_vfiprintf_r+0x110>
 8003334:	06d1      	lsls	r1, r2, #27
 8003336:	bf44      	itt	mi
 8003338:	2320      	movmi	r3, #32
 800333a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800333e:	0713      	lsls	r3, r2, #28
 8003340:	bf44      	itt	mi
 8003342:	232b      	movmi	r3, #43	@ 0x2b
 8003344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003348:	f89a 3000 	ldrb.w	r3, [sl]
 800334c:	2b2a      	cmp	r3, #42	@ 0x2a
 800334e:	d015      	beq.n	800337c <_vfiprintf_r+0x120>
 8003350:	9a07      	ldr	r2, [sp, #28]
 8003352:	4654      	mov	r4, sl
 8003354:	2000      	movs	r0, #0
 8003356:	f04f 0c0a 	mov.w	ip, #10
 800335a:	4621      	mov	r1, r4
 800335c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003360:	3b30      	subs	r3, #48	@ 0x30
 8003362:	2b09      	cmp	r3, #9
 8003364:	d94b      	bls.n	80033fe <_vfiprintf_r+0x1a2>
 8003366:	b1b0      	cbz	r0, 8003396 <_vfiprintf_r+0x13a>
 8003368:	9207      	str	r2, [sp, #28]
 800336a:	e014      	b.n	8003396 <_vfiprintf_r+0x13a>
 800336c:	eba0 0308 	sub.w	r3, r0, r8
 8003370:	fa09 f303 	lsl.w	r3, r9, r3
 8003374:	4313      	orrs	r3, r2
 8003376:	9304      	str	r3, [sp, #16]
 8003378:	46a2      	mov	sl, r4
 800337a:	e7d2      	b.n	8003322 <_vfiprintf_r+0xc6>
 800337c:	9b03      	ldr	r3, [sp, #12]
 800337e:	1d19      	adds	r1, r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	9103      	str	r1, [sp, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	bfbb      	ittet	lt
 8003388:	425b      	neglt	r3, r3
 800338a:	f042 0202 	orrlt.w	r2, r2, #2
 800338e:	9307      	strge	r3, [sp, #28]
 8003390:	9307      	strlt	r3, [sp, #28]
 8003392:	bfb8      	it	lt
 8003394:	9204      	strlt	r2, [sp, #16]
 8003396:	7823      	ldrb	r3, [r4, #0]
 8003398:	2b2e      	cmp	r3, #46	@ 0x2e
 800339a:	d10a      	bne.n	80033b2 <_vfiprintf_r+0x156>
 800339c:	7863      	ldrb	r3, [r4, #1]
 800339e:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a0:	d132      	bne.n	8003408 <_vfiprintf_r+0x1ac>
 80033a2:	9b03      	ldr	r3, [sp, #12]
 80033a4:	1d1a      	adds	r2, r3, #4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	9203      	str	r2, [sp, #12]
 80033aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033ae:	3402      	adds	r4, #2
 80033b0:	9305      	str	r3, [sp, #20]
 80033b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003488 <_vfiprintf_r+0x22c>
 80033b6:	7821      	ldrb	r1, [r4, #0]
 80033b8:	2203      	movs	r2, #3
 80033ba:	4650      	mov	r0, sl
 80033bc:	f7fc ff30 	bl	8000220 <memchr>
 80033c0:	b138      	cbz	r0, 80033d2 <_vfiprintf_r+0x176>
 80033c2:	9b04      	ldr	r3, [sp, #16]
 80033c4:	eba0 000a 	sub.w	r0, r0, sl
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	4082      	lsls	r2, r0
 80033cc:	4313      	orrs	r3, r2
 80033ce:	3401      	adds	r4, #1
 80033d0:	9304      	str	r3, [sp, #16]
 80033d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d6:	4829      	ldr	r0, [pc, #164]	@ (800347c <_vfiprintf_r+0x220>)
 80033d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033dc:	2206      	movs	r2, #6
 80033de:	f7fc ff1f 	bl	8000220 <memchr>
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d03f      	beq.n	8003466 <_vfiprintf_r+0x20a>
 80033e6:	4b26      	ldr	r3, [pc, #152]	@ (8003480 <_vfiprintf_r+0x224>)
 80033e8:	bb1b      	cbnz	r3, 8003432 <_vfiprintf_r+0x1d6>
 80033ea:	9b03      	ldr	r3, [sp, #12]
 80033ec:	3307      	adds	r3, #7
 80033ee:	f023 0307 	bic.w	r3, r3, #7
 80033f2:	3308      	adds	r3, #8
 80033f4:	9303      	str	r3, [sp, #12]
 80033f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033f8:	443b      	add	r3, r7
 80033fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80033fc:	e76a      	b.n	80032d4 <_vfiprintf_r+0x78>
 80033fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003402:	460c      	mov	r4, r1
 8003404:	2001      	movs	r0, #1
 8003406:	e7a8      	b.n	800335a <_vfiprintf_r+0xfe>
 8003408:	2300      	movs	r3, #0
 800340a:	3401      	adds	r4, #1
 800340c:	9305      	str	r3, [sp, #20]
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0c0a 	mov.w	ip, #10
 8003414:	4620      	mov	r0, r4
 8003416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800341a:	3a30      	subs	r2, #48	@ 0x30
 800341c:	2a09      	cmp	r2, #9
 800341e:	d903      	bls.n	8003428 <_vfiprintf_r+0x1cc>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0c6      	beq.n	80033b2 <_vfiprintf_r+0x156>
 8003424:	9105      	str	r1, [sp, #20]
 8003426:	e7c4      	b.n	80033b2 <_vfiprintf_r+0x156>
 8003428:	fb0c 2101 	mla	r1, ip, r1, r2
 800342c:	4604      	mov	r4, r0
 800342e:	2301      	movs	r3, #1
 8003430:	e7f0      	b.n	8003414 <_vfiprintf_r+0x1b8>
 8003432:	ab03      	add	r3, sp, #12
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	462a      	mov	r2, r5
 8003438:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <_vfiprintf_r+0x228>)
 800343a:	a904      	add	r1, sp, #16
 800343c:	4630      	mov	r0, r6
 800343e:	f3af 8000 	nop.w
 8003442:	4607      	mov	r7, r0
 8003444:	1c78      	adds	r0, r7, #1
 8003446:	d1d6      	bne.n	80033f6 <_vfiprintf_r+0x19a>
 8003448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800344a:	07d9      	lsls	r1, r3, #31
 800344c:	d405      	bmi.n	800345a <_vfiprintf_r+0x1fe>
 800344e:	89ab      	ldrh	r3, [r5, #12]
 8003450:	059a      	lsls	r2, r3, #22
 8003452:	d402      	bmi.n	800345a <_vfiprintf_r+0x1fe>
 8003454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003456:	f7ff fddd 	bl	8003014 <__retarget_lock_release_recursive>
 800345a:	89ab      	ldrh	r3, [r5, #12]
 800345c:	065b      	lsls	r3, r3, #25
 800345e:	f53f af1f 	bmi.w	80032a0 <_vfiprintf_r+0x44>
 8003462:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003464:	e71e      	b.n	80032a4 <_vfiprintf_r+0x48>
 8003466:	ab03      	add	r3, sp, #12
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	462a      	mov	r2, r5
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <_vfiprintf_r+0x228>)
 800346e:	a904      	add	r1, sp, #16
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f879 	bl	8003568 <_printf_i>
 8003476:	e7e4      	b.n	8003442 <_vfiprintf_r+0x1e6>
 8003478:	08003b08 	.word	0x08003b08
 800347c:	08003b12 	.word	0x08003b12
 8003480:	00000000 	.word	0x00000000
 8003484:	08003237 	.word	0x08003237
 8003488:	08003b0e 	.word	0x08003b0e

0800348c <_printf_common>:
 800348c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	4616      	mov	r6, r2
 8003492:	4698      	mov	r8, r3
 8003494:	688a      	ldr	r2, [r1, #8]
 8003496:	690b      	ldr	r3, [r1, #16]
 8003498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800349c:	4293      	cmp	r3, r2
 800349e:	bfb8      	it	lt
 80034a0:	4613      	movlt	r3, r2
 80034a2:	6033      	str	r3, [r6, #0]
 80034a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034a8:	4607      	mov	r7, r0
 80034aa:	460c      	mov	r4, r1
 80034ac:	b10a      	cbz	r2, 80034b2 <_printf_common+0x26>
 80034ae:	3301      	adds	r3, #1
 80034b0:	6033      	str	r3, [r6, #0]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	0699      	lsls	r1, r3, #26
 80034b6:	bf42      	ittt	mi
 80034b8:	6833      	ldrmi	r3, [r6, #0]
 80034ba:	3302      	addmi	r3, #2
 80034bc:	6033      	strmi	r3, [r6, #0]
 80034be:	6825      	ldr	r5, [r4, #0]
 80034c0:	f015 0506 	ands.w	r5, r5, #6
 80034c4:	d106      	bne.n	80034d4 <_printf_common+0x48>
 80034c6:	f104 0a19 	add.w	sl, r4, #25
 80034ca:	68e3      	ldr	r3, [r4, #12]
 80034cc:	6832      	ldr	r2, [r6, #0]
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	42ab      	cmp	r3, r5
 80034d2:	dc26      	bgt.n	8003522 <_printf_common+0x96>
 80034d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034d8:	6822      	ldr	r2, [r4, #0]
 80034da:	3b00      	subs	r3, #0
 80034dc:	bf18      	it	ne
 80034de:	2301      	movne	r3, #1
 80034e0:	0692      	lsls	r2, r2, #26
 80034e2:	d42b      	bmi.n	800353c <_printf_common+0xb0>
 80034e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034e8:	4641      	mov	r1, r8
 80034ea:	4638      	mov	r0, r7
 80034ec:	47c8      	blx	r9
 80034ee:	3001      	adds	r0, #1
 80034f0:	d01e      	beq.n	8003530 <_printf_common+0xa4>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	6922      	ldr	r2, [r4, #16]
 80034f6:	f003 0306 	and.w	r3, r3, #6
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf02      	ittt	eq
 80034fe:	68e5      	ldreq	r5, [r4, #12]
 8003500:	6833      	ldreq	r3, [r6, #0]
 8003502:	1aed      	subeq	r5, r5, r3
 8003504:	68a3      	ldr	r3, [r4, #8]
 8003506:	bf0c      	ite	eq
 8003508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800350c:	2500      	movne	r5, #0
 800350e:	4293      	cmp	r3, r2
 8003510:	bfc4      	itt	gt
 8003512:	1a9b      	subgt	r3, r3, r2
 8003514:	18ed      	addgt	r5, r5, r3
 8003516:	2600      	movs	r6, #0
 8003518:	341a      	adds	r4, #26
 800351a:	42b5      	cmp	r5, r6
 800351c:	d11a      	bne.n	8003554 <_printf_common+0xc8>
 800351e:	2000      	movs	r0, #0
 8003520:	e008      	b.n	8003534 <_printf_common+0xa8>
 8003522:	2301      	movs	r3, #1
 8003524:	4652      	mov	r2, sl
 8003526:	4641      	mov	r1, r8
 8003528:	4638      	mov	r0, r7
 800352a:	47c8      	blx	r9
 800352c:	3001      	adds	r0, #1
 800352e:	d103      	bne.n	8003538 <_printf_common+0xac>
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003538:	3501      	adds	r5, #1
 800353a:	e7c6      	b.n	80034ca <_printf_common+0x3e>
 800353c:	18e1      	adds	r1, r4, r3
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	2030      	movs	r0, #48	@ 0x30
 8003542:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003546:	4422      	add	r2, r4
 8003548:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800354c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003550:	3302      	adds	r3, #2
 8003552:	e7c7      	b.n	80034e4 <_printf_common+0x58>
 8003554:	2301      	movs	r3, #1
 8003556:	4622      	mov	r2, r4
 8003558:	4641      	mov	r1, r8
 800355a:	4638      	mov	r0, r7
 800355c:	47c8      	blx	r9
 800355e:	3001      	adds	r0, #1
 8003560:	d0e6      	beq.n	8003530 <_printf_common+0xa4>
 8003562:	3601      	adds	r6, #1
 8003564:	e7d9      	b.n	800351a <_printf_common+0x8e>
	...

08003568 <_printf_i>:
 8003568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	7e0f      	ldrb	r7, [r1, #24]
 800356e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003570:	2f78      	cmp	r7, #120	@ 0x78
 8003572:	4691      	mov	r9, r2
 8003574:	4680      	mov	r8, r0
 8003576:	460c      	mov	r4, r1
 8003578:	469a      	mov	sl, r3
 800357a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800357e:	d807      	bhi.n	8003590 <_printf_i+0x28>
 8003580:	2f62      	cmp	r7, #98	@ 0x62
 8003582:	d80a      	bhi.n	800359a <_printf_i+0x32>
 8003584:	2f00      	cmp	r7, #0
 8003586:	f000 80d1 	beq.w	800372c <_printf_i+0x1c4>
 800358a:	2f58      	cmp	r7, #88	@ 0x58
 800358c:	f000 80b8 	beq.w	8003700 <_printf_i+0x198>
 8003590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003594:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003598:	e03a      	b.n	8003610 <_printf_i+0xa8>
 800359a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800359e:	2b15      	cmp	r3, #21
 80035a0:	d8f6      	bhi.n	8003590 <_printf_i+0x28>
 80035a2:	a101      	add	r1, pc, #4	@ (adr r1, 80035a8 <_printf_i+0x40>)
 80035a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035a8:	08003601 	.word	0x08003601
 80035ac:	08003615 	.word	0x08003615
 80035b0:	08003591 	.word	0x08003591
 80035b4:	08003591 	.word	0x08003591
 80035b8:	08003591 	.word	0x08003591
 80035bc:	08003591 	.word	0x08003591
 80035c0:	08003615 	.word	0x08003615
 80035c4:	08003591 	.word	0x08003591
 80035c8:	08003591 	.word	0x08003591
 80035cc:	08003591 	.word	0x08003591
 80035d0:	08003591 	.word	0x08003591
 80035d4:	08003713 	.word	0x08003713
 80035d8:	0800363f 	.word	0x0800363f
 80035dc:	080036cd 	.word	0x080036cd
 80035e0:	08003591 	.word	0x08003591
 80035e4:	08003591 	.word	0x08003591
 80035e8:	08003735 	.word	0x08003735
 80035ec:	08003591 	.word	0x08003591
 80035f0:	0800363f 	.word	0x0800363f
 80035f4:	08003591 	.word	0x08003591
 80035f8:	08003591 	.word	0x08003591
 80035fc:	080036d5 	.word	0x080036d5
 8003600:	6833      	ldr	r3, [r6, #0]
 8003602:	1d1a      	adds	r2, r3, #4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6032      	str	r2, [r6, #0]
 8003608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800360c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003610:	2301      	movs	r3, #1
 8003612:	e09c      	b.n	800374e <_printf_i+0x1e6>
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	1d19      	adds	r1, r3, #4
 800361a:	6031      	str	r1, [r6, #0]
 800361c:	0606      	lsls	r6, r0, #24
 800361e:	d501      	bpl.n	8003624 <_printf_i+0xbc>
 8003620:	681d      	ldr	r5, [r3, #0]
 8003622:	e003      	b.n	800362c <_printf_i+0xc4>
 8003624:	0645      	lsls	r5, r0, #25
 8003626:	d5fb      	bpl.n	8003620 <_printf_i+0xb8>
 8003628:	f9b3 5000 	ldrsh.w	r5, [r3]
 800362c:	2d00      	cmp	r5, #0
 800362e:	da03      	bge.n	8003638 <_printf_i+0xd0>
 8003630:	232d      	movs	r3, #45	@ 0x2d
 8003632:	426d      	negs	r5, r5
 8003634:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003638:	4858      	ldr	r0, [pc, #352]	@ (800379c <_printf_i+0x234>)
 800363a:	230a      	movs	r3, #10
 800363c:	e011      	b.n	8003662 <_printf_i+0xfa>
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	6833      	ldr	r3, [r6, #0]
 8003642:	0608      	lsls	r0, r1, #24
 8003644:	f853 5b04 	ldr.w	r5, [r3], #4
 8003648:	d402      	bmi.n	8003650 <_printf_i+0xe8>
 800364a:	0649      	lsls	r1, r1, #25
 800364c:	bf48      	it	mi
 800364e:	b2ad      	uxthmi	r5, r5
 8003650:	2f6f      	cmp	r7, #111	@ 0x6f
 8003652:	4852      	ldr	r0, [pc, #328]	@ (800379c <_printf_i+0x234>)
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	bf14      	ite	ne
 8003658:	230a      	movne	r3, #10
 800365a:	2308      	moveq	r3, #8
 800365c:	2100      	movs	r1, #0
 800365e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003662:	6866      	ldr	r6, [r4, #4]
 8003664:	60a6      	str	r6, [r4, #8]
 8003666:	2e00      	cmp	r6, #0
 8003668:	db05      	blt.n	8003676 <_printf_i+0x10e>
 800366a:	6821      	ldr	r1, [r4, #0]
 800366c:	432e      	orrs	r6, r5
 800366e:	f021 0104 	bic.w	r1, r1, #4
 8003672:	6021      	str	r1, [r4, #0]
 8003674:	d04b      	beq.n	800370e <_printf_i+0x1a6>
 8003676:	4616      	mov	r6, r2
 8003678:	fbb5 f1f3 	udiv	r1, r5, r3
 800367c:	fb03 5711 	mls	r7, r3, r1, r5
 8003680:	5dc7      	ldrb	r7, [r0, r7]
 8003682:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003686:	462f      	mov	r7, r5
 8003688:	42bb      	cmp	r3, r7
 800368a:	460d      	mov	r5, r1
 800368c:	d9f4      	bls.n	8003678 <_printf_i+0x110>
 800368e:	2b08      	cmp	r3, #8
 8003690:	d10b      	bne.n	80036aa <_printf_i+0x142>
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	07df      	lsls	r7, r3, #31
 8003696:	d508      	bpl.n	80036aa <_printf_i+0x142>
 8003698:	6923      	ldr	r3, [r4, #16]
 800369a:	6861      	ldr	r1, [r4, #4]
 800369c:	4299      	cmp	r1, r3
 800369e:	bfde      	ittt	le
 80036a0:	2330      	movle	r3, #48	@ 0x30
 80036a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036aa:	1b92      	subs	r2, r2, r6
 80036ac:	6122      	str	r2, [r4, #16]
 80036ae:	f8cd a000 	str.w	sl, [sp]
 80036b2:	464b      	mov	r3, r9
 80036b4:	aa03      	add	r2, sp, #12
 80036b6:	4621      	mov	r1, r4
 80036b8:	4640      	mov	r0, r8
 80036ba:	f7ff fee7 	bl	800348c <_printf_common>
 80036be:	3001      	adds	r0, #1
 80036c0:	d14a      	bne.n	8003758 <_printf_i+0x1f0>
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295
 80036c6:	b004      	add	sp, #16
 80036c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	f043 0320 	orr.w	r3, r3, #32
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	4832      	ldr	r0, [pc, #200]	@ (80037a0 <_printf_i+0x238>)
 80036d6:	2778      	movs	r7, #120	@ 0x78
 80036d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	6831      	ldr	r1, [r6, #0]
 80036e0:	061f      	lsls	r7, r3, #24
 80036e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80036e6:	d402      	bmi.n	80036ee <_printf_i+0x186>
 80036e8:	065f      	lsls	r7, r3, #25
 80036ea:	bf48      	it	mi
 80036ec:	b2ad      	uxthmi	r5, r5
 80036ee:	6031      	str	r1, [r6, #0]
 80036f0:	07d9      	lsls	r1, r3, #31
 80036f2:	bf44      	itt	mi
 80036f4:	f043 0320 	orrmi.w	r3, r3, #32
 80036f8:	6023      	strmi	r3, [r4, #0]
 80036fa:	b11d      	cbz	r5, 8003704 <_printf_i+0x19c>
 80036fc:	2310      	movs	r3, #16
 80036fe:	e7ad      	b.n	800365c <_printf_i+0xf4>
 8003700:	4826      	ldr	r0, [pc, #152]	@ (800379c <_printf_i+0x234>)
 8003702:	e7e9      	b.n	80036d8 <_printf_i+0x170>
 8003704:	6823      	ldr	r3, [r4, #0]
 8003706:	f023 0320 	bic.w	r3, r3, #32
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	e7f6      	b.n	80036fc <_printf_i+0x194>
 800370e:	4616      	mov	r6, r2
 8003710:	e7bd      	b.n	800368e <_printf_i+0x126>
 8003712:	6833      	ldr	r3, [r6, #0]
 8003714:	6825      	ldr	r5, [r4, #0]
 8003716:	6961      	ldr	r1, [r4, #20]
 8003718:	1d18      	adds	r0, r3, #4
 800371a:	6030      	str	r0, [r6, #0]
 800371c:	062e      	lsls	r6, r5, #24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	d501      	bpl.n	8003726 <_printf_i+0x1be>
 8003722:	6019      	str	r1, [r3, #0]
 8003724:	e002      	b.n	800372c <_printf_i+0x1c4>
 8003726:	0668      	lsls	r0, r5, #25
 8003728:	d5fb      	bpl.n	8003722 <_printf_i+0x1ba>
 800372a:	8019      	strh	r1, [r3, #0]
 800372c:	2300      	movs	r3, #0
 800372e:	6123      	str	r3, [r4, #16]
 8003730:	4616      	mov	r6, r2
 8003732:	e7bc      	b.n	80036ae <_printf_i+0x146>
 8003734:	6833      	ldr	r3, [r6, #0]
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	6032      	str	r2, [r6, #0]
 800373a:	681e      	ldr	r6, [r3, #0]
 800373c:	6862      	ldr	r2, [r4, #4]
 800373e:	2100      	movs	r1, #0
 8003740:	4630      	mov	r0, r6
 8003742:	f7fc fd6d 	bl	8000220 <memchr>
 8003746:	b108      	cbz	r0, 800374c <_printf_i+0x1e4>
 8003748:	1b80      	subs	r0, r0, r6
 800374a:	6060      	str	r0, [r4, #4]
 800374c:	6863      	ldr	r3, [r4, #4]
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	2300      	movs	r3, #0
 8003752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003756:	e7aa      	b.n	80036ae <_printf_i+0x146>
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	4632      	mov	r2, r6
 800375c:	4649      	mov	r1, r9
 800375e:	4640      	mov	r0, r8
 8003760:	47d0      	blx	sl
 8003762:	3001      	adds	r0, #1
 8003764:	d0ad      	beq.n	80036c2 <_printf_i+0x15a>
 8003766:	6823      	ldr	r3, [r4, #0]
 8003768:	079b      	lsls	r3, r3, #30
 800376a:	d413      	bmi.n	8003794 <_printf_i+0x22c>
 800376c:	68e0      	ldr	r0, [r4, #12]
 800376e:	9b03      	ldr	r3, [sp, #12]
 8003770:	4298      	cmp	r0, r3
 8003772:	bfb8      	it	lt
 8003774:	4618      	movlt	r0, r3
 8003776:	e7a6      	b.n	80036c6 <_printf_i+0x15e>
 8003778:	2301      	movs	r3, #1
 800377a:	4632      	mov	r2, r6
 800377c:	4649      	mov	r1, r9
 800377e:	4640      	mov	r0, r8
 8003780:	47d0      	blx	sl
 8003782:	3001      	adds	r0, #1
 8003784:	d09d      	beq.n	80036c2 <_printf_i+0x15a>
 8003786:	3501      	adds	r5, #1
 8003788:	68e3      	ldr	r3, [r4, #12]
 800378a:	9903      	ldr	r1, [sp, #12]
 800378c:	1a5b      	subs	r3, r3, r1
 800378e:	42ab      	cmp	r3, r5
 8003790:	dcf2      	bgt.n	8003778 <_printf_i+0x210>
 8003792:	e7eb      	b.n	800376c <_printf_i+0x204>
 8003794:	2500      	movs	r5, #0
 8003796:	f104 0619 	add.w	r6, r4, #25
 800379a:	e7f5      	b.n	8003788 <_printf_i+0x220>
 800379c:	08003b19 	.word	0x08003b19
 80037a0:	08003b2a 	.word	0x08003b2a

080037a4 <__sflush_r>:
 80037a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ac:	0716      	lsls	r6, r2, #28
 80037ae:	4605      	mov	r5, r0
 80037b0:	460c      	mov	r4, r1
 80037b2:	d454      	bmi.n	800385e <__sflush_r+0xba>
 80037b4:	684b      	ldr	r3, [r1, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	dc02      	bgt.n	80037c0 <__sflush_r+0x1c>
 80037ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037bc:	2b00      	cmp	r3, #0
 80037be:	dd48      	ble.n	8003852 <__sflush_r+0xae>
 80037c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037c2:	2e00      	cmp	r6, #0
 80037c4:	d045      	beq.n	8003852 <__sflush_r+0xae>
 80037c6:	2300      	movs	r3, #0
 80037c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037cc:	682f      	ldr	r7, [r5, #0]
 80037ce:	6a21      	ldr	r1, [r4, #32]
 80037d0:	602b      	str	r3, [r5, #0]
 80037d2:	d030      	beq.n	8003836 <__sflush_r+0x92>
 80037d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	0759      	lsls	r1, r3, #29
 80037da:	d505      	bpl.n	80037e8 <__sflush_r+0x44>
 80037dc:	6863      	ldr	r3, [r4, #4]
 80037de:	1ad2      	subs	r2, r2, r3
 80037e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037e2:	b10b      	cbz	r3, 80037e8 <__sflush_r+0x44>
 80037e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037e6:	1ad2      	subs	r2, r2, r3
 80037e8:	2300      	movs	r3, #0
 80037ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037ec:	6a21      	ldr	r1, [r4, #32]
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b0      	blx	r6
 80037f2:	1c43      	adds	r3, r0, #1
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	d106      	bne.n	8003806 <__sflush_r+0x62>
 80037f8:	6829      	ldr	r1, [r5, #0]
 80037fa:	291d      	cmp	r1, #29
 80037fc:	d82b      	bhi.n	8003856 <__sflush_r+0xb2>
 80037fe:	4a2a      	ldr	r2, [pc, #168]	@ (80038a8 <__sflush_r+0x104>)
 8003800:	40ca      	lsrs	r2, r1
 8003802:	07d6      	lsls	r6, r2, #31
 8003804:	d527      	bpl.n	8003856 <__sflush_r+0xb2>
 8003806:	2200      	movs	r2, #0
 8003808:	6062      	str	r2, [r4, #4]
 800380a:	04d9      	lsls	r1, r3, #19
 800380c:	6922      	ldr	r2, [r4, #16]
 800380e:	6022      	str	r2, [r4, #0]
 8003810:	d504      	bpl.n	800381c <__sflush_r+0x78>
 8003812:	1c42      	adds	r2, r0, #1
 8003814:	d101      	bne.n	800381a <__sflush_r+0x76>
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	b903      	cbnz	r3, 800381c <__sflush_r+0x78>
 800381a:	6560      	str	r0, [r4, #84]	@ 0x54
 800381c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800381e:	602f      	str	r7, [r5, #0]
 8003820:	b1b9      	cbz	r1, 8003852 <__sflush_r+0xae>
 8003822:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003826:	4299      	cmp	r1, r3
 8003828:	d002      	beq.n	8003830 <__sflush_r+0x8c>
 800382a:	4628      	mov	r0, r5
 800382c:	f7ff fbf4 	bl	8003018 <_free_r>
 8003830:	2300      	movs	r3, #0
 8003832:	6363      	str	r3, [r4, #52]	@ 0x34
 8003834:	e00d      	b.n	8003852 <__sflush_r+0xae>
 8003836:	2301      	movs	r3, #1
 8003838:	4628      	mov	r0, r5
 800383a:	47b0      	blx	r6
 800383c:	4602      	mov	r2, r0
 800383e:	1c50      	adds	r0, r2, #1
 8003840:	d1c9      	bne.n	80037d6 <__sflush_r+0x32>
 8003842:	682b      	ldr	r3, [r5, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0c6      	beq.n	80037d6 <__sflush_r+0x32>
 8003848:	2b1d      	cmp	r3, #29
 800384a:	d001      	beq.n	8003850 <__sflush_r+0xac>
 800384c:	2b16      	cmp	r3, #22
 800384e:	d11e      	bne.n	800388e <__sflush_r+0xea>
 8003850:	602f      	str	r7, [r5, #0]
 8003852:	2000      	movs	r0, #0
 8003854:	e022      	b.n	800389c <__sflush_r+0xf8>
 8003856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800385a:	b21b      	sxth	r3, r3
 800385c:	e01b      	b.n	8003896 <__sflush_r+0xf2>
 800385e:	690f      	ldr	r7, [r1, #16]
 8003860:	2f00      	cmp	r7, #0
 8003862:	d0f6      	beq.n	8003852 <__sflush_r+0xae>
 8003864:	0793      	lsls	r3, r2, #30
 8003866:	680e      	ldr	r6, [r1, #0]
 8003868:	bf08      	it	eq
 800386a:	694b      	ldreq	r3, [r1, #20]
 800386c:	600f      	str	r7, [r1, #0]
 800386e:	bf18      	it	ne
 8003870:	2300      	movne	r3, #0
 8003872:	eba6 0807 	sub.w	r8, r6, r7
 8003876:	608b      	str	r3, [r1, #8]
 8003878:	f1b8 0f00 	cmp.w	r8, #0
 800387c:	dde9      	ble.n	8003852 <__sflush_r+0xae>
 800387e:	6a21      	ldr	r1, [r4, #32]
 8003880:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003882:	4643      	mov	r3, r8
 8003884:	463a      	mov	r2, r7
 8003886:	4628      	mov	r0, r5
 8003888:	47b0      	blx	r6
 800388a:	2800      	cmp	r0, #0
 800388c:	dc08      	bgt.n	80038a0 <__sflush_r+0xfc>
 800388e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003892:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	f04f 30ff 	mov.w	r0, #4294967295
 800389c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a0:	4407      	add	r7, r0
 80038a2:	eba8 0800 	sub.w	r8, r8, r0
 80038a6:	e7e7      	b.n	8003878 <__sflush_r+0xd4>
 80038a8:	20400001 	.word	0x20400001

080038ac <_fflush_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	690b      	ldr	r3, [r1, #16]
 80038b0:	4605      	mov	r5, r0
 80038b2:	460c      	mov	r4, r1
 80038b4:	b913      	cbnz	r3, 80038bc <_fflush_r+0x10>
 80038b6:	2500      	movs	r5, #0
 80038b8:	4628      	mov	r0, r5
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	b118      	cbz	r0, 80038c6 <_fflush_r+0x1a>
 80038be:	6a03      	ldr	r3, [r0, #32]
 80038c0:	b90b      	cbnz	r3, 80038c6 <_fflush_r+0x1a>
 80038c2:	f7ff f9a7 	bl	8002c14 <__sinit>
 80038c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f3      	beq.n	80038b6 <_fflush_r+0xa>
 80038ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038d0:	07d0      	lsls	r0, r2, #31
 80038d2:	d404      	bmi.n	80038de <_fflush_r+0x32>
 80038d4:	0599      	lsls	r1, r3, #22
 80038d6:	d402      	bmi.n	80038de <_fflush_r+0x32>
 80038d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038da:	f7ff fb9a 	bl	8003012 <__retarget_lock_acquire_recursive>
 80038de:	4628      	mov	r0, r5
 80038e0:	4621      	mov	r1, r4
 80038e2:	f7ff ff5f 	bl	80037a4 <__sflush_r>
 80038e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038e8:	07da      	lsls	r2, r3, #31
 80038ea:	4605      	mov	r5, r0
 80038ec:	d4e4      	bmi.n	80038b8 <_fflush_r+0xc>
 80038ee:	89a3      	ldrh	r3, [r4, #12]
 80038f0:	059b      	lsls	r3, r3, #22
 80038f2:	d4e1      	bmi.n	80038b8 <_fflush_r+0xc>
 80038f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038f6:	f7ff fb8d 	bl	8003014 <__retarget_lock_release_recursive>
 80038fa:	e7dd      	b.n	80038b8 <_fflush_r+0xc>

080038fc <__swhatbuf_r>:
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	460c      	mov	r4, r1
 8003900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003904:	2900      	cmp	r1, #0
 8003906:	b096      	sub	sp, #88	@ 0x58
 8003908:	4615      	mov	r5, r2
 800390a:	461e      	mov	r6, r3
 800390c:	da0d      	bge.n	800392a <__swhatbuf_r+0x2e>
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003914:	f04f 0100 	mov.w	r1, #0
 8003918:	bf14      	ite	ne
 800391a:	2340      	movne	r3, #64	@ 0x40
 800391c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003920:	2000      	movs	r0, #0
 8003922:	6031      	str	r1, [r6, #0]
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	b016      	add	sp, #88	@ 0x58
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	466a      	mov	r2, sp
 800392c:	f000 f87c 	bl	8003a28 <_fstat_r>
 8003930:	2800      	cmp	r0, #0
 8003932:	dbec      	blt.n	800390e <__swhatbuf_r+0x12>
 8003934:	9901      	ldr	r1, [sp, #4]
 8003936:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800393a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800393e:	4259      	negs	r1, r3
 8003940:	4159      	adcs	r1, r3
 8003942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003946:	e7eb      	b.n	8003920 <__swhatbuf_r+0x24>

08003948 <__smakebuf_r>:
 8003948:	898b      	ldrh	r3, [r1, #12]
 800394a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800394c:	079d      	lsls	r5, r3, #30
 800394e:	4606      	mov	r6, r0
 8003950:	460c      	mov	r4, r1
 8003952:	d507      	bpl.n	8003964 <__smakebuf_r+0x1c>
 8003954:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	6123      	str	r3, [r4, #16]
 800395c:	2301      	movs	r3, #1
 800395e:	6163      	str	r3, [r4, #20]
 8003960:	b003      	add	sp, #12
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003964:	ab01      	add	r3, sp, #4
 8003966:	466a      	mov	r2, sp
 8003968:	f7ff ffc8 	bl	80038fc <__swhatbuf_r>
 800396c:	9f00      	ldr	r7, [sp, #0]
 800396e:	4605      	mov	r5, r0
 8003970:	4639      	mov	r1, r7
 8003972:	4630      	mov	r0, r6
 8003974:	f7ff fbbc 	bl	80030f0 <_malloc_r>
 8003978:	b948      	cbnz	r0, 800398e <__smakebuf_r+0x46>
 800397a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800397e:	059a      	lsls	r2, r3, #22
 8003980:	d4ee      	bmi.n	8003960 <__smakebuf_r+0x18>
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	f043 0302 	orr.w	r3, r3, #2
 800398a:	81a3      	strh	r3, [r4, #12]
 800398c:	e7e2      	b.n	8003954 <__smakebuf_r+0xc>
 800398e:	89a3      	ldrh	r3, [r4, #12]
 8003990:	6020      	str	r0, [r4, #0]
 8003992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003996:	81a3      	strh	r3, [r4, #12]
 8003998:	9b01      	ldr	r3, [sp, #4]
 800399a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800399e:	b15b      	cbz	r3, 80039b8 <__smakebuf_r+0x70>
 80039a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039a4:	4630      	mov	r0, r6
 80039a6:	f000 f851 	bl	8003a4c <_isatty_r>
 80039aa:	b128      	cbz	r0, 80039b8 <__smakebuf_r+0x70>
 80039ac:	89a3      	ldrh	r3, [r4, #12]
 80039ae:	f023 0303 	bic.w	r3, r3, #3
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	81a3      	strh	r3, [r4, #12]
 80039b8:	89a3      	ldrh	r3, [r4, #12]
 80039ba:	431d      	orrs	r5, r3
 80039bc:	81a5      	strh	r5, [r4, #12]
 80039be:	e7cf      	b.n	8003960 <__smakebuf_r+0x18>

080039c0 <_putc_r>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	460d      	mov	r5, r1
 80039c4:	4614      	mov	r4, r2
 80039c6:	4606      	mov	r6, r0
 80039c8:	b118      	cbz	r0, 80039d2 <_putc_r+0x12>
 80039ca:	6a03      	ldr	r3, [r0, #32]
 80039cc:	b90b      	cbnz	r3, 80039d2 <_putc_r+0x12>
 80039ce:	f7ff f921 	bl	8002c14 <__sinit>
 80039d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039d4:	07d8      	lsls	r0, r3, #31
 80039d6:	d405      	bmi.n	80039e4 <_putc_r+0x24>
 80039d8:	89a3      	ldrh	r3, [r4, #12]
 80039da:	0599      	lsls	r1, r3, #22
 80039dc:	d402      	bmi.n	80039e4 <_putc_r+0x24>
 80039de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039e0:	f7ff fb17 	bl	8003012 <__retarget_lock_acquire_recursive>
 80039e4:	68a3      	ldr	r3, [r4, #8]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	60a3      	str	r3, [r4, #8]
 80039ec:	da05      	bge.n	80039fa <_putc_r+0x3a>
 80039ee:	69a2      	ldr	r2, [r4, #24]
 80039f0:	4293      	cmp	r3, r2
 80039f2:	db12      	blt.n	8003a1a <_putc_r+0x5a>
 80039f4:	b2eb      	uxtb	r3, r5
 80039f6:	2b0a      	cmp	r3, #10
 80039f8:	d00f      	beq.n	8003a1a <_putc_r+0x5a>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	1c5a      	adds	r2, r3, #1
 80039fe:	6022      	str	r2, [r4, #0]
 8003a00:	701d      	strb	r5, [r3, #0]
 8003a02:	b2ed      	uxtb	r5, r5
 8003a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a06:	07da      	lsls	r2, r3, #31
 8003a08:	d405      	bmi.n	8003a16 <_putc_r+0x56>
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	059b      	lsls	r3, r3, #22
 8003a0e:	d402      	bmi.n	8003a16 <_putc_r+0x56>
 8003a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a12:	f7ff faff 	bl	8003014 <__retarget_lock_release_recursive>
 8003a16:	4628      	mov	r0, r5
 8003a18:	bd70      	pop	{r4, r5, r6, pc}
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4622      	mov	r2, r4
 8003a1e:	4630      	mov	r0, r6
 8003a20:	f7ff f9e9 	bl	8002df6 <__swbuf_r>
 8003a24:	4605      	mov	r5, r0
 8003a26:	e7ed      	b.n	8003a04 <_putc_r+0x44>

08003a28 <_fstat_r>:
 8003a28:	b538      	push	{r3, r4, r5, lr}
 8003a2a:	4d07      	ldr	r5, [pc, #28]	@ (8003a48 <_fstat_r+0x20>)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	4604      	mov	r4, r0
 8003a30:	4608      	mov	r0, r1
 8003a32:	4611      	mov	r1, r2
 8003a34:	602b      	str	r3, [r5, #0]
 8003a36:	f7fc ff75 	bl	8000924 <_fstat>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	d102      	bne.n	8003a44 <_fstat_r+0x1c>
 8003a3e:	682b      	ldr	r3, [r5, #0]
 8003a40:	b103      	cbz	r3, 8003a44 <_fstat_r+0x1c>
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	bd38      	pop	{r3, r4, r5, pc}
 8003a46:	bf00      	nop
 8003a48:	2000021c 	.word	0x2000021c

08003a4c <_isatty_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4d06      	ldr	r5, [pc, #24]	@ (8003a68 <_isatty_r+0x1c>)
 8003a50:	2300      	movs	r3, #0
 8003a52:	4604      	mov	r4, r0
 8003a54:	4608      	mov	r0, r1
 8003a56:	602b      	str	r3, [r5, #0]
 8003a58:	f7fc ff74 	bl	8000944 <_isatty>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_isatty_r+0x1a>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_isatty_r+0x1a>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	2000021c 	.word	0x2000021c

08003a6c <_sbrk_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4d06      	ldr	r5, [pc, #24]	@ (8003a88 <_sbrk_r+0x1c>)
 8003a70:	2300      	movs	r3, #0
 8003a72:	4604      	mov	r4, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	f7fc ff7c 	bl	8000974 <_sbrk>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_sbrk_r+0x1a>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_sbrk_r+0x1a>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	2000021c 	.word	0x2000021c

08003a8c <_init>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

08003a98 <_fini>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr
